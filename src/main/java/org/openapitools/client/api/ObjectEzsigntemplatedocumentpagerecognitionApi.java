/**
 * eZmax API Definition (Full)
 * This API expose all the functionnalities for the eZmax and eZsign applications.
 *
 * The version of the OpenAPI document: 1.2.1
 * Contact: support-api@ezmax.ca
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package org.openapitools.client.api;

import eZmaxAPI.ApiInvoker;
import eZmaxAPI.ApiException;
import eZmaxAPI.Pair;

import org.openapitools.client.model.*;

import java.util.*;

import com.android.volley.Response;
import com.android.volley.VolleyError;

import org.openapitools.client.model.CommonResponseError;
import org.openapitools.client.model.EzsigntemplatedocumentpagerecognitionCreateObjectV1Request;
import org.openapitools.client.model.EzsigntemplatedocumentpagerecognitionCreateObjectV1Response;
import org.openapitools.client.model.EzsigntemplatedocumentpagerecognitionDeleteObjectV1Response;
import org.openapitools.client.model.EzsigntemplatedocumentpagerecognitionEditObjectV1Request;
import org.openapitools.client.model.EzsigntemplatedocumentpagerecognitionEditObjectV1Response;
import org.openapitools.client.model.EzsigntemplatedocumentpagerecognitionGetObjectV2Response;

import org.apache.http.HttpEntity;
import org.apache.http.entity.mime.MultipartEntityBuilder;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.concurrent.ExecutionException;
import java.util.concurrent.TimeoutException;

public class ObjectEzsigntemplatedocumentpagerecognitionApi {
  String basePath = "https://prod.api.appcluster01.ca-central-1.ezmax.com/rest";
  ApiInvoker apiInvoker = ApiInvoker.getInstance();

  public void addHeader(String key, String value) {
    getInvoker().addDefaultHeader(key, value);
  }

  public ApiInvoker getInvoker() {
    return apiInvoker;
  }

  public void setBasePath(String basePath) {
    this.basePath = basePath;
  }

  public String getBasePath() {
    return basePath;
  }

  /**
  * Create a new Ezsigntemplatedocumentpagerecognition
  * The endpoint allows to create one or many elements at once.
   * @param ezsigntemplatedocumentpagerecognitionCreateObjectV1Request 
   * @return EzsigntemplatedocumentpagerecognitionCreateObjectV1Response
  */
  public EzsigntemplatedocumentpagerecognitionCreateObjectV1Response ezsigntemplatedocumentpagerecognitionCreateObjectV1 (EzsigntemplatedocumentpagerecognitionCreateObjectV1Request ezsigntemplatedocumentpagerecognitionCreateObjectV1Request) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = ezsigntemplatedocumentpagerecognitionCreateObjectV1Request;
    // verify the required parameter 'ezsigntemplatedocumentpagerecognitionCreateObjectV1Request' is set
    if (ezsigntemplatedocumentpagerecognitionCreateObjectV1Request == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'ezsigntemplatedocumentpagerecognitionCreateObjectV1Request' when calling ezsigntemplatedocumentpagerecognitionCreateObjectV1",
        new ApiException(400, "Missing the required parameter 'ezsigntemplatedocumentpagerecognitionCreateObjectV1Request' when calling ezsigntemplatedocumentpagerecognitionCreateObjectV1"));
    }

    // create path and map variables
    String path = "/1/object/ezsigntemplatedocumentpagerecognition";

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "Authorization" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (EzsigntemplatedocumentpagerecognitionCreateObjectV1Response) ApiInvoker.deserialize(localVarResponse, "", EzsigntemplatedocumentpagerecognitionCreateObjectV1Response.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Create a new Ezsigntemplatedocumentpagerecognition
   * The endpoint allows to create one or many elements at once.
   * @param ezsigntemplatedocumentpagerecognitionCreateObjectV1Request 
  */
  public void ezsigntemplatedocumentpagerecognitionCreateObjectV1 (EzsigntemplatedocumentpagerecognitionCreateObjectV1Request ezsigntemplatedocumentpagerecognitionCreateObjectV1Request, final Response.Listener<EzsigntemplatedocumentpagerecognitionCreateObjectV1Response> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = ezsigntemplatedocumentpagerecognitionCreateObjectV1Request;

    // verify the required parameter 'ezsigntemplatedocumentpagerecognitionCreateObjectV1Request' is set
    if (ezsigntemplatedocumentpagerecognitionCreateObjectV1Request == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'ezsigntemplatedocumentpagerecognitionCreateObjectV1Request' when calling ezsigntemplatedocumentpagerecognitionCreateObjectV1",
        new ApiException(400, "Missing the required parameter 'ezsigntemplatedocumentpagerecognitionCreateObjectV1Request' when calling ezsigntemplatedocumentpagerecognitionCreateObjectV1"));
    }

    // create path and map variables
    String path = "/1/object/ezsigntemplatedocumentpagerecognition".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "Authorization" };

    try {
      apiInvoker.invokeAPI(basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((EzsigntemplatedocumentpagerecognitionCreateObjectV1Response) ApiInvoker.deserialize(localVarResponse,  "", EzsigntemplatedocumentpagerecognitionCreateObjectV1Response.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Delete an existing Ezsigntemplatedocumentpagerecognition
  * 
   * @param pkiEzsigntemplatedocumentpagerecognitionID The unique ID of the Ezsigntemplatedocumentpagerecognition
   * @return EzsigntemplatedocumentpagerecognitionDeleteObjectV1Response
  */
  public EzsigntemplatedocumentpagerecognitionDeleteObjectV1Response ezsigntemplatedocumentpagerecognitionDeleteObjectV1 (Integer pkiEzsigntemplatedocumentpagerecognitionID) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'pkiEzsigntemplatedocumentpagerecognitionID' is set
    if (pkiEzsigntemplatedocumentpagerecognitionID == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'pkiEzsigntemplatedocumentpagerecognitionID' when calling ezsigntemplatedocumentpagerecognitionDeleteObjectV1",
        new ApiException(400, "Missing the required parameter 'pkiEzsigntemplatedocumentpagerecognitionID' when calling ezsigntemplatedocumentpagerecognitionDeleteObjectV1"));
    }

    // create path and map variables
    String path = "/1/object/ezsigntemplatedocumentpagerecognition/{pkiEzsigntemplatedocumentpagerecognitionID}".replaceAll("\\{" + "pkiEzsigntemplatedocumentpagerecognitionID" + "\\}", apiInvoker.escapeString(pkiEzsigntemplatedocumentpagerecognitionID.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "Authorization" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "DELETE", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (EzsigntemplatedocumentpagerecognitionDeleteObjectV1Response) ApiInvoker.deserialize(localVarResponse, "", EzsigntemplatedocumentpagerecognitionDeleteObjectV1Response.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Delete an existing Ezsigntemplatedocumentpagerecognition
   * 
   * @param pkiEzsigntemplatedocumentpagerecognitionID The unique ID of the Ezsigntemplatedocumentpagerecognition
  */
  public void ezsigntemplatedocumentpagerecognitionDeleteObjectV1 (Integer pkiEzsigntemplatedocumentpagerecognitionID, final Response.Listener<EzsigntemplatedocumentpagerecognitionDeleteObjectV1Response> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'pkiEzsigntemplatedocumentpagerecognitionID' is set
    if (pkiEzsigntemplatedocumentpagerecognitionID == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'pkiEzsigntemplatedocumentpagerecognitionID' when calling ezsigntemplatedocumentpagerecognitionDeleteObjectV1",
        new ApiException(400, "Missing the required parameter 'pkiEzsigntemplatedocumentpagerecognitionID' when calling ezsigntemplatedocumentpagerecognitionDeleteObjectV1"));
    }

    // create path and map variables
    String path = "/1/object/ezsigntemplatedocumentpagerecognition/{pkiEzsigntemplatedocumentpagerecognitionID}".replaceAll("\\{format\\}","json").replaceAll("\\{" + "pkiEzsigntemplatedocumentpagerecognitionID" + "\\}", apiInvoker.escapeString(pkiEzsigntemplatedocumentpagerecognitionID.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "Authorization" };

    try {
      apiInvoker.invokeAPI(basePath, path, "DELETE", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((EzsigntemplatedocumentpagerecognitionDeleteObjectV1Response) ApiInvoker.deserialize(localVarResponse,  "", EzsigntemplatedocumentpagerecognitionDeleteObjectV1Response.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Edit an existing Ezsigntemplatedocumentpagerecognition
  * 
   * @param pkiEzsigntemplatedocumentpagerecognitionID The unique ID of the Ezsigntemplatedocumentpagerecognition
   * @param ezsigntemplatedocumentpagerecognitionEditObjectV1Request 
   * @return EzsigntemplatedocumentpagerecognitionEditObjectV1Response
  */
  public EzsigntemplatedocumentpagerecognitionEditObjectV1Response ezsigntemplatedocumentpagerecognitionEditObjectV1 (Integer pkiEzsigntemplatedocumentpagerecognitionID, EzsigntemplatedocumentpagerecognitionEditObjectV1Request ezsigntemplatedocumentpagerecognitionEditObjectV1Request) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = ezsigntemplatedocumentpagerecognitionEditObjectV1Request;
    // verify the required parameter 'pkiEzsigntemplatedocumentpagerecognitionID' is set
    if (pkiEzsigntemplatedocumentpagerecognitionID == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'pkiEzsigntemplatedocumentpagerecognitionID' when calling ezsigntemplatedocumentpagerecognitionEditObjectV1",
        new ApiException(400, "Missing the required parameter 'pkiEzsigntemplatedocumentpagerecognitionID' when calling ezsigntemplatedocumentpagerecognitionEditObjectV1"));
    }
    // verify the required parameter 'ezsigntemplatedocumentpagerecognitionEditObjectV1Request' is set
    if (ezsigntemplatedocumentpagerecognitionEditObjectV1Request == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'ezsigntemplatedocumentpagerecognitionEditObjectV1Request' when calling ezsigntemplatedocumentpagerecognitionEditObjectV1",
        new ApiException(400, "Missing the required parameter 'ezsigntemplatedocumentpagerecognitionEditObjectV1Request' when calling ezsigntemplatedocumentpagerecognitionEditObjectV1"));
    }

    // create path and map variables
    String path = "/1/object/ezsigntemplatedocumentpagerecognition/{pkiEzsigntemplatedocumentpagerecognitionID}".replaceAll("\\{" + "pkiEzsigntemplatedocumentpagerecognitionID" + "\\}", apiInvoker.escapeString(pkiEzsigntemplatedocumentpagerecognitionID.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "Authorization" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "PUT", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (EzsigntemplatedocumentpagerecognitionEditObjectV1Response) ApiInvoker.deserialize(localVarResponse, "", EzsigntemplatedocumentpagerecognitionEditObjectV1Response.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Edit an existing Ezsigntemplatedocumentpagerecognition
   * 
   * @param pkiEzsigntemplatedocumentpagerecognitionID The unique ID of the Ezsigntemplatedocumentpagerecognition   * @param ezsigntemplatedocumentpagerecognitionEditObjectV1Request 
  */
  public void ezsigntemplatedocumentpagerecognitionEditObjectV1 (Integer pkiEzsigntemplatedocumentpagerecognitionID, EzsigntemplatedocumentpagerecognitionEditObjectV1Request ezsigntemplatedocumentpagerecognitionEditObjectV1Request, final Response.Listener<EzsigntemplatedocumentpagerecognitionEditObjectV1Response> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = ezsigntemplatedocumentpagerecognitionEditObjectV1Request;

    // verify the required parameter 'pkiEzsigntemplatedocumentpagerecognitionID' is set
    if (pkiEzsigntemplatedocumentpagerecognitionID == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'pkiEzsigntemplatedocumentpagerecognitionID' when calling ezsigntemplatedocumentpagerecognitionEditObjectV1",
        new ApiException(400, "Missing the required parameter 'pkiEzsigntemplatedocumentpagerecognitionID' when calling ezsigntemplatedocumentpagerecognitionEditObjectV1"));
    }
    // verify the required parameter 'ezsigntemplatedocumentpagerecognitionEditObjectV1Request' is set
    if (ezsigntemplatedocumentpagerecognitionEditObjectV1Request == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'ezsigntemplatedocumentpagerecognitionEditObjectV1Request' when calling ezsigntemplatedocumentpagerecognitionEditObjectV1",
        new ApiException(400, "Missing the required parameter 'ezsigntemplatedocumentpagerecognitionEditObjectV1Request' when calling ezsigntemplatedocumentpagerecognitionEditObjectV1"));
    }

    // create path and map variables
    String path = "/1/object/ezsigntemplatedocumentpagerecognition/{pkiEzsigntemplatedocumentpagerecognitionID}".replaceAll("\\{format\\}","json").replaceAll("\\{" + "pkiEzsigntemplatedocumentpagerecognitionID" + "\\}", apiInvoker.escapeString(pkiEzsigntemplatedocumentpagerecognitionID.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "Authorization" };

    try {
      apiInvoker.invokeAPI(basePath, path, "PUT", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((EzsigntemplatedocumentpagerecognitionEditObjectV1Response) ApiInvoker.deserialize(localVarResponse,  "", EzsigntemplatedocumentpagerecognitionEditObjectV1Response.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Retrieve an existing Ezsigntemplatedocumentpagerecognition
  * 
   * @param pkiEzsigntemplatedocumentpagerecognitionID The unique ID of the Ezsigntemplatedocumentpagerecognition
   * @return EzsigntemplatedocumentpagerecognitionGetObjectV2Response
  */
  public EzsigntemplatedocumentpagerecognitionGetObjectV2Response ezsigntemplatedocumentpagerecognitionGetObjectV2 (Integer pkiEzsigntemplatedocumentpagerecognitionID) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'pkiEzsigntemplatedocumentpagerecognitionID' is set
    if (pkiEzsigntemplatedocumentpagerecognitionID == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'pkiEzsigntemplatedocumentpagerecognitionID' when calling ezsigntemplatedocumentpagerecognitionGetObjectV2",
        new ApiException(400, "Missing the required parameter 'pkiEzsigntemplatedocumentpagerecognitionID' when calling ezsigntemplatedocumentpagerecognitionGetObjectV2"));
    }

    // create path and map variables
    String path = "/2/object/ezsigntemplatedocumentpagerecognition/{pkiEzsigntemplatedocumentpagerecognitionID}".replaceAll("\\{" + "pkiEzsigntemplatedocumentpagerecognitionID" + "\\}", apiInvoker.escapeString(pkiEzsigntemplatedocumentpagerecognitionID.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "Authorization" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (EzsigntemplatedocumentpagerecognitionGetObjectV2Response) ApiInvoker.deserialize(localVarResponse, "", EzsigntemplatedocumentpagerecognitionGetObjectV2Response.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Retrieve an existing Ezsigntemplatedocumentpagerecognition
   * 
   * @param pkiEzsigntemplatedocumentpagerecognitionID The unique ID of the Ezsigntemplatedocumentpagerecognition
  */
  public void ezsigntemplatedocumentpagerecognitionGetObjectV2 (Integer pkiEzsigntemplatedocumentpagerecognitionID, final Response.Listener<EzsigntemplatedocumentpagerecognitionGetObjectV2Response> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'pkiEzsigntemplatedocumentpagerecognitionID' is set
    if (pkiEzsigntemplatedocumentpagerecognitionID == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'pkiEzsigntemplatedocumentpagerecognitionID' when calling ezsigntemplatedocumentpagerecognitionGetObjectV2",
        new ApiException(400, "Missing the required parameter 'pkiEzsigntemplatedocumentpagerecognitionID' when calling ezsigntemplatedocumentpagerecognitionGetObjectV2"));
    }

    // create path and map variables
    String path = "/2/object/ezsigntemplatedocumentpagerecognition/{pkiEzsigntemplatedocumentpagerecognitionID}".replaceAll("\\{format\\}","json").replaceAll("\\{" + "pkiEzsigntemplatedocumentpagerecognitionID" + "\\}", apiInvoker.escapeString(pkiEzsigntemplatedocumentpagerecognitionID.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "Authorization" };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((EzsigntemplatedocumentpagerecognitionGetObjectV2Response) ApiInvoker.deserialize(localVarResponse,  "", EzsigntemplatedocumentpagerecognitionGetObjectV2Response.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
}
