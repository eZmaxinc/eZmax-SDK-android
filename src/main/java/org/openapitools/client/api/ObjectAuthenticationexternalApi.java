/**
 * eZmax API Definition (Full)
 * This API expose all the functionnalities for the eZmax and eZsign applications.
 *
 * The version of the OpenAPI document: 1.2.2
 * Contact: support-api@ezmax.ca
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package org.openapitools.client.api;

import eZmaxAPI.ApiInvoker;
import eZmaxAPI.ApiException;
import eZmaxAPI.Pair;

import org.openapitools.client.model.*;

import java.util.*;

import com.android.volley.Response;
import com.android.volley.VolleyError;

import org.openapitools.client.model.AuthenticationexternalCreateObjectV1Request;
import org.openapitools.client.model.AuthenticationexternalCreateObjectV1Response;
import org.openapitools.client.model.AuthenticationexternalDeleteObjectV1Response;
import org.openapitools.client.model.AuthenticationexternalEditObjectV1Request;
import org.openapitools.client.model.AuthenticationexternalEditObjectV1Response;
import org.openapitools.client.model.AuthenticationexternalGetAutocompleteV2Response;
import org.openapitools.client.model.AuthenticationexternalGetListV1Response;
import org.openapitools.client.model.AuthenticationexternalGetObjectV2Response;
import org.openapitools.client.model.AuthenticationexternalResetAuthorizationV1Response;
import org.openapitools.client.model.CommonResponseError;
import java.io.File;
import org.openapitools.client.model.HeaderAcceptLanguage;

import org.apache.http.HttpEntity;
import org.apache.http.entity.mime.MultipartEntityBuilder;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.concurrent.ExecutionException;
import java.util.concurrent.TimeoutException;

public class ObjectAuthenticationexternalApi {
  String basePath = "https://prod.api.appcluster01.ca-central-1.ezmax.com/rest";
  ApiInvoker apiInvoker = ApiInvoker.getInstance();

  public void addHeader(String key, String value) {
    getInvoker().addDefaultHeader(key, value);
  }

  public ApiInvoker getInvoker() {
    return apiInvoker;
  }

  public void setBasePath(String basePath) {
    this.basePath = basePath;
  }

  public String getBasePath() {
    return basePath;
  }

  /**
  * Create a new Authenticationexternal
  * The endpoint allows to create one or many elements at once.
   * @param authenticationexternalCreateObjectV1Request 
   * @return AuthenticationexternalCreateObjectV1Response
  */
  public AuthenticationexternalCreateObjectV1Response authenticationexternalCreateObjectV1 (AuthenticationexternalCreateObjectV1Request authenticationexternalCreateObjectV1Request) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = authenticationexternalCreateObjectV1Request;
    // verify the required parameter 'authenticationexternalCreateObjectV1Request' is set
    if (authenticationexternalCreateObjectV1Request == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'authenticationexternalCreateObjectV1Request' when calling authenticationexternalCreateObjectV1",
        new ApiException(400, "Missing the required parameter 'authenticationexternalCreateObjectV1Request' when calling authenticationexternalCreateObjectV1"));
    }

    // create path and map variables
    String path = "/1/object/authenticationexternal";

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "Authorization" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (AuthenticationexternalCreateObjectV1Response) ApiInvoker.deserialize(localVarResponse, "", AuthenticationexternalCreateObjectV1Response.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Create a new Authenticationexternal
   * The endpoint allows to create one or many elements at once.
   * @param authenticationexternalCreateObjectV1Request 
  */
  public void authenticationexternalCreateObjectV1 (AuthenticationexternalCreateObjectV1Request authenticationexternalCreateObjectV1Request, final Response.Listener<AuthenticationexternalCreateObjectV1Response> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = authenticationexternalCreateObjectV1Request;

    // verify the required parameter 'authenticationexternalCreateObjectV1Request' is set
    if (authenticationexternalCreateObjectV1Request == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'authenticationexternalCreateObjectV1Request' when calling authenticationexternalCreateObjectV1",
        new ApiException(400, "Missing the required parameter 'authenticationexternalCreateObjectV1Request' when calling authenticationexternalCreateObjectV1"));
    }

    // create path and map variables
    String path = "/1/object/authenticationexternal".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "Authorization" };

    try {
      apiInvoker.invokeAPI(basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((AuthenticationexternalCreateObjectV1Response) ApiInvoker.deserialize(localVarResponse,  "", AuthenticationexternalCreateObjectV1Response.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Delete an existing Authenticationexternal
  * 
   * @param pkiAuthenticationexternalID The unique ID of the Authenticationexternal
   * @return AuthenticationexternalDeleteObjectV1Response
  */
  public AuthenticationexternalDeleteObjectV1Response authenticationexternalDeleteObjectV1 (Integer pkiAuthenticationexternalID) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'pkiAuthenticationexternalID' is set
    if (pkiAuthenticationexternalID == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'pkiAuthenticationexternalID' when calling authenticationexternalDeleteObjectV1",
        new ApiException(400, "Missing the required parameter 'pkiAuthenticationexternalID' when calling authenticationexternalDeleteObjectV1"));
    }

    // create path and map variables
    String path = "/1/object/authenticationexternal/{pkiAuthenticationexternalID}".replaceAll("\\{" + "pkiAuthenticationexternalID" + "\\}", apiInvoker.escapeString(pkiAuthenticationexternalID.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "Authorization" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "DELETE", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (AuthenticationexternalDeleteObjectV1Response) ApiInvoker.deserialize(localVarResponse, "", AuthenticationexternalDeleteObjectV1Response.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Delete an existing Authenticationexternal
   * 
   * @param pkiAuthenticationexternalID The unique ID of the Authenticationexternal
  */
  public void authenticationexternalDeleteObjectV1 (Integer pkiAuthenticationexternalID, final Response.Listener<AuthenticationexternalDeleteObjectV1Response> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'pkiAuthenticationexternalID' is set
    if (pkiAuthenticationexternalID == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'pkiAuthenticationexternalID' when calling authenticationexternalDeleteObjectV1",
        new ApiException(400, "Missing the required parameter 'pkiAuthenticationexternalID' when calling authenticationexternalDeleteObjectV1"));
    }

    // create path and map variables
    String path = "/1/object/authenticationexternal/{pkiAuthenticationexternalID}".replaceAll("\\{format\\}","json").replaceAll("\\{" + "pkiAuthenticationexternalID" + "\\}", apiInvoker.escapeString(pkiAuthenticationexternalID.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "Authorization" };

    try {
      apiInvoker.invokeAPI(basePath, path, "DELETE", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((AuthenticationexternalDeleteObjectV1Response) ApiInvoker.deserialize(localVarResponse,  "", AuthenticationexternalDeleteObjectV1Response.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Edit an existing Authenticationexternal
  * 
   * @param pkiAuthenticationexternalID The unique ID of the Authenticationexternal
   * @param authenticationexternalEditObjectV1Request 
   * @return AuthenticationexternalEditObjectV1Response
  */
  public AuthenticationexternalEditObjectV1Response authenticationexternalEditObjectV1 (Integer pkiAuthenticationexternalID, AuthenticationexternalEditObjectV1Request authenticationexternalEditObjectV1Request) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = authenticationexternalEditObjectV1Request;
    // verify the required parameter 'pkiAuthenticationexternalID' is set
    if (pkiAuthenticationexternalID == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'pkiAuthenticationexternalID' when calling authenticationexternalEditObjectV1",
        new ApiException(400, "Missing the required parameter 'pkiAuthenticationexternalID' when calling authenticationexternalEditObjectV1"));
    }
    // verify the required parameter 'authenticationexternalEditObjectV1Request' is set
    if (authenticationexternalEditObjectV1Request == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'authenticationexternalEditObjectV1Request' when calling authenticationexternalEditObjectV1",
        new ApiException(400, "Missing the required parameter 'authenticationexternalEditObjectV1Request' when calling authenticationexternalEditObjectV1"));
    }

    // create path and map variables
    String path = "/1/object/authenticationexternal/{pkiAuthenticationexternalID}".replaceAll("\\{" + "pkiAuthenticationexternalID" + "\\}", apiInvoker.escapeString(pkiAuthenticationexternalID.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "Authorization" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "PUT", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (AuthenticationexternalEditObjectV1Response) ApiInvoker.deserialize(localVarResponse, "", AuthenticationexternalEditObjectV1Response.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Edit an existing Authenticationexternal
   * 
   * @param pkiAuthenticationexternalID The unique ID of the Authenticationexternal   * @param authenticationexternalEditObjectV1Request 
  */
  public void authenticationexternalEditObjectV1 (Integer pkiAuthenticationexternalID, AuthenticationexternalEditObjectV1Request authenticationexternalEditObjectV1Request, final Response.Listener<AuthenticationexternalEditObjectV1Response> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = authenticationexternalEditObjectV1Request;

    // verify the required parameter 'pkiAuthenticationexternalID' is set
    if (pkiAuthenticationexternalID == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'pkiAuthenticationexternalID' when calling authenticationexternalEditObjectV1",
        new ApiException(400, "Missing the required parameter 'pkiAuthenticationexternalID' when calling authenticationexternalEditObjectV1"));
    }
    // verify the required parameter 'authenticationexternalEditObjectV1Request' is set
    if (authenticationexternalEditObjectV1Request == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'authenticationexternalEditObjectV1Request' when calling authenticationexternalEditObjectV1",
        new ApiException(400, "Missing the required parameter 'authenticationexternalEditObjectV1Request' when calling authenticationexternalEditObjectV1"));
    }

    // create path and map variables
    String path = "/1/object/authenticationexternal/{pkiAuthenticationexternalID}".replaceAll("\\{format\\}","json").replaceAll("\\{" + "pkiAuthenticationexternalID" + "\\}", apiInvoker.escapeString(pkiAuthenticationexternalID.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "Authorization" };

    try {
      apiInvoker.invokeAPI(basePath, path, "PUT", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((AuthenticationexternalEditObjectV1Response) ApiInvoker.deserialize(localVarResponse,  "", AuthenticationexternalEditObjectV1Response.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Retrieve Authenticationexternals and IDs
  * Get the list of Authenticationexternal to be used in a dropdown or autocomplete control.
   * @param sSelector The type of Authenticationexternals to return
   * @param eFilterActive Specify which results we want to display.
   * @param sQuery Allow to filter the returned results
   * @param acceptLanguage 
   * @return AuthenticationexternalGetAutocompleteV2Response
  */
  public AuthenticationexternalGetAutocompleteV2Response authenticationexternalGetAutocompleteV2 (String sSelector, String eFilterActive, String sQuery, HeaderAcceptLanguage acceptLanguage) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'sSelector' is set
    if (sSelector == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'sSelector' when calling authenticationexternalGetAutocompleteV2",
        new ApiException(400, "Missing the required parameter 'sSelector' when calling authenticationexternalGetAutocompleteV2"));
    }

    // create path and map variables
    String path = "/2/object/authenticationexternal/getAutocomplete/{sSelector}".replaceAll("\\{" + "sSelector" + "\\}", apiInvoker.escapeString(sSelector.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    queryParams.addAll(ApiInvoker.parameterToPairs("", "eFilterActive", eFilterActive));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "sQuery", sQuery));
    headerParams.put("Accept-Language", ApiInvoker.parameterToString(acceptLanguage));
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "Authorization" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (AuthenticationexternalGetAutocompleteV2Response) ApiInvoker.deserialize(localVarResponse, "", AuthenticationexternalGetAutocompleteV2Response.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Retrieve Authenticationexternals and IDs
   * Get the list of Authenticationexternal to be used in a dropdown or autocomplete control.
   * @param sSelector The type of Authenticationexternals to return   * @param eFilterActive Specify which results we want to display.   * @param sQuery Allow to filter the returned results   * @param acceptLanguage 
  */
  public void authenticationexternalGetAutocompleteV2 (String sSelector, String eFilterActive, String sQuery, HeaderAcceptLanguage acceptLanguage, final Response.Listener<AuthenticationexternalGetAutocompleteV2Response> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'sSelector' is set
    if (sSelector == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'sSelector' when calling authenticationexternalGetAutocompleteV2",
        new ApiException(400, "Missing the required parameter 'sSelector' when calling authenticationexternalGetAutocompleteV2"));
    }

    // create path and map variables
    String path = "/2/object/authenticationexternal/getAutocomplete/{sSelector}".replaceAll("\\{format\\}","json").replaceAll("\\{" + "sSelector" + "\\}", apiInvoker.escapeString(sSelector.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();

    queryParams.addAll(ApiInvoker.parameterToPairs("", "eFilterActive", eFilterActive));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "sQuery", sQuery));

    headerParams.put("Accept-Language", ApiInvoker.parameterToString(acceptLanguage));

    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "Authorization" };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((AuthenticationexternalGetAutocompleteV2Response) ApiInvoker.deserialize(localVarResponse,  "", AuthenticationexternalGetAutocompleteV2Response.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Retrieve Authenticationexternal list
  * Enum values that can be filtered in query parameter *sFilter*:  | Variable | Valid values | |---|---| | eAuthenticationexternalType | Salesforce&lt;br&gt;SalesforceSandbox |
   * @param eOrderBy Specify how you want the results to be sorted
   * @param iRowMax 
   * @param iRowOffset 
   * @param acceptLanguage 
   * @param sFilter 
   * @return AuthenticationexternalGetListV1Response
  */
  public AuthenticationexternalGetListV1Response authenticationexternalGetListV1 (String eOrderBy, Integer iRowMax, Integer iRowOffset, HeaderAcceptLanguage acceptLanguage, String sFilter) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;

    // create path and map variables
    String path = "/1/object/authenticationexternal/getList";

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    queryParams.addAll(ApiInvoker.parameterToPairs("", "eOrderBy", eOrderBy));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "iRowMax", iRowMax));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "iRowOffset", iRowOffset));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "sFilter", sFilter));
    headerParams.put("Accept-Language", ApiInvoker.parameterToString(acceptLanguage));
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "Authorization" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (AuthenticationexternalGetListV1Response) ApiInvoker.deserialize(localVarResponse, "", AuthenticationexternalGetListV1Response.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Retrieve Authenticationexternal list
   * Enum values that can be filtered in query parameter *sFilter*:  | Variable | Valid values | |---|---| | eAuthenticationexternalType | Salesforce&lt;br&gt;SalesforceSandbox |
   * @param eOrderBy Specify how you want the results to be sorted   * @param iRowMax    * @param iRowOffset    * @param acceptLanguage    * @param sFilter 
  */
  public void authenticationexternalGetListV1 (String eOrderBy, Integer iRowMax, Integer iRowOffset, HeaderAcceptLanguage acceptLanguage, String sFilter, final Response.Listener<AuthenticationexternalGetListV1Response> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;


    // create path and map variables
    String path = "/1/object/authenticationexternal/getList".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();

    queryParams.addAll(ApiInvoker.parameterToPairs("", "eOrderBy", eOrderBy));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "iRowMax", iRowMax));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "iRowOffset", iRowOffset));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "sFilter", sFilter));

    headerParams.put("Accept-Language", ApiInvoker.parameterToString(acceptLanguage));

    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "Authorization" };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((AuthenticationexternalGetListV1Response) ApiInvoker.deserialize(localVarResponse,  "", AuthenticationexternalGetListV1Response.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Retrieve an existing Authenticationexternal
  * 
   * @param pkiAuthenticationexternalID The unique ID of the Authenticationexternal
   * @return AuthenticationexternalGetObjectV2Response
  */
  public AuthenticationexternalGetObjectV2Response authenticationexternalGetObjectV2 (Integer pkiAuthenticationexternalID) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'pkiAuthenticationexternalID' is set
    if (pkiAuthenticationexternalID == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'pkiAuthenticationexternalID' when calling authenticationexternalGetObjectV2",
        new ApiException(400, "Missing the required parameter 'pkiAuthenticationexternalID' when calling authenticationexternalGetObjectV2"));
    }

    // create path and map variables
    String path = "/2/object/authenticationexternal/{pkiAuthenticationexternalID}".replaceAll("\\{" + "pkiAuthenticationexternalID" + "\\}", apiInvoker.escapeString(pkiAuthenticationexternalID.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "Authorization" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (AuthenticationexternalGetObjectV2Response) ApiInvoker.deserialize(localVarResponse, "", AuthenticationexternalGetObjectV2Response.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Retrieve an existing Authenticationexternal
   * 
   * @param pkiAuthenticationexternalID The unique ID of the Authenticationexternal
  */
  public void authenticationexternalGetObjectV2 (Integer pkiAuthenticationexternalID, final Response.Listener<AuthenticationexternalGetObjectV2Response> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'pkiAuthenticationexternalID' is set
    if (pkiAuthenticationexternalID == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'pkiAuthenticationexternalID' when calling authenticationexternalGetObjectV2",
        new ApiException(400, "Missing the required parameter 'pkiAuthenticationexternalID' when calling authenticationexternalGetObjectV2"));
    }

    // create path and map variables
    String path = "/2/object/authenticationexternal/{pkiAuthenticationexternalID}".replaceAll("\\{format\\}","json").replaceAll("\\{" + "pkiAuthenticationexternalID" + "\\}", apiInvoker.escapeString(pkiAuthenticationexternalID.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "Authorization" };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((AuthenticationexternalGetObjectV2Response) ApiInvoker.deserialize(localVarResponse,  "", AuthenticationexternalGetObjectV2Response.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Reset the Authenticationexternal authorization
  * 
   * @param pkiAuthenticationexternalID 
   * @param body 
   * @return AuthenticationexternalResetAuthorizationV1Response
  */
  public AuthenticationexternalResetAuthorizationV1Response authenticationexternalResetAuthorizationV1 (Integer pkiAuthenticationexternalID, Object body) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = body;
    // verify the required parameter 'pkiAuthenticationexternalID' is set
    if (pkiAuthenticationexternalID == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'pkiAuthenticationexternalID' when calling authenticationexternalResetAuthorizationV1",
        new ApiException(400, "Missing the required parameter 'pkiAuthenticationexternalID' when calling authenticationexternalResetAuthorizationV1"));
    }
    // verify the required parameter 'body' is set
    if (body == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'body' when calling authenticationexternalResetAuthorizationV1",
        new ApiException(400, "Missing the required parameter 'body' when calling authenticationexternalResetAuthorizationV1"));
    }

    // create path and map variables
    String path = "/1/object/authenticationexternal/{pkiAuthenticationexternalID}/resetAuthorization".replaceAll("\\{" + "pkiAuthenticationexternalID" + "\\}", apiInvoker.escapeString(pkiAuthenticationexternalID.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "Authorization" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (AuthenticationexternalResetAuthorizationV1Response) ApiInvoker.deserialize(localVarResponse, "", AuthenticationexternalResetAuthorizationV1Response.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Reset the Authenticationexternal authorization
   * 
   * @param pkiAuthenticationexternalID    * @param body 
  */
  public void authenticationexternalResetAuthorizationV1 (Integer pkiAuthenticationexternalID, Object body, final Response.Listener<AuthenticationexternalResetAuthorizationV1Response> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = body;

    // verify the required parameter 'pkiAuthenticationexternalID' is set
    if (pkiAuthenticationexternalID == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'pkiAuthenticationexternalID' when calling authenticationexternalResetAuthorizationV1",
        new ApiException(400, "Missing the required parameter 'pkiAuthenticationexternalID' when calling authenticationexternalResetAuthorizationV1"));
    }
    // verify the required parameter 'body' is set
    if (body == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'body' when calling authenticationexternalResetAuthorizationV1",
        new ApiException(400, "Missing the required parameter 'body' when calling authenticationexternalResetAuthorizationV1"));
    }

    // create path and map variables
    String path = "/1/object/authenticationexternal/{pkiAuthenticationexternalID}/resetAuthorization".replaceAll("\\{format\\}","json").replaceAll("\\{" + "pkiAuthenticationexternalID" + "\\}", apiInvoker.escapeString(pkiAuthenticationexternalID.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "Authorization" };

    try {
      apiInvoker.invokeAPI(basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((AuthenticationexternalResetAuthorizationV1Response) ApiInvoker.deserialize(localVarResponse,  "", AuthenticationexternalResetAuthorizationV1Response.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
}
