/**
 * eZmax API Definition (Full)
 * This API expose all the functionnalities for the eZmax and eZsign applications.
 *
 * The version of the OpenAPI document: 1.2.2
 * Contact: support-api@ezmax.ca
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package org.openapitools.client.api;

import eZmaxAPI.ApiInvoker;
import eZmaxAPI.ApiException;
import eZmaxAPI.Pair;

import org.openapitools.client.model.*;

import java.util.*;

import com.android.volley.Response;
import com.android.volley.VolleyError;

import org.openapitools.client.model.CommonResponseError;
import org.openapitools.client.model.CommonResponseErrorSTemporaryFileUrl;
import org.openapitools.client.model.EzsigntemplatedocumentCreateObjectV1Request;
import org.openapitools.client.model.EzsigntemplatedocumentCreateObjectV1Response;
import org.openapitools.client.model.EzsigntemplatedocumentEditEzsigntemplatedocumentpagerecognitionsV1Request;
import org.openapitools.client.model.EzsigntemplatedocumentEditEzsigntemplatedocumentpagerecognitionsV1Response;
import org.openapitools.client.model.EzsigntemplatedocumentEditEzsigntemplateformfieldgroupsV1Request;
import org.openapitools.client.model.EzsigntemplatedocumentEditEzsigntemplateformfieldgroupsV1Response;
import org.openapitools.client.model.EzsigntemplatedocumentEditEzsigntemplatesignaturesV1Request;
import org.openapitools.client.model.EzsigntemplatedocumentEditEzsigntemplatesignaturesV1Response;
import org.openapitools.client.model.EzsigntemplatedocumentEditObjectV1Request;
import org.openapitools.client.model.EzsigntemplatedocumentEditObjectV1Response;
import org.openapitools.client.model.EzsigntemplatedocumentExtractTextV1Request;
import org.openapitools.client.model.EzsigntemplatedocumentExtractTextV1Response;
import org.openapitools.client.model.EzsigntemplatedocumentFlattenV1Response;
import org.openapitools.client.model.EzsigntemplatedocumentGetEzsigntemplatedocumentpagerecognitionsV1Response;
import org.openapitools.client.model.EzsigntemplatedocumentGetEzsigntemplatedocumentpagesV1Response;
import org.openapitools.client.model.EzsigntemplatedocumentGetEzsigntemplateformfieldgroupsV1Response;
import org.openapitools.client.model.EzsigntemplatedocumentGetEzsigntemplatesignaturesV1Response;
import org.openapitools.client.model.EzsigntemplatedocumentGetObjectV2Response;
import org.openapitools.client.model.EzsigntemplatedocumentGetWordsPositionsV1Request;
import org.openapitools.client.model.EzsigntemplatedocumentGetWordsPositionsV1Response;
import org.openapitools.client.model.EzsigntemplatedocumentPatchObjectV1Request;
import org.openapitools.client.model.EzsigntemplatedocumentPatchObjectV1Response;

import org.apache.http.HttpEntity;
import org.apache.http.entity.mime.MultipartEntityBuilder;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.concurrent.ExecutionException;
import java.util.concurrent.TimeoutException;

public class ObjectEzsigntemplatedocumentApi {
  String basePath = "https://prod.api.appcluster01.ca-central-1.ezmax.com/rest";
  ApiInvoker apiInvoker = ApiInvoker.getInstance();

  public void addHeader(String key, String value) {
    getInvoker().addDefaultHeader(key, value);
  }

  public ApiInvoker getInvoker() {
    return apiInvoker;
  }

  public void setBasePath(String basePath) {
    this.basePath = basePath;
  }

  public String getBasePath() {
    return basePath;
  }

  /**
  * Create a new Ezsigntemplatedocument
  * The endpoint allows to create one or many elements at once.
   * @param ezsigntemplatedocumentCreateObjectV1Request 
   * @return EzsigntemplatedocumentCreateObjectV1Response
  */
  public EzsigntemplatedocumentCreateObjectV1Response ezsigntemplatedocumentCreateObjectV1 (EzsigntemplatedocumentCreateObjectV1Request ezsigntemplatedocumentCreateObjectV1Request) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = ezsigntemplatedocumentCreateObjectV1Request;
    // verify the required parameter 'ezsigntemplatedocumentCreateObjectV1Request' is set
    if (ezsigntemplatedocumentCreateObjectV1Request == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'ezsigntemplatedocumentCreateObjectV1Request' when calling ezsigntemplatedocumentCreateObjectV1",
        new ApiException(400, "Missing the required parameter 'ezsigntemplatedocumentCreateObjectV1Request' when calling ezsigntemplatedocumentCreateObjectV1"));
    }

    // create path and map variables
    String path = "/1/object/ezsigntemplatedocument";

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "Authorization" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (EzsigntemplatedocumentCreateObjectV1Response) ApiInvoker.deserialize(localVarResponse, "", EzsigntemplatedocumentCreateObjectV1Response.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Create a new Ezsigntemplatedocument
   * The endpoint allows to create one or many elements at once.
   * @param ezsigntemplatedocumentCreateObjectV1Request 
  */
  public void ezsigntemplatedocumentCreateObjectV1 (EzsigntemplatedocumentCreateObjectV1Request ezsigntemplatedocumentCreateObjectV1Request, final Response.Listener<EzsigntemplatedocumentCreateObjectV1Response> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = ezsigntemplatedocumentCreateObjectV1Request;

    // verify the required parameter 'ezsigntemplatedocumentCreateObjectV1Request' is set
    if (ezsigntemplatedocumentCreateObjectV1Request == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'ezsigntemplatedocumentCreateObjectV1Request' when calling ezsigntemplatedocumentCreateObjectV1",
        new ApiException(400, "Missing the required parameter 'ezsigntemplatedocumentCreateObjectV1Request' when calling ezsigntemplatedocumentCreateObjectV1"));
    }

    // create path and map variables
    String path = "/1/object/ezsigntemplatedocument".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "Authorization" };

    try {
      apiInvoker.invokeAPI(basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((EzsigntemplatedocumentCreateObjectV1Response) ApiInvoker.deserialize(localVarResponse,  "", EzsigntemplatedocumentCreateObjectV1Response.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Edit multiple Ezsigntemplatedocumentpagerecognitions
  * Edit multiple Ezsigntemplatedocumentpagerecognitions
   * @param pkiEzsigntemplatedocumentID 
   * @param ezsigntemplatedocumentEditEzsigntemplatedocumentpagerecognitionsV1Request 
   * @return EzsigntemplatedocumentEditEzsigntemplatedocumentpagerecognitionsV1Response
  */
  public EzsigntemplatedocumentEditEzsigntemplatedocumentpagerecognitionsV1Response ezsigntemplatedocumentEditEzsigntemplatedocumentpagerecognitionsV1 (Integer pkiEzsigntemplatedocumentID, EzsigntemplatedocumentEditEzsigntemplatedocumentpagerecognitionsV1Request ezsigntemplatedocumentEditEzsigntemplatedocumentpagerecognitionsV1Request) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = ezsigntemplatedocumentEditEzsigntemplatedocumentpagerecognitionsV1Request;
    // verify the required parameter 'pkiEzsigntemplatedocumentID' is set
    if (pkiEzsigntemplatedocumentID == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'pkiEzsigntemplatedocumentID' when calling ezsigntemplatedocumentEditEzsigntemplatedocumentpagerecognitionsV1",
        new ApiException(400, "Missing the required parameter 'pkiEzsigntemplatedocumentID' when calling ezsigntemplatedocumentEditEzsigntemplatedocumentpagerecognitionsV1"));
    }
    // verify the required parameter 'ezsigntemplatedocumentEditEzsigntemplatedocumentpagerecognitionsV1Request' is set
    if (ezsigntemplatedocumentEditEzsigntemplatedocumentpagerecognitionsV1Request == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'ezsigntemplatedocumentEditEzsigntemplatedocumentpagerecognitionsV1Request' when calling ezsigntemplatedocumentEditEzsigntemplatedocumentpagerecognitionsV1",
        new ApiException(400, "Missing the required parameter 'ezsigntemplatedocumentEditEzsigntemplatedocumentpagerecognitionsV1Request' when calling ezsigntemplatedocumentEditEzsigntemplatedocumentpagerecognitionsV1"));
    }

    // create path and map variables
    String path = "/1/object/ezsigntemplatedocument/{pkiEzsigntemplatedocumentID}/editEzsigntemplatedocumentpagerecognitions".replaceAll("\\{" + "pkiEzsigntemplatedocumentID" + "\\}", apiInvoker.escapeString(pkiEzsigntemplatedocumentID.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "Authorization" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "PUT", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (EzsigntemplatedocumentEditEzsigntemplatedocumentpagerecognitionsV1Response) ApiInvoker.deserialize(localVarResponse, "", EzsigntemplatedocumentEditEzsigntemplatedocumentpagerecognitionsV1Response.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Edit multiple Ezsigntemplatedocumentpagerecognitions
   * Edit multiple Ezsigntemplatedocumentpagerecognitions
   * @param pkiEzsigntemplatedocumentID    * @param ezsigntemplatedocumentEditEzsigntemplatedocumentpagerecognitionsV1Request 
  */
  public void ezsigntemplatedocumentEditEzsigntemplatedocumentpagerecognitionsV1 (Integer pkiEzsigntemplatedocumentID, EzsigntemplatedocumentEditEzsigntemplatedocumentpagerecognitionsV1Request ezsigntemplatedocumentEditEzsigntemplatedocumentpagerecognitionsV1Request, final Response.Listener<EzsigntemplatedocumentEditEzsigntemplatedocumentpagerecognitionsV1Response> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = ezsigntemplatedocumentEditEzsigntemplatedocumentpagerecognitionsV1Request;

    // verify the required parameter 'pkiEzsigntemplatedocumentID' is set
    if (pkiEzsigntemplatedocumentID == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'pkiEzsigntemplatedocumentID' when calling ezsigntemplatedocumentEditEzsigntemplatedocumentpagerecognitionsV1",
        new ApiException(400, "Missing the required parameter 'pkiEzsigntemplatedocumentID' when calling ezsigntemplatedocumentEditEzsigntemplatedocumentpagerecognitionsV1"));
    }
    // verify the required parameter 'ezsigntemplatedocumentEditEzsigntemplatedocumentpagerecognitionsV1Request' is set
    if (ezsigntemplatedocumentEditEzsigntemplatedocumentpagerecognitionsV1Request == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'ezsigntemplatedocumentEditEzsigntemplatedocumentpagerecognitionsV1Request' when calling ezsigntemplatedocumentEditEzsigntemplatedocumentpagerecognitionsV1",
        new ApiException(400, "Missing the required parameter 'ezsigntemplatedocumentEditEzsigntemplatedocumentpagerecognitionsV1Request' when calling ezsigntemplatedocumentEditEzsigntemplatedocumentpagerecognitionsV1"));
    }

    // create path and map variables
    String path = "/1/object/ezsigntemplatedocument/{pkiEzsigntemplatedocumentID}/editEzsigntemplatedocumentpagerecognitions".replaceAll("\\{format\\}","json").replaceAll("\\{" + "pkiEzsigntemplatedocumentID" + "\\}", apiInvoker.escapeString(pkiEzsigntemplatedocumentID.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "Authorization" };

    try {
      apiInvoker.invokeAPI(basePath, path, "PUT", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((EzsigntemplatedocumentEditEzsigntemplatedocumentpagerecognitionsV1Response) ApiInvoker.deserialize(localVarResponse,  "", EzsigntemplatedocumentEditEzsigntemplatedocumentpagerecognitionsV1Response.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Edit multiple Ezsigntemplateformfieldgroups
  * Using this endpoint, you can edit multiple Ezsigntemplateformfieldgroups at the same time.
   * @param pkiEzsigntemplatedocumentID 
   * @param ezsigntemplatedocumentEditEzsigntemplateformfieldgroupsV1Request 
   * @return EzsigntemplatedocumentEditEzsigntemplateformfieldgroupsV1Response
  */
  public EzsigntemplatedocumentEditEzsigntemplateformfieldgroupsV1Response ezsigntemplatedocumentEditEzsigntemplateformfieldgroupsV1 (Integer pkiEzsigntemplatedocumentID, EzsigntemplatedocumentEditEzsigntemplateformfieldgroupsV1Request ezsigntemplatedocumentEditEzsigntemplateformfieldgroupsV1Request) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = ezsigntemplatedocumentEditEzsigntemplateformfieldgroupsV1Request;
    // verify the required parameter 'pkiEzsigntemplatedocumentID' is set
    if (pkiEzsigntemplatedocumentID == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'pkiEzsigntemplatedocumentID' when calling ezsigntemplatedocumentEditEzsigntemplateformfieldgroupsV1",
        new ApiException(400, "Missing the required parameter 'pkiEzsigntemplatedocumentID' when calling ezsigntemplatedocumentEditEzsigntemplateformfieldgroupsV1"));
    }
    // verify the required parameter 'ezsigntemplatedocumentEditEzsigntemplateformfieldgroupsV1Request' is set
    if (ezsigntemplatedocumentEditEzsigntemplateformfieldgroupsV1Request == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'ezsigntemplatedocumentEditEzsigntemplateformfieldgroupsV1Request' when calling ezsigntemplatedocumentEditEzsigntemplateformfieldgroupsV1",
        new ApiException(400, "Missing the required parameter 'ezsigntemplatedocumentEditEzsigntemplateformfieldgroupsV1Request' when calling ezsigntemplatedocumentEditEzsigntemplateformfieldgroupsV1"));
    }

    // create path and map variables
    String path = "/1/object/ezsigntemplatedocument/{pkiEzsigntemplatedocumentID}/editEzsigntemplateformfieldgroups".replaceAll("\\{" + "pkiEzsigntemplatedocumentID" + "\\}", apiInvoker.escapeString(pkiEzsigntemplatedocumentID.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "Authorization" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "PUT", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (EzsigntemplatedocumentEditEzsigntemplateformfieldgroupsV1Response) ApiInvoker.deserialize(localVarResponse, "", EzsigntemplatedocumentEditEzsigntemplateformfieldgroupsV1Response.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Edit multiple Ezsigntemplateformfieldgroups
   * Using this endpoint, you can edit multiple Ezsigntemplateformfieldgroups at the same time.
   * @param pkiEzsigntemplatedocumentID    * @param ezsigntemplatedocumentEditEzsigntemplateformfieldgroupsV1Request 
  */
  public void ezsigntemplatedocumentEditEzsigntemplateformfieldgroupsV1 (Integer pkiEzsigntemplatedocumentID, EzsigntemplatedocumentEditEzsigntemplateformfieldgroupsV1Request ezsigntemplatedocumentEditEzsigntemplateformfieldgroupsV1Request, final Response.Listener<EzsigntemplatedocumentEditEzsigntemplateformfieldgroupsV1Response> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = ezsigntemplatedocumentEditEzsigntemplateformfieldgroupsV1Request;

    // verify the required parameter 'pkiEzsigntemplatedocumentID' is set
    if (pkiEzsigntemplatedocumentID == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'pkiEzsigntemplatedocumentID' when calling ezsigntemplatedocumentEditEzsigntemplateformfieldgroupsV1",
        new ApiException(400, "Missing the required parameter 'pkiEzsigntemplatedocumentID' when calling ezsigntemplatedocumentEditEzsigntemplateformfieldgroupsV1"));
    }
    // verify the required parameter 'ezsigntemplatedocumentEditEzsigntemplateformfieldgroupsV1Request' is set
    if (ezsigntemplatedocumentEditEzsigntemplateformfieldgroupsV1Request == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'ezsigntemplatedocumentEditEzsigntemplateformfieldgroupsV1Request' when calling ezsigntemplatedocumentEditEzsigntemplateformfieldgroupsV1",
        new ApiException(400, "Missing the required parameter 'ezsigntemplatedocumentEditEzsigntemplateformfieldgroupsV1Request' when calling ezsigntemplatedocumentEditEzsigntemplateformfieldgroupsV1"));
    }

    // create path and map variables
    String path = "/1/object/ezsigntemplatedocument/{pkiEzsigntemplatedocumentID}/editEzsigntemplateformfieldgroups".replaceAll("\\{format\\}","json").replaceAll("\\{" + "pkiEzsigntemplatedocumentID" + "\\}", apiInvoker.escapeString(pkiEzsigntemplatedocumentID.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "Authorization" };

    try {
      apiInvoker.invokeAPI(basePath, path, "PUT", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((EzsigntemplatedocumentEditEzsigntemplateformfieldgroupsV1Response) ApiInvoker.deserialize(localVarResponse,  "", EzsigntemplatedocumentEditEzsigntemplateformfieldgroupsV1Response.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Edit multiple Ezsigntemplatesignatures
  * Using this endpoint, you can edit multiple Ezsigntemplatesignatures at the same time.
   * @param pkiEzsigntemplatedocumentID 
   * @param ezsigntemplatedocumentEditEzsigntemplatesignaturesV1Request 
   * @return EzsigntemplatedocumentEditEzsigntemplatesignaturesV1Response
  */
  public EzsigntemplatedocumentEditEzsigntemplatesignaturesV1Response ezsigntemplatedocumentEditEzsigntemplatesignaturesV1 (Integer pkiEzsigntemplatedocumentID, EzsigntemplatedocumentEditEzsigntemplatesignaturesV1Request ezsigntemplatedocumentEditEzsigntemplatesignaturesV1Request) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = ezsigntemplatedocumentEditEzsigntemplatesignaturesV1Request;
    // verify the required parameter 'pkiEzsigntemplatedocumentID' is set
    if (pkiEzsigntemplatedocumentID == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'pkiEzsigntemplatedocumentID' when calling ezsigntemplatedocumentEditEzsigntemplatesignaturesV1",
        new ApiException(400, "Missing the required parameter 'pkiEzsigntemplatedocumentID' when calling ezsigntemplatedocumentEditEzsigntemplatesignaturesV1"));
    }
    // verify the required parameter 'ezsigntemplatedocumentEditEzsigntemplatesignaturesV1Request' is set
    if (ezsigntemplatedocumentEditEzsigntemplatesignaturesV1Request == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'ezsigntemplatedocumentEditEzsigntemplatesignaturesV1Request' when calling ezsigntemplatedocumentEditEzsigntemplatesignaturesV1",
        new ApiException(400, "Missing the required parameter 'ezsigntemplatedocumentEditEzsigntemplatesignaturesV1Request' when calling ezsigntemplatedocumentEditEzsigntemplatesignaturesV1"));
    }

    // create path and map variables
    String path = "/1/object/ezsigntemplatedocument/{pkiEzsigntemplatedocumentID}/editEzsigntemplatesignatures".replaceAll("\\{" + "pkiEzsigntemplatedocumentID" + "\\}", apiInvoker.escapeString(pkiEzsigntemplatedocumentID.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "Authorization" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "PUT", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (EzsigntemplatedocumentEditEzsigntemplatesignaturesV1Response) ApiInvoker.deserialize(localVarResponse, "", EzsigntemplatedocumentEditEzsigntemplatesignaturesV1Response.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Edit multiple Ezsigntemplatesignatures
   * Using this endpoint, you can edit multiple Ezsigntemplatesignatures at the same time.
   * @param pkiEzsigntemplatedocumentID    * @param ezsigntemplatedocumentEditEzsigntemplatesignaturesV1Request 
  */
  public void ezsigntemplatedocumentEditEzsigntemplatesignaturesV1 (Integer pkiEzsigntemplatedocumentID, EzsigntemplatedocumentEditEzsigntemplatesignaturesV1Request ezsigntemplatedocumentEditEzsigntemplatesignaturesV1Request, final Response.Listener<EzsigntemplatedocumentEditEzsigntemplatesignaturesV1Response> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = ezsigntemplatedocumentEditEzsigntemplatesignaturesV1Request;

    // verify the required parameter 'pkiEzsigntemplatedocumentID' is set
    if (pkiEzsigntemplatedocumentID == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'pkiEzsigntemplatedocumentID' when calling ezsigntemplatedocumentEditEzsigntemplatesignaturesV1",
        new ApiException(400, "Missing the required parameter 'pkiEzsigntemplatedocumentID' when calling ezsigntemplatedocumentEditEzsigntemplatesignaturesV1"));
    }
    // verify the required parameter 'ezsigntemplatedocumentEditEzsigntemplatesignaturesV1Request' is set
    if (ezsigntemplatedocumentEditEzsigntemplatesignaturesV1Request == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'ezsigntemplatedocumentEditEzsigntemplatesignaturesV1Request' when calling ezsigntemplatedocumentEditEzsigntemplatesignaturesV1",
        new ApiException(400, "Missing the required parameter 'ezsigntemplatedocumentEditEzsigntemplatesignaturesV1Request' when calling ezsigntemplatedocumentEditEzsigntemplatesignaturesV1"));
    }

    // create path and map variables
    String path = "/1/object/ezsigntemplatedocument/{pkiEzsigntemplatedocumentID}/editEzsigntemplatesignatures".replaceAll("\\{format\\}","json").replaceAll("\\{" + "pkiEzsigntemplatedocumentID" + "\\}", apiInvoker.escapeString(pkiEzsigntemplatedocumentID.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "Authorization" };

    try {
      apiInvoker.invokeAPI(basePath, path, "PUT", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((EzsigntemplatedocumentEditEzsigntemplatesignaturesV1Response) ApiInvoker.deserialize(localVarResponse,  "", EzsigntemplatedocumentEditEzsigntemplatesignaturesV1Response.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Edit an existing Ezsigntemplatedocument
  * 
   * @param pkiEzsigntemplatedocumentID 
   * @param ezsigntemplatedocumentEditObjectV1Request 
   * @return EzsigntemplatedocumentEditObjectV1Response
  */
  public EzsigntemplatedocumentEditObjectV1Response ezsigntemplatedocumentEditObjectV1 (Integer pkiEzsigntemplatedocumentID, EzsigntemplatedocumentEditObjectV1Request ezsigntemplatedocumentEditObjectV1Request) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = ezsigntemplatedocumentEditObjectV1Request;
    // verify the required parameter 'pkiEzsigntemplatedocumentID' is set
    if (pkiEzsigntemplatedocumentID == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'pkiEzsigntemplatedocumentID' when calling ezsigntemplatedocumentEditObjectV1",
        new ApiException(400, "Missing the required parameter 'pkiEzsigntemplatedocumentID' when calling ezsigntemplatedocumentEditObjectV1"));
    }
    // verify the required parameter 'ezsigntemplatedocumentEditObjectV1Request' is set
    if (ezsigntemplatedocumentEditObjectV1Request == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'ezsigntemplatedocumentEditObjectV1Request' when calling ezsigntemplatedocumentEditObjectV1",
        new ApiException(400, "Missing the required parameter 'ezsigntemplatedocumentEditObjectV1Request' when calling ezsigntemplatedocumentEditObjectV1"));
    }

    // create path and map variables
    String path = "/1/object/ezsigntemplatedocument/{pkiEzsigntemplatedocumentID}".replaceAll("\\{" + "pkiEzsigntemplatedocumentID" + "\\}", apiInvoker.escapeString(pkiEzsigntemplatedocumentID.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "Authorization" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "PUT", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (EzsigntemplatedocumentEditObjectV1Response) ApiInvoker.deserialize(localVarResponse, "", EzsigntemplatedocumentEditObjectV1Response.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Edit an existing Ezsigntemplatedocument
   * 
   * @param pkiEzsigntemplatedocumentID    * @param ezsigntemplatedocumentEditObjectV1Request 
  */
  public void ezsigntemplatedocumentEditObjectV1 (Integer pkiEzsigntemplatedocumentID, EzsigntemplatedocumentEditObjectV1Request ezsigntemplatedocumentEditObjectV1Request, final Response.Listener<EzsigntemplatedocumentEditObjectV1Response> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = ezsigntemplatedocumentEditObjectV1Request;

    // verify the required parameter 'pkiEzsigntemplatedocumentID' is set
    if (pkiEzsigntemplatedocumentID == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'pkiEzsigntemplatedocumentID' when calling ezsigntemplatedocumentEditObjectV1",
        new ApiException(400, "Missing the required parameter 'pkiEzsigntemplatedocumentID' when calling ezsigntemplatedocumentEditObjectV1"));
    }
    // verify the required parameter 'ezsigntemplatedocumentEditObjectV1Request' is set
    if (ezsigntemplatedocumentEditObjectV1Request == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'ezsigntemplatedocumentEditObjectV1Request' when calling ezsigntemplatedocumentEditObjectV1",
        new ApiException(400, "Missing the required parameter 'ezsigntemplatedocumentEditObjectV1Request' when calling ezsigntemplatedocumentEditObjectV1"));
    }

    // create path and map variables
    String path = "/1/object/ezsigntemplatedocument/{pkiEzsigntemplatedocumentID}".replaceAll("\\{format\\}","json").replaceAll("\\{" + "pkiEzsigntemplatedocumentID" + "\\}", apiInvoker.escapeString(pkiEzsigntemplatedocumentID.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "Authorization" };

    try {
      apiInvoker.invokeAPI(basePath, path, "PUT", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((EzsigntemplatedocumentEditObjectV1Response) ApiInvoker.deserialize(localVarResponse,  "", EzsigntemplatedocumentEditObjectV1Response.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Extract text from Ezsigntemplatedocument area
  * Extract text from Ezsigntemplatedocument area
   * @param pkiEzsigntemplatedocumentID 
   * @param ezsigntemplatedocumentExtractTextV1Request 
   * @return EzsigntemplatedocumentExtractTextV1Response
  */
  public EzsigntemplatedocumentExtractTextV1Response ezsigntemplatedocumentExtractTextV1 (Integer pkiEzsigntemplatedocumentID, EzsigntemplatedocumentExtractTextV1Request ezsigntemplatedocumentExtractTextV1Request) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = ezsigntemplatedocumentExtractTextV1Request;
    // verify the required parameter 'pkiEzsigntemplatedocumentID' is set
    if (pkiEzsigntemplatedocumentID == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'pkiEzsigntemplatedocumentID' when calling ezsigntemplatedocumentExtractTextV1",
        new ApiException(400, "Missing the required parameter 'pkiEzsigntemplatedocumentID' when calling ezsigntemplatedocumentExtractTextV1"));
    }
    // verify the required parameter 'ezsigntemplatedocumentExtractTextV1Request' is set
    if (ezsigntemplatedocumentExtractTextV1Request == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'ezsigntemplatedocumentExtractTextV1Request' when calling ezsigntemplatedocumentExtractTextV1",
        new ApiException(400, "Missing the required parameter 'ezsigntemplatedocumentExtractTextV1Request' when calling ezsigntemplatedocumentExtractTextV1"));
    }

    // create path and map variables
    String path = "/1/object/ezsigntemplatedocument/{pkiEzsigntemplatedocumentID}/extractText".replaceAll("\\{" + "pkiEzsigntemplatedocumentID" + "\\}", apiInvoker.escapeString(pkiEzsigntemplatedocumentID.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "Authorization" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (EzsigntemplatedocumentExtractTextV1Response) ApiInvoker.deserialize(localVarResponse, "", EzsigntemplatedocumentExtractTextV1Response.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Extract text from Ezsigntemplatedocument area
   * Extract text from Ezsigntemplatedocument area
   * @param pkiEzsigntemplatedocumentID    * @param ezsigntemplatedocumentExtractTextV1Request 
  */
  public void ezsigntemplatedocumentExtractTextV1 (Integer pkiEzsigntemplatedocumentID, EzsigntemplatedocumentExtractTextV1Request ezsigntemplatedocumentExtractTextV1Request, final Response.Listener<EzsigntemplatedocumentExtractTextV1Response> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = ezsigntemplatedocumentExtractTextV1Request;

    // verify the required parameter 'pkiEzsigntemplatedocumentID' is set
    if (pkiEzsigntemplatedocumentID == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'pkiEzsigntemplatedocumentID' when calling ezsigntemplatedocumentExtractTextV1",
        new ApiException(400, "Missing the required parameter 'pkiEzsigntemplatedocumentID' when calling ezsigntemplatedocumentExtractTextV1"));
    }
    // verify the required parameter 'ezsigntemplatedocumentExtractTextV1Request' is set
    if (ezsigntemplatedocumentExtractTextV1Request == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'ezsigntemplatedocumentExtractTextV1Request' when calling ezsigntemplatedocumentExtractTextV1",
        new ApiException(400, "Missing the required parameter 'ezsigntemplatedocumentExtractTextV1Request' when calling ezsigntemplatedocumentExtractTextV1"));
    }

    // create path and map variables
    String path = "/1/object/ezsigntemplatedocument/{pkiEzsigntemplatedocumentID}/extractText".replaceAll("\\{format\\}","json").replaceAll("\\{" + "pkiEzsigntemplatedocumentID" + "\\}", apiInvoker.escapeString(pkiEzsigntemplatedocumentID.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "Authorization" };

    try {
      apiInvoker.invokeAPI(basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((EzsigntemplatedocumentExtractTextV1Response) ApiInvoker.deserialize(localVarResponse,  "", EzsigntemplatedocumentExtractTextV1Response.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Flatten
  * Flatten an Ezsigntemplatedocument signatures, forms and annotations. This process finalizes the PDF so that the forms and annotations become part of the document content and cannot be edited.
   * @param pkiEzsigntemplatedocumentID 
   * @param body 
   * @return EzsigntemplatedocumentFlattenV1Response
  */
  public EzsigntemplatedocumentFlattenV1Response ezsigntemplatedocumentFlattenV1 (Integer pkiEzsigntemplatedocumentID, Object body) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = body;
    // verify the required parameter 'pkiEzsigntemplatedocumentID' is set
    if (pkiEzsigntemplatedocumentID == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'pkiEzsigntemplatedocumentID' when calling ezsigntemplatedocumentFlattenV1",
        new ApiException(400, "Missing the required parameter 'pkiEzsigntemplatedocumentID' when calling ezsigntemplatedocumentFlattenV1"));
    }
    // verify the required parameter 'body' is set
    if (body == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'body' when calling ezsigntemplatedocumentFlattenV1",
        new ApiException(400, "Missing the required parameter 'body' when calling ezsigntemplatedocumentFlattenV1"));
    }

    // create path and map variables
    String path = "/1/object/ezsigntemplatedocument/{pkiEzsigntemplatedocumentID}/flatten".replaceAll("\\{" + "pkiEzsigntemplatedocumentID" + "\\}", apiInvoker.escapeString(pkiEzsigntemplatedocumentID.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "Authorization" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (EzsigntemplatedocumentFlattenV1Response) ApiInvoker.deserialize(localVarResponse, "", EzsigntemplatedocumentFlattenV1Response.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Flatten
   * Flatten an Ezsigntemplatedocument signatures, forms and annotations. This process finalizes the PDF so that the forms and annotations become part of the document content and cannot be edited.
   * @param pkiEzsigntemplatedocumentID    * @param body 
  */
  public void ezsigntemplatedocumentFlattenV1 (Integer pkiEzsigntemplatedocumentID, Object body, final Response.Listener<EzsigntemplatedocumentFlattenV1Response> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = body;

    // verify the required parameter 'pkiEzsigntemplatedocumentID' is set
    if (pkiEzsigntemplatedocumentID == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'pkiEzsigntemplatedocumentID' when calling ezsigntemplatedocumentFlattenV1",
        new ApiException(400, "Missing the required parameter 'pkiEzsigntemplatedocumentID' when calling ezsigntemplatedocumentFlattenV1"));
    }
    // verify the required parameter 'body' is set
    if (body == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'body' when calling ezsigntemplatedocumentFlattenV1",
        new ApiException(400, "Missing the required parameter 'body' when calling ezsigntemplatedocumentFlattenV1"));
    }

    // create path and map variables
    String path = "/1/object/ezsigntemplatedocument/{pkiEzsigntemplatedocumentID}/flatten".replaceAll("\\{format\\}","json").replaceAll("\\{" + "pkiEzsigntemplatedocumentID" + "\\}", apiInvoker.escapeString(pkiEzsigntemplatedocumentID.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "Authorization" };

    try {
      apiInvoker.invokeAPI(basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((EzsigntemplatedocumentFlattenV1Response) ApiInvoker.deserialize(localVarResponse,  "", EzsigntemplatedocumentFlattenV1Response.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Retrieve an existing Ezsigntemplatedocument&#39;s Ezsigntemplatedocumentpagerecognitions
  * 
   * @param pkiEzsigntemplatedocumentID 
   * @return EzsigntemplatedocumentGetEzsigntemplatedocumentpagerecognitionsV1Response
  */
  public EzsigntemplatedocumentGetEzsigntemplatedocumentpagerecognitionsV1Response ezsigntemplatedocumentGetEzsigntemplatedocumentpagerecognitionsV1 (Integer pkiEzsigntemplatedocumentID) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'pkiEzsigntemplatedocumentID' is set
    if (pkiEzsigntemplatedocumentID == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'pkiEzsigntemplatedocumentID' when calling ezsigntemplatedocumentGetEzsigntemplatedocumentpagerecognitionsV1",
        new ApiException(400, "Missing the required parameter 'pkiEzsigntemplatedocumentID' when calling ezsigntemplatedocumentGetEzsigntemplatedocumentpagerecognitionsV1"));
    }

    // create path and map variables
    String path = "/1/object/ezsigntemplatedocument/{pkiEzsigntemplatedocumentID}/getEzsigntemplatedocumentpagerecognitions".replaceAll("\\{" + "pkiEzsigntemplatedocumentID" + "\\}", apiInvoker.escapeString(pkiEzsigntemplatedocumentID.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "Authorization" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (EzsigntemplatedocumentGetEzsigntemplatedocumentpagerecognitionsV1Response) ApiInvoker.deserialize(localVarResponse, "", EzsigntemplatedocumentGetEzsigntemplatedocumentpagerecognitionsV1Response.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Retrieve an existing Ezsigntemplatedocument&#39;s Ezsigntemplatedocumentpagerecognitions
   * 
   * @param pkiEzsigntemplatedocumentID 
  */
  public void ezsigntemplatedocumentGetEzsigntemplatedocumentpagerecognitionsV1 (Integer pkiEzsigntemplatedocumentID, final Response.Listener<EzsigntemplatedocumentGetEzsigntemplatedocumentpagerecognitionsV1Response> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'pkiEzsigntemplatedocumentID' is set
    if (pkiEzsigntemplatedocumentID == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'pkiEzsigntemplatedocumentID' when calling ezsigntemplatedocumentGetEzsigntemplatedocumentpagerecognitionsV1",
        new ApiException(400, "Missing the required parameter 'pkiEzsigntemplatedocumentID' when calling ezsigntemplatedocumentGetEzsigntemplatedocumentpagerecognitionsV1"));
    }

    // create path and map variables
    String path = "/1/object/ezsigntemplatedocument/{pkiEzsigntemplatedocumentID}/getEzsigntemplatedocumentpagerecognitions".replaceAll("\\{format\\}","json").replaceAll("\\{" + "pkiEzsigntemplatedocumentID" + "\\}", apiInvoker.escapeString(pkiEzsigntemplatedocumentID.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "Authorization" };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((EzsigntemplatedocumentGetEzsigntemplatedocumentpagerecognitionsV1Response) ApiInvoker.deserialize(localVarResponse,  "", EzsigntemplatedocumentGetEzsigntemplatedocumentpagerecognitionsV1Response.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Retrieve an existing Ezsigntemplatedocument&#39;s Ezsigntemplatedocumentpages
  * 
   * @param pkiEzsigntemplatedocumentID 
   * @return EzsigntemplatedocumentGetEzsigntemplatedocumentpagesV1Response
  */
  public EzsigntemplatedocumentGetEzsigntemplatedocumentpagesV1Response ezsigntemplatedocumentGetEzsigntemplatedocumentpagesV1 (Integer pkiEzsigntemplatedocumentID) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'pkiEzsigntemplatedocumentID' is set
    if (pkiEzsigntemplatedocumentID == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'pkiEzsigntemplatedocumentID' when calling ezsigntemplatedocumentGetEzsigntemplatedocumentpagesV1",
        new ApiException(400, "Missing the required parameter 'pkiEzsigntemplatedocumentID' when calling ezsigntemplatedocumentGetEzsigntemplatedocumentpagesV1"));
    }

    // create path and map variables
    String path = "/1/object/ezsigntemplatedocument/{pkiEzsigntemplatedocumentID}/getEzsigntemplatedocumentpages".replaceAll("\\{" + "pkiEzsigntemplatedocumentID" + "\\}", apiInvoker.escapeString(pkiEzsigntemplatedocumentID.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "Authorization" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (EzsigntemplatedocumentGetEzsigntemplatedocumentpagesV1Response) ApiInvoker.deserialize(localVarResponse, "", EzsigntemplatedocumentGetEzsigntemplatedocumentpagesV1Response.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Retrieve an existing Ezsigntemplatedocument&#39;s Ezsigntemplatedocumentpages
   * 
   * @param pkiEzsigntemplatedocumentID 
  */
  public void ezsigntemplatedocumentGetEzsigntemplatedocumentpagesV1 (Integer pkiEzsigntemplatedocumentID, final Response.Listener<EzsigntemplatedocumentGetEzsigntemplatedocumentpagesV1Response> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'pkiEzsigntemplatedocumentID' is set
    if (pkiEzsigntemplatedocumentID == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'pkiEzsigntemplatedocumentID' when calling ezsigntemplatedocumentGetEzsigntemplatedocumentpagesV1",
        new ApiException(400, "Missing the required parameter 'pkiEzsigntemplatedocumentID' when calling ezsigntemplatedocumentGetEzsigntemplatedocumentpagesV1"));
    }

    // create path and map variables
    String path = "/1/object/ezsigntemplatedocument/{pkiEzsigntemplatedocumentID}/getEzsigntemplatedocumentpages".replaceAll("\\{format\\}","json").replaceAll("\\{" + "pkiEzsigntemplatedocumentID" + "\\}", apiInvoker.escapeString(pkiEzsigntemplatedocumentID.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "Authorization" };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((EzsigntemplatedocumentGetEzsigntemplatedocumentpagesV1Response) ApiInvoker.deserialize(localVarResponse,  "", EzsigntemplatedocumentGetEzsigntemplatedocumentpagesV1Response.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Retrieve an existing Ezsigntemplatedocument&#39;s Ezsigntemplateformfieldgroups
  * 
   * @param pkiEzsigntemplatedocumentID 
   * @return EzsigntemplatedocumentGetEzsigntemplateformfieldgroupsV1Response
  */
  public EzsigntemplatedocumentGetEzsigntemplateformfieldgroupsV1Response ezsigntemplatedocumentGetEzsigntemplateformfieldgroupsV1 (Integer pkiEzsigntemplatedocumentID) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'pkiEzsigntemplatedocumentID' is set
    if (pkiEzsigntemplatedocumentID == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'pkiEzsigntemplatedocumentID' when calling ezsigntemplatedocumentGetEzsigntemplateformfieldgroupsV1",
        new ApiException(400, "Missing the required parameter 'pkiEzsigntemplatedocumentID' when calling ezsigntemplatedocumentGetEzsigntemplateformfieldgroupsV1"));
    }

    // create path and map variables
    String path = "/1/object/ezsigntemplatedocument/{pkiEzsigntemplatedocumentID}/getEzsigntemplateformfieldgroups".replaceAll("\\{" + "pkiEzsigntemplatedocumentID" + "\\}", apiInvoker.escapeString(pkiEzsigntemplatedocumentID.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "Authorization" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (EzsigntemplatedocumentGetEzsigntemplateformfieldgroupsV1Response) ApiInvoker.deserialize(localVarResponse, "", EzsigntemplatedocumentGetEzsigntemplateformfieldgroupsV1Response.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Retrieve an existing Ezsigntemplatedocument&#39;s Ezsigntemplateformfieldgroups
   * 
   * @param pkiEzsigntemplatedocumentID 
  */
  public void ezsigntemplatedocumentGetEzsigntemplateformfieldgroupsV1 (Integer pkiEzsigntemplatedocumentID, final Response.Listener<EzsigntemplatedocumentGetEzsigntemplateformfieldgroupsV1Response> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'pkiEzsigntemplatedocumentID' is set
    if (pkiEzsigntemplatedocumentID == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'pkiEzsigntemplatedocumentID' when calling ezsigntemplatedocumentGetEzsigntemplateformfieldgroupsV1",
        new ApiException(400, "Missing the required parameter 'pkiEzsigntemplatedocumentID' when calling ezsigntemplatedocumentGetEzsigntemplateformfieldgroupsV1"));
    }

    // create path and map variables
    String path = "/1/object/ezsigntemplatedocument/{pkiEzsigntemplatedocumentID}/getEzsigntemplateformfieldgroups".replaceAll("\\{format\\}","json").replaceAll("\\{" + "pkiEzsigntemplatedocumentID" + "\\}", apiInvoker.escapeString(pkiEzsigntemplatedocumentID.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "Authorization" };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((EzsigntemplatedocumentGetEzsigntemplateformfieldgroupsV1Response) ApiInvoker.deserialize(localVarResponse,  "", EzsigntemplatedocumentGetEzsigntemplateformfieldgroupsV1Response.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Retrieve an existing Ezsigntemplatedocument&#39;s Ezsigntemplatesignatures
  * 
   * @param pkiEzsigntemplatedocumentID 
   * @return EzsigntemplatedocumentGetEzsigntemplatesignaturesV1Response
  */
  public EzsigntemplatedocumentGetEzsigntemplatesignaturesV1Response ezsigntemplatedocumentGetEzsigntemplatesignaturesV1 (Integer pkiEzsigntemplatedocumentID) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'pkiEzsigntemplatedocumentID' is set
    if (pkiEzsigntemplatedocumentID == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'pkiEzsigntemplatedocumentID' when calling ezsigntemplatedocumentGetEzsigntemplatesignaturesV1",
        new ApiException(400, "Missing the required parameter 'pkiEzsigntemplatedocumentID' when calling ezsigntemplatedocumentGetEzsigntemplatesignaturesV1"));
    }

    // create path and map variables
    String path = "/1/object/ezsigntemplatedocument/{pkiEzsigntemplatedocumentID}/getEzsigntemplatesignatures".replaceAll("\\{" + "pkiEzsigntemplatedocumentID" + "\\}", apiInvoker.escapeString(pkiEzsigntemplatedocumentID.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "Authorization" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (EzsigntemplatedocumentGetEzsigntemplatesignaturesV1Response) ApiInvoker.deserialize(localVarResponse, "", EzsigntemplatedocumentGetEzsigntemplatesignaturesV1Response.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Retrieve an existing Ezsigntemplatedocument&#39;s Ezsigntemplatesignatures
   * 
   * @param pkiEzsigntemplatedocumentID 
  */
  public void ezsigntemplatedocumentGetEzsigntemplatesignaturesV1 (Integer pkiEzsigntemplatedocumentID, final Response.Listener<EzsigntemplatedocumentGetEzsigntemplatesignaturesV1Response> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'pkiEzsigntemplatedocumentID' is set
    if (pkiEzsigntemplatedocumentID == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'pkiEzsigntemplatedocumentID' when calling ezsigntemplatedocumentGetEzsigntemplatesignaturesV1",
        new ApiException(400, "Missing the required parameter 'pkiEzsigntemplatedocumentID' when calling ezsigntemplatedocumentGetEzsigntemplatesignaturesV1"));
    }

    // create path and map variables
    String path = "/1/object/ezsigntemplatedocument/{pkiEzsigntemplatedocumentID}/getEzsigntemplatesignatures".replaceAll("\\{format\\}","json").replaceAll("\\{" + "pkiEzsigntemplatedocumentID" + "\\}", apiInvoker.escapeString(pkiEzsigntemplatedocumentID.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "Authorization" };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((EzsigntemplatedocumentGetEzsigntemplatesignaturesV1Response) ApiInvoker.deserialize(localVarResponse,  "", EzsigntemplatedocumentGetEzsigntemplatesignaturesV1Response.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Retrieve an existing Ezsigntemplatedocument
  * 
   * @param pkiEzsigntemplatedocumentID 
   * @return EzsigntemplatedocumentGetObjectV2Response
  */
  public EzsigntemplatedocumentGetObjectV2Response ezsigntemplatedocumentGetObjectV2 (Integer pkiEzsigntemplatedocumentID) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'pkiEzsigntemplatedocumentID' is set
    if (pkiEzsigntemplatedocumentID == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'pkiEzsigntemplatedocumentID' when calling ezsigntemplatedocumentGetObjectV2",
        new ApiException(400, "Missing the required parameter 'pkiEzsigntemplatedocumentID' when calling ezsigntemplatedocumentGetObjectV2"));
    }

    // create path and map variables
    String path = "/2/object/ezsigntemplatedocument/{pkiEzsigntemplatedocumentID}".replaceAll("\\{" + "pkiEzsigntemplatedocumentID" + "\\}", apiInvoker.escapeString(pkiEzsigntemplatedocumentID.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "Authorization" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (EzsigntemplatedocumentGetObjectV2Response) ApiInvoker.deserialize(localVarResponse, "", EzsigntemplatedocumentGetObjectV2Response.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Retrieve an existing Ezsigntemplatedocument
   * 
   * @param pkiEzsigntemplatedocumentID 
  */
  public void ezsigntemplatedocumentGetObjectV2 (Integer pkiEzsigntemplatedocumentID, final Response.Listener<EzsigntemplatedocumentGetObjectV2Response> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'pkiEzsigntemplatedocumentID' is set
    if (pkiEzsigntemplatedocumentID == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'pkiEzsigntemplatedocumentID' when calling ezsigntemplatedocumentGetObjectV2",
        new ApiException(400, "Missing the required parameter 'pkiEzsigntemplatedocumentID' when calling ezsigntemplatedocumentGetObjectV2"));
    }

    // create path and map variables
    String path = "/2/object/ezsigntemplatedocument/{pkiEzsigntemplatedocumentID}".replaceAll("\\{format\\}","json").replaceAll("\\{" + "pkiEzsigntemplatedocumentID" + "\\}", apiInvoker.escapeString(pkiEzsigntemplatedocumentID.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "Authorization" };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((EzsigntemplatedocumentGetObjectV2Response) ApiInvoker.deserialize(localVarResponse,  "", EzsigntemplatedocumentGetObjectV2Response.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Retrieve positions X,Y of given words from a Ezsigntemplatedocument
  * 
   * @param pkiEzsigntemplatedocumentID 
   * @param ezsigntemplatedocumentGetWordsPositionsV1Request 
   * @return EzsigntemplatedocumentGetWordsPositionsV1Response
  */
  public EzsigntemplatedocumentGetWordsPositionsV1Response ezsigntemplatedocumentGetWordsPositionsV1 (Integer pkiEzsigntemplatedocumentID, EzsigntemplatedocumentGetWordsPositionsV1Request ezsigntemplatedocumentGetWordsPositionsV1Request) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = ezsigntemplatedocumentGetWordsPositionsV1Request;
    // verify the required parameter 'pkiEzsigntemplatedocumentID' is set
    if (pkiEzsigntemplatedocumentID == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'pkiEzsigntemplatedocumentID' when calling ezsigntemplatedocumentGetWordsPositionsV1",
        new ApiException(400, "Missing the required parameter 'pkiEzsigntemplatedocumentID' when calling ezsigntemplatedocumentGetWordsPositionsV1"));
    }
    // verify the required parameter 'ezsigntemplatedocumentGetWordsPositionsV1Request' is set
    if (ezsigntemplatedocumentGetWordsPositionsV1Request == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'ezsigntemplatedocumentGetWordsPositionsV1Request' when calling ezsigntemplatedocumentGetWordsPositionsV1",
        new ApiException(400, "Missing the required parameter 'ezsigntemplatedocumentGetWordsPositionsV1Request' when calling ezsigntemplatedocumentGetWordsPositionsV1"));
    }

    // create path and map variables
    String path = "/1/object/ezsigntemplatedocument/{pkiEzsigntemplatedocumentID}/getWordsPositions".replaceAll("\\{" + "pkiEzsigntemplatedocumentID" + "\\}", apiInvoker.escapeString(pkiEzsigntemplatedocumentID.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "Authorization" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (EzsigntemplatedocumentGetWordsPositionsV1Response) ApiInvoker.deserialize(localVarResponse, "", EzsigntemplatedocumentGetWordsPositionsV1Response.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Retrieve positions X,Y of given words from a Ezsigntemplatedocument
   * 
   * @param pkiEzsigntemplatedocumentID    * @param ezsigntemplatedocumentGetWordsPositionsV1Request 
  */
  public void ezsigntemplatedocumentGetWordsPositionsV1 (Integer pkiEzsigntemplatedocumentID, EzsigntemplatedocumentGetWordsPositionsV1Request ezsigntemplatedocumentGetWordsPositionsV1Request, final Response.Listener<EzsigntemplatedocumentGetWordsPositionsV1Response> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = ezsigntemplatedocumentGetWordsPositionsV1Request;

    // verify the required parameter 'pkiEzsigntemplatedocumentID' is set
    if (pkiEzsigntemplatedocumentID == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'pkiEzsigntemplatedocumentID' when calling ezsigntemplatedocumentGetWordsPositionsV1",
        new ApiException(400, "Missing the required parameter 'pkiEzsigntemplatedocumentID' when calling ezsigntemplatedocumentGetWordsPositionsV1"));
    }
    // verify the required parameter 'ezsigntemplatedocumentGetWordsPositionsV1Request' is set
    if (ezsigntemplatedocumentGetWordsPositionsV1Request == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'ezsigntemplatedocumentGetWordsPositionsV1Request' when calling ezsigntemplatedocumentGetWordsPositionsV1",
        new ApiException(400, "Missing the required parameter 'ezsigntemplatedocumentGetWordsPositionsV1Request' when calling ezsigntemplatedocumentGetWordsPositionsV1"));
    }

    // create path and map variables
    String path = "/1/object/ezsigntemplatedocument/{pkiEzsigntemplatedocumentID}/getWordsPositions".replaceAll("\\{format\\}","json").replaceAll("\\{" + "pkiEzsigntemplatedocumentID" + "\\}", apiInvoker.escapeString(pkiEzsigntemplatedocumentID.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "Authorization" };

    try {
      apiInvoker.invokeAPI(basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((EzsigntemplatedocumentGetWordsPositionsV1Response) ApiInvoker.deserialize(localVarResponse,  "", EzsigntemplatedocumentGetWordsPositionsV1Response.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Patch an existing Ezsigntemplatedocument
  * 
   * @param pkiEzsigntemplatedocumentID 
   * @param ezsigntemplatedocumentPatchObjectV1Request 
   * @return EzsigntemplatedocumentPatchObjectV1Response
  */
  public EzsigntemplatedocumentPatchObjectV1Response ezsigntemplatedocumentPatchObjectV1 (Integer pkiEzsigntemplatedocumentID, EzsigntemplatedocumentPatchObjectV1Request ezsigntemplatedocumentPatchObjectV1Request) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = ezsigntemplatedocumentPatchObjectV1Request;
    // verify the required parameter 'pkiEzsigntemplatedocumentID' is set
    if (pkiEzsigntemplatedocumentID == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'pkiEzsigntemplatedocumentID' when calling ezsigntemplatedocumentPatchObjectV1",
        new ApiException(400, "Missing the required parameter 'pkiEzsigntemplatedocumentID' when calling ezsigntemplatedocumentPatchObjectV1"));
    }
    // verify the required parameter 'ezsigntemplatedocumentPatchObjectV1Request' is set
    if (ezsigntemplatedocumentPatchObjectV1Request == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'ezsigntemplatedocumentPatchObjectV1Request' when calling ezsigntemplatedocumentPatchObjectV1",
        new ApiException(400, "Missing the required parameter 'ezsigntemplatedocumentPatchObjectV1Request' when calling ezsigntemplatedocumentPatchObjectV1"));
    }

    // create path and map variables
    String path = "/1/object/ezsigntemplatedocument/{pkiEzsigntemplatedocumentID}".replaceAll("\\{" + "pkiEzsigntemplatedocumentID" + "\\}", apiInvoker.escapeString(pkiEzsigntemplatedocumentID.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "Authorization" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "PATCH", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (EzsigntemplatedocumentPatchObjectV1Response) ApiInvoker.deserialize(localVarResponse, "", EzsigntemplatedocumentPatchObjectV1Response.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Patch an existing Ezsigntemplatedocument
   * 
   * @param pkiEzsigntemplatedocumentID    * @param ezsigntemplatedocumentPatchObjectV1Request 
  */
  public void ezsigntemplatedocumentPatchObjectV1 (Integer pkiEzsigntemplatedocumentID, EzsigntemplatedocumentPatchObjectV1Request ezsigntemplatedocumentPatchObjectV1Request, final Response.Listener<EzsigntemplatedocumentPatchObjectV1Response> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = ezsigntemplatedocumentPatchObjectV1Request;

    // verify the required parameter 'pkiEzsigntemplatedocumentID' is set
    if (pkiEzsigntemplatedocumentID == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'pkiEzsigntemplatedocumentID' when calling ezsigntemplatedocumentPatchObjectV1",
        new ApiException(400, "Missing the required parameter 'pkiEzsigntemplatedocumentID' when calling ezsigntemplatedocumentPatchObjectV1"));
    }
    // verify the required parameter 'ezsigntemplatedocumentPatchObjectV1Request' is set
    if (ezsigntemplatedocumentPatchObjectV1Request == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'ezsigntemplatedocumentPatchObjectV1Request' when calling ezsigntemplatedocumentPatchObjectV1",
        new ApiException(400, "Missing the required parameter 'ezsigntemplatedocumentPatchObjectV1Request' when calling ezsigntemplatedocumentPatchObjectV1"));
    }

    // create path and map variables
    String path = "/1/object/ezsigntemplatedocument/{pkiEzsigntemplatedocumentID}".replaceAll("\\{format\\}","json").replaceAll("\\{" + "pkiEzsigntemplatedocumentID" + "\\}", apiInvoker.escapeString(pkiEzsigntemplatedocumentID.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "Authorization" };

    try {
      apiInvoker.invokeAPI(basePath, path, "PATCH", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((EzsigntemplatedocumentPatchObjectV1Response) ApiInvoker.deserialize(localVarResponse,  "", EzsigntemplatedocumentPatchObjectV1Response.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
}
