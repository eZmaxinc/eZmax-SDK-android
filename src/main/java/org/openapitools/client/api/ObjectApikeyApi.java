/**
 * eZmax API Definition (Full)
 * This API expose all the functionnalities for the eZmax and eZsign applications.
 *
 * The version of the OpenAPI document: 1.2.0
 * Contact: support-api@ezmax.ca
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package org.openapitools.client.api;

import eZmaxAPI.ApiInvoker;
import eZmaxAPI.ApiException;
import eZmaxAPI.Pair;

import org.openapitools.client.model.*;

import java.util.*;

import com.android.volley.Response;
import com.android.volley.VolleyError;

import org.openapitools.client.model.ApikeyCreateObjectV2Request;
import org.openapitools.client.model.ApikeyCreateObjectV2Response;
import org.openapitools.client.model.ApikeyEditObjectV1Request;
import org.openapitools.client.model.ApikeyEditObjectV1Response;
import org.openapitools.client.model.ApikeyEditPermissionsV1Request;
import org.openapitools.client.model.ApikeyEditPermissionsV1Response;
import org.openapitools.client.model.ApikeyGetCorsV1Response;
import org.openapitools.client.model.ApikeyGetListV1Response;
import org.openapitools.client.model.ApikeyGetObjectV2Response;
import org.openapitools.client.model.ApikeyGetPermissionsV1Response;
import org.openapitools.client.model.ApikeyGetSubnetsV1Response;
import org.openapitools.client.model.ApikeyRegenerateV1Request;
import org.openapitools.client.model.ApikeyRegenerateV1Response;
import org.openapitools.client.model.CommonResponseError;
import java.io.File;
import org.openapitools.client.model.HeaderAcceptLanguage;

import org.apache.http.HttpEntity;
import org.apache.http.entity.mime.MultipartEntityBuilder;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.concurrent.ExecutionException;
import java.util.concurrent.TimeoutException;

public class ObjectApikeyApi {
  String basePath = "https://prod.api.appcluster01.ca-central-1.ezmax.com/rest";
  ApiInvoker apiInvoker = ApiInvoker.getInstance();

  public void addHeader(String key, String value) {
    getInvoker().addDefaultHeader(key, value);
  }

  public ApiInvoker getInvoker() {
    return apiInvoker;
  }

  public void setBasePath(String basePath) {
    this.basePath = basePath;
  }

  public String getBasePath() {
    return basePath;
  }

  /**
  * Create a new Apikey
  * The endpoint allows to create one or many elements at once.
   * @param apikeyCreateObjectV2Request 
   * @return ApikeyCreateObjectV2Response
  */
  public ApikeyCreateObjectV2Response apikeyCreateObjectV2 (ApikeyCreateObjectV2Request apikeyCreateObjectV2Request) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = apikeyCreateObjectV2Request;
    // verify the required parameter 'apikeyCreateObjectV2Request' is set
    if (apikeyCreateObjectV2Request == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'apikeyCreateObjectV2Request' when calling apikeyCreateObjectV2",
        new ApiException(400, "Missing the required parameter 'apikeyCreateObjectV2Request' when calling apikeyCreateObjectV2"));
    }

    // create path and map variables
    String path = "/2/object/apikey";

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "Authorization" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (ApikeyCreateObjectV2Response) ApiInvoker.deserialize(localVarResponse, "", ApikeyCreateObjectV2Response.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Create a new Apikey
   * The endpoint allows to create one or many elements at once.
   * @param apikeyCreateObjectV2Request 
  */
  public void apikeyCreateObjectV2 (ApikeyCreateObjectV2Request apikeyCreateObjectV2Request, final Response.Listener<ApikeyCreateObjectV2Response> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = apikeyCreateObjectV2Request;

    // verify the required parameter 'apikeyCreateObjectV2Request' is set
    if (apikeyCreateObjectV2Request == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'apikeyCreateObjectV2Request' when calling apikeyCreateObjectV2",
        new ApiException(400, "Missing the required parameter 'apikeyCreateObjectV2Request' when calling apikeyCreateObjectV2"));
    }

    // create path and map variables
    String path = "/2/object/apikey".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "Authorization" };

    try {
      apiInvoker.invokeAPI(basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((ApikeyCreateObjectV2Response) ApiInvoker.deserialize(localVarResponse,  "", ApikeyCreateObjectV2Response.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Edit an existing Apikey
  * 
   * @param pkiApikeyID The unique ID of the Apikey
   * @param apikeyEditObjectV1Request 
   * @return ApikeyEditObjectV1Response
  */
  public ApikeyEditObjectV1Response apikeyEditObjectV1 (Integer pkiApikeyID, ApikeyEditObjectV1Request apikeyEditObjectV1Request) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = apikeyEditObjectV1Request;
    // verify the required parameter 'pkiApikeyID' is set
    if (pkiApikeyID == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'pkiApikeyID' when calling apikeyEditObjectV1",
        new ApiException(400, "Missing the required parameter 'pkiApikeyID' when calling apikeyEditObjectV1"));
    }
    // verify the required parameter 'apikeyEditObjectV1Request' is set
    if (apikeyEditObjectV1Request == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'apikeyEditObjectV1Request' when calling apikeyEditObjectV1",
        new ApiException(400, "Missing the required parameter 'apikeyEditObjectV1Request' when calling apikeyEditObjectV1"));
    }

    // create path and map variables
    String path = "/1/object/apikey/{pkiApikeyID}".replaceAll("\\{" + "pkiApikeyID" + "\\}", apiInvoker.escapeString(pkiApikeyID.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "Authorization" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "PUT", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (ApikeyEditObjectV1Response) ApiInvoker.deserialize(localVarResponse, "", ApikeyEditObjectV1Response.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Edit an existing Apikey
   * 
   * @param pkiApikeyID The unique ID of the Apikey   * @param apikeyEditObjectV1Request 
  */
  public void apikeyEditObjectV1 (Integer pkiApikeyID, ApikeyEditObjectV1Request apikeyEditObjectV1Request, final Response.Listener<ApikeyEditObjectV1Response> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = apikeyEditObjectV1Request;

    // verify the required parameter 'pkiApikeyID' is set
    if (pkiApikeyID == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'pkiApikeyID' when calling apikeyEditObjectV1",
        new ApiException(400, "Missing the required parameter 'pkiApikeyID' when calling apikeyEditObjectV1"));
    }
    // verify the required parameter 'apikeyEditObjectV1Request' is set
    if (apikeyEditObjectV1Request == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'apikeyEditObjectV1Request' when calling apikeyEditObjectV1",
        new ApiException(400, "Missing the required parameter 'apikeyEditObjectV1Request' when calling apikeyEditObjectV1"));
    }

    // create path and map variables
    String path = "/1/object/apikey/{pkiApikeyID}".replaceAll("\\{format\\}","json").replaceAll("\\{" + "pkiApikeyID" + "\\}", apiInvoker.escapeString(pkiApikeyID.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "Authorization" };

    try {
      apiInvoker.invokeAPI(basePath, path, "PUT", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((ApikeyEditObjectV1Response) ApiInvoker.deserialize(localVarResponse,  "", ApikeyEditObjectV1Response.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Edit multiple Permissions
  * Using this endpoint, you can edit multiple Permissions at the same time.
   * @param pkiApikeyID 
   * @param apikeyEditPermissionsV1Request 
   * @return ApikeyEditPermissionsV1Response
  */
  public ApikeyEditPermissionsV1Response apikeyEditPermissionsV1 (Integer pkiApikeyID, ApikeyEditPermissionsV1Request apikeyEditPermissionsV1Request) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = apikeyEditPermissionsV1Request;
    // verify the required parameter 'pkiApikeyID' is set
    if (pkiApikeyID == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'pkiApikeyID' when calling apikeyEditPermissionsV1",
        new ApiException(400, "Missing the required parameter 'pkiApikeyID' when calling apikeyEditPermissionsV1"));
    }
    // verify the required parameter 'apikeyEditPermissionsV1Request' is set
    if (apikeyEditPermissionsV1Request == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'apikeyEditPermissionsV1Request' when calling apikeyEditPermissionsV1",
        new ApiException(400, "Missing the required parameter 'apikeyEditPermissionsV1Request' when calling apikeyEditPermissionsV1"));
    }

    // create path and map variables
    String path = "/1/object/apikey/{pkiApikeyID}/editPermissions".replaceAll("\\{" + "pkiApikeyID" + "\\}", apiInvoker.escapeString(pkiApikeyID.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "Authorization" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "PUT", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (ApikeyEditPermissionsV1Response) ApiInvoker.deserialize(localVarResponse, "", ApikeyEditPermissionsV1Response.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Edit multiple Permissions
   * Using this endpoint, you can edit multiple Permissions at the same time.
   * @param pkiApikeyID    * @param apikeyEditPermissionsV1Request 
  */
  public void apikeyEditPermissionsV1 (Integer pkiApikeyID, ApikeyEditPermissionsV1Request apikeyEditPermissionsV1Request, final Response.Listener<ApikeyEditPermissionsV1Response> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = apikeyEditPermissionsV1Request;

    // verify the required parameter 'pkiApikeyID' is set
    if (pkiApikeyID == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'pkiApikeyID' when calling apikeyEditPermissionsV1",
        new ApiException(400, "Missing the required parameter 'pkiApikeyID' when calling apikeyEditPermissionsV1"));
    }
    // verify the required parameter 'apikeyEditPermissionsV1Request' is set
    if (apikeyEditPermissionsV1Request == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'apikeyEditPermissionsV1Request' when calling apikeyEditPermissionsV1",
        new ApiException(400, "Missing the required parameter 'apikeyEditPermissionsV1Request' when calling apikeyEditPermissionsV1"));
    }

    // create path and map variables
    String path = "/1/object/apikey/{pkiApikeyID}/editPermissions".replaceAll("\\{format\\}","json").replaceAll("\\{" + "pkiApikeyID" + "\\}", apiInvoker.escapeString(pkiApikeyID.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "Authorization" };

    try {
      apiInvoker.invokeAPI(basePath, path, "PUT", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((ApikeyEditPermissionsV1Response) ApiInvoker.deserialize(localVarResponse,  "", ApikeyEditPermissionsV1Response.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Retrieve an existing Apikey&#39;s cors
  * 
   * @param pkiApikeyID 
   * @return ApikeyGetCorsV1Response
  */
  public ApikeyGetCorsV1Response apikeyGetCorsV1 (Integer pkiApikeyID) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'pkiApikeyID' is set
    if (pkiApikeyID == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'pkiApikeyID' when calling apikeyGetCorsV1",
        new ApiException(400, "Missing the required parameter 'pkiApikeyID' when calling apikeyGetCorsV1"));
    }

    // create path and map variables
    String path = "/1/object/apikey/{pkiApikeyID}/getCors".replaceAll("\\{" + "pkiApikeyID" + "\\}", apiInvoker.escapeString(pkiApikeyID.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "Authorization" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (ApikeyGetCorsV1Response) ApiInvoker.deserialize(localVarResponse, "", ApikeyGetCorsV1Response.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Retrieve an existing Apikey&#39;s cors
   * 
   * @param pkiApikeyID 
  */
  public void apikeyGetCorsV1 (Integer pkiApikeyID, final Response.Listener<ApikeyGetCorsV1Response> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'pkiApikeyID' is set
    if (pkiApikeyID == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'pkiApikeyID' when calling apikeyGetCorsV1",
        new ApiException(400, "Missing the required parameter 'pkiApikeyID' when calling apikeyGetCorsV1"));
    }

    // create path and map variables
    String path = "/1/object/apikey/{pkiApikeyID}/getCors".replaceAll("\\{format\\}","json").replaceAll("\\{" + "pkiApikeyID" + "\\}", apiInvoker.escapeString(pkiApikeyID.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "Authorization" };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((ApikeyGetCorsV1Response) ApiInvoker.deserialize(localVarResponse,  "", ApikeyGetCorsV1Response.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Retrieve Apikey list
  * Enum values that can be filtered in query parameter *sFilter*:  | Variable | Valid values | |---|---|
   * @param eOrderBy Specify how you want the results to be sorted
   * @param iRowMax 
   * @param iRowOffset 
   * @param acceptLanguage 
   * @param sFilter 
   * @return ApikeyGetListV1Response
  */
  public ApikeyGetListV1Response apikeyGetListV1 (String eOrderBy, Integer iRowMax, Integer iRowOffset, HeaderAcceptLanguage acceptLanguage, String sFilter) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;

    // create path and map variables
    String path = "/1/object/apikey/getList";

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    queryParams.addAll(ApiInvoker.parameterToPairs("", "eOrderBy", eOrderBy));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "iRowMax", iRowMax));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "iRowOffset", iRowOffset));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "sFilter", sFilter));
    headerParams.put("Accept-Language", ApiInvoker.parameterToString(acceptLanguage));
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "Authorization" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (ApikeyGetListV1Response) ApiInvoker.deserialize(localVarResponse, "", ApikeyGetListV1Response.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Retrieve Apikey list
   * Enum values that can be filtered in query parameter *sFilter*:  | Variable | Valid values | |---|---|
   * @param eOrderBy Specify how you want the results to be sorted   * @param iRowMax    * @param iRowOffset    * @param acceptLanguage    * @param sFilter 
  */
  public void apikeyGetListV1 (String eOrderBy, Integer iRowMax, Integer iRowOffset, HeaderAcceptLanguage acceptLanguage, String sFilter, final Response.Listener<ApikeyGetListV1Response> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;


    // create path and map variables
    String path = "/1/object/apikey/getList".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();

    queryParams.addAll(ApiInvoker.parameterToPairs("", "eOrderBy", eOrderBy));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "iRowMax", iRowMax));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "iRowOffset", iRowOffset));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "sFilter", sFilter));

    headerParams.put("Accept-Language", ApiInvoker.parameterToString(acceptLanguage));

    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "Authorization" };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((ApikeyGetListV1Response) ApiInvoker.deserialize(localVarResponse,  "", ApikeyGetListV1Response.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Retrieve an existing Apikey
  * 
   * @param pkiApikeyID The unique ID of the Apikey
   * @return ApikeyGetObjectV2Response
  */
  public ApikeyGetObjectV2Response apikeyGetObjectV2 (Integer pkiApikeyID) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'pkiApikeyID' is set
    if (pkiApikeyID == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'pkiApikeyID' when calling apikeyGetObjectV2",
        new ApiException(400, "Missing the required parameter 'pkiApikeyID' when calling apikeyGetObjectV2"));
    }

    // create path and map variables
    String path = "/2/object/apikey/{pkiApikeyID}".replaceAll("\\{" + "pkiApikeyID" + "\\}", apiInvoker.escapeString(pkiApikeyID.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "Authorization" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (ApikeyGetObjectV2Response) ApiInvoker.deserialize(localVarResponse, "", ApikeyGetObjectV2Response.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Retrieve an existing Apikey
   * 
   * @param pkiApikeyID The unique ID of the Apikey
  */
  public void apikeyGetObjectV2 (Integer pkiApikeyID, final Response.Listener<ApikeyGetObjectV2Response> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'pkiApikeyID' is set
    if (pkiApikeyID == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'pkiApikeyID' when calling apikeyGetObjectV2",
        new ApiException(400, "Missing the required parameter 'pkiApikeyID' when calling apikeyGetObjectV2"));
    }

    // create path and map variables
    String path = "/2/object/apikey/{pkiApikeyID}".replaceAll("\\{format\\}","json").replaceAll("\\{" + "pkiApikeyID" + "\\}", apiInvoker.escapeString(pkiApikeyID.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "Authorization" };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((ApikeyGetObjectV2Response) ApiInvoker.deserialize(localVarResponse,  "", ApikeyGetObjectV2Response.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Retrieve an existing Apikey&#39;s Permissions
  * 
   * @param pkiApikeyID 
   * @return ApikeyGetPermissionsV1Response
  */
  public ApikeyGetPermissionsV1Response apikeyGetPermissionsV1 (Integer pkiApikeyID) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'pkiApikeyID' is set
    if (pkiApikeyID == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'pkiApikeyID' when calling apikeyGetPermissionsV1",
        new ApiException(400, "Missing the required parameter 'pkiApikeyID' when calling apikeyGetPermissionsV1"));
    }

    // create path and map variables
    String path = "/1/object/apikey/{pkiApikeyID}/getPermissions".replaceAll("\\{" + "pkiApikeyID" + "\\}", apiInvoker.escapeString(pkiApikeyID.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "Authorization" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (ApikeyGetPermissionsV1Response) ApiInvoker.deserialize(localVarResponse, "", ApikeyGetPermissionsV1Response.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Retrieve an existing Apikey&#39;s Permissions
   * 
   * @param pkiApikeyID 
  */
  public void apikeyGetPermissionsV1 (Integer pkiApikeyID, final Response.Listener<ApikeyGetPermissionsV1Response> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'pkiApikeyID' is set
    if (pkiApikeyID == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'pkiApikeyID' when calling apikeyGetPermissionsV1",
        new ApiException(400, "Missing the required parameter 'pkiApikeyID' when calling apikeyGetPermissionsV1"));
    }

    // create path and map variables
    String path = "/1/object/apikey/{pkiApikeyID}/getPermissions".replaceAll("\\{format\\}","json").replaceAll("\\{" + "pkiApikeyID" + "\\}", apiInvoker.escapeString(pkiApikeyID.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "Authorization" };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((ApikeyGetPermissionsV1Response) ApiInvoker.deserialize(localVarResponse,  "", ApikeyGetPermissionsV1Response.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Retrieve an existing Apikey&#39;s subnets
  * 
   * @param pkiApikeyID 
   * @return ApikeyGetSubnetsV1Response
  */
  public ApikeyGetSubnetsV1Response apikeyGetSubnetsV1 (Integer pkiApikeyID) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'pkiApikeyID' is set
    if (pkiApikeyID == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'pkiApikeyID' when calling apikeyGetSubnetsV1",
        new ApiException(400, "Missing the required parameter 'pkiApikeyID' when calling apikeyGetSubnetsV1"));
    }

    // create path and map variables
    String path = "/1/object/apikey/{pkiApikeyID}/getSubnets".replaceAll("\\{" + "pkiApikeyID" + "\\}", apiInvoker.escapeString(pkiApikeyID.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "Authorization" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (ApikeyGetSubnetsV1Response) ApiInvoker.deserialize(localVarResponse, "", ApikeyGetSubnetsV1Response.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Retrieve an existing Apikey&#39;s subnets
   * 
   * @param pkiApikeyID 
  */
  public void apikeyGetSubnetsV1 (Integer pkiApikeyID, final Response.Listener<ApikeyGetSubnetsV1Response> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'pkiApikeyID' is set
    if (pkiApikeyID == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'pkiApikeyID' when calling apikeyGetSubnetsV1",
        new ApiException(400, "Missing the required parameter 'pkiApikeyID' when calling apikeyGetSubnetsV1"));
    }

    // create path and map variables
    String path = "/1/object/apikey/{pkiApikeyID}/getSubnets".replaceAll("\\{format\\}","json").replaceAll("\\{" + "pkiApikeyID" + "\\}", apiInvoker.escapeString(pkiApikeyID.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "Authorization" };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((ApikeyGetSubnetsV1Response) ApiInvoker.deserialize(localVarResponse,  "", ApikeyGetSubnetsV1Response.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Regenerate the Apikey
  * 
   * @param pkiApikeyID 
   * @param apikeyRegenerateV1Request 
   * @return ApikeyRegenerateV1Response
  */
  public ApikeyRegenerateV1Response apikeyRegenerateV1 (Integer pkiApikeyID, ApikeyRegenerateV1Request apikeyRegenerateV1Request) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = apikeyRegenerateV1Request;
    // verify the required parameter 'pkiApikeyID' is set
    if (pkiApikeyID == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'pkiApikeyID' when calling apikeyRegenerateV1",
        new ApiException(400, "Missing the required parameter 'pkiApikeyID' when calling apikeyRegenerateV1"));
    }
    // verify the required parameter 'apikeyRegenerateV1Request' is set
    if (apikeyRegenerateV1Request == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'apikeyRegenerateV1Request' when calling apikeyRegenerateV1",
        new ApiException(400, "Missing the required parameter 'apikeyRegenerateV1Request' when calling apikeyRegenerateV1"));
    }

    // create path and map variables
    String path = "/1/object/apikey/{pkiApikeyID}/regenerate".replaceAll("\\{" + "pkiApikeyID" + "\\}", apiInvoker.escapeString(pkiApikeyID.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "Authorization" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (ApikeyRegenerateV1Response) ApiInvoker.deserialize(localVarResponse, "", ApikeyRegenerateV1Response.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Regenerate the Apikey
   * 
   * @param pkiApikeyID    * @param apikeyRegenerateV1Request 
  */
  public void apikeyRegenerateV1 (Integer pkiApikeyID, ApikeyRegenerateV1Request apikeyRegenerateV1Request, final Response.Listener<ApikeyRegenerateV1Response> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = apikeyRegenerateV1Request;

    // verify the required parameter 'pkiApikeyID' is set
    if (pkiApikeyID == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'pkiApikeyID' when calling apikeyRegenerateV1",
        new ApiException(400, "Missing the required parameter 'pkiApikeyID' when calling apikeyRegenerateV1"));
    }
    // verify the required parameter 'apikeyRegenerateV1Request' is set
    if (apikeyRegenerateV1Request == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'apikeyRegenerateV1Request' when calling apikeyRegenerateV1",
        new ApiException(400, "Missing the required parameter 'apikeyRegenerateV1Request' when calling apikeyRegenerateV1"));
    }

    // create path and map variables
    String path = "/1/object/apikey/{pkiApikeyID}/regenerate".replaceAll("\\{format\\}","json").replaceAll("\\{" + "pkiApikeyID" + "\\}", apiInvoker.escapeString(pkiApikeyID.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "Authorization" };

    try {
      apiInvoker.invokeAPI(basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((ApikeyRegenerateV1Response) ApiInvoker.deserialize(localVarResponse,  "", ApikeyRegenerateV1Response.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
}
