/**
 * eZmax API Definition (Full)
 * This API expose all the functionnalities for the eZmax and eZsign applications.
 *
 * The version of the OpenAPI document: 1.1.18
 * Contact: support-api@ezmax.ca
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package org.openapitools.client.api;

import eZmaxAPI.ApiInvoker;
import eZmaxAPI.ApiException;
import eZmaxAPI.Pair;

import org.openapitools.client.model.*;

import java.util.*;

import com.android.volley.Response;
import com.android.volley.VolleyError;

import org.openapitools.client.model.CommonResponseError;
import java.io.File;
import org.openapitools.client.model.HeaderAcceptLanguage;
import org.openapitools.client.model.UserCreateObjectV1Request;
import org.openapitools.client.model.UserCreateObjectV1Response;
import org.openapitools.client.model.UserEditObjectV1Request;
import org.openapitools.client.model.UserEditObjectV1Response;
import org.openapitools.client.model.UserEditPermissionsV1Request;
import org.openapitools.client.model.UserEditPermissionsV1Response;
import org.openapitools.client.model.UserGetAutocompleteV2Response;
import org.openapitools.client.model.UserGetEffectivePermissionsV1Response;
import org.openapitools.client.model.UserGetListV1Response;
import org.openapitools.client.model.UserGetObjectV2Response;
import org.openapitools.client.model.UserGetPermissionsV1Response;
import org.openapitools.client.model.UserGetSubnetsV1Response;

import org.apache.http.HttpEntity;
import org.apache.http.entity.mime.MultipartEntityBuilder;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.concurrent.ExecutionException;
import java.util.concurrent.TimeoutException;

public class ObjectUserApi {
  String basePath = "https://prod.api.appcluster01.ca-central-1.ezmax.com/rest";
  ApiInvoker apiInvoker = ApiInvoker.getInstance();

  public void addHeader(String key, String value) {
    getInvoker().addDefaultHeader(key, value);
  }

  public ApiInvoker getInvoker() {
    return apiInvoker;
  }

  public void setBasePath(String basePath) {
    this.basePath = basePath;
  }

  public String getBasePath() {
    return basePath;
  }

  /**
  * Create a new User
  * The endpoint allows to create one or many elements at once.
   * @param userCreateObjectV1Request 
   * @return UserCreateObjectV1Response
  */
  public UserCreateObjectV1Response userCreateObjectV1 (UserCreateObjectV1Request userCreateObjectV1Request) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = userCreateObjectV1Request;
    // verify the required parameter 'userCreateObjectV1Request' is set
    if (userCreateObjectV1Request == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'userCreateObjectV1Request' when calling userCreateObjectV1",
        new ApiException(400, "Missing the required parameter 'userCreateObjectV1Request' when calling userCreateObjectV1"));
    }

    // create path and map variables
    String path = "/1/object/user";

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "Authorization" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (UserCreateObjectV1Response) ApiInvoker.deserialize(localVarResponse, "", UserCreateObjectV1Response.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Create a new User
   * The endpoint allows to create one or many elements at once.
   * @param userCreateObjectV1Request 
  */
  public void userCreateObjectV1 (UserCreateObjectV1Request userCreateObjectV1Request, final Response.Listener<UserCreateObjectV1Response> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = userCreateObjectV1Request;

    // verify the required parameter 'userCreateObjectV1Request' is set
    if (userCreateObjectV1Request == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'userCreateObjectV1Request' when calling userCreateObjectV1",
        new ApiException(400, "Missing the required parameter 'userCreateObjectV1Request' when calling userCreateObjectV1"));
    }

    // create path and map variables
    String path = "/1/object/user".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "Authorization" };

    try {
      apiInvoker.invokeAPI(basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((UserCreateObjectV1Response) ApiInvoker.deserialize(localVarResponse,  "", UserCreateObjectV1Response.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Edit an existing User
  * 
   * @param pkiUserID The unique ID of the User
   * @param userEditObjectV1Request 
   * @return UserEditObjectV1Response
  */
  public UserEditObjectV1Response userEditObjectV1 (Integer pkiUserID, UserEditObjectV1Request userEditObjectV1Request) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = userEditObjectV1Request;
    // verify the required parameter 'pkiUserID' is set
    if (pkiUserID == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'pkiUserID' when calling userEditObjectV1",
        new ApiException(400, "Missing the required parameter 'pkiUserID' when calling userEditObjectV1"));
    }
    // verify the required parameter 'userEditObjectV1Request' is set
    if (userEditObjectV1Request == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'userEditObjectV1Request' when calling userEditObjectV1",
        new ApiException(400, "Missing the required parameter 'userEditObjectV1Request' when calling userEditObjectV1"));
    }

    // create path and map variables
    String path = "/1/object/user/{pkiUserID}".replaceAll("\\{" + "pkiUserID" + "\\}", apiInvoker.escapeString(pkiUserID.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "Authorization" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "PUT", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (UserEditObjectV1Response) ApiInvoker.deserialize(localVarResponse, "", UserEditObjectV1Response.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Edit an existing User
   * 
   * @param pkiUserID The unique ID of the User   * @param userEditObjectV1Request 
  */
  public void userEditObjectV1 (Integer pkiUserID, UserEditObjectV1Request userEditObjectV1Request, final Response.Listener<UserEditObjectV1Response> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = userEditObjectV1Request;

    // verify the required parameter 'pkiUserID' is set
    if (pkiUserID == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'pkiUserID' when calling userEditObjectV1",
        new ApiException(400, "Missing the required parameter 'pkiUserID' when calling userEditObjectV1"));
    }
    // verify the required parameter 'userEditObjectV1Request' is set
    if (userEditObjectV1Request == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'userEditObjectV1Request' when calling userEditObjectV1",
        new ApiException(400, "Missing the required parameter 'userEditObjectV1Request' when calling userEditObjectV1"));
    }

    // create path and map variables
    String path = "/1/object/user/{pkiUserID}".replaceAll("\\{format\\}","json").replaceAll("\\{" + "pkiUserID" + "\\}", apiInvoker.escapeString(pkiUserID.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "Authorization" };

    try {
      apiInvoker.invokeAPI(basePath, path, "PUT", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((UserEditObjectV1Response) ApiInvoker.deserialize(localVarResponse,  "", UserEditObjectV1Response.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Edit multiple Permissions
  * Using this endpoint, you can edit multiple Permissions at the same time.
   * @param pkiUserID 
   * @param userEditPermissionsV1Request 
   * @return UserEditPermissionsV1Response
  */
  public UserEditPermissionsV1Response userEditPermissionsV1 (Integer pkiUserID, UserEditPermissionsV1Request userEditPermissionsV1Request) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = userEditPermissionsV1Request;
    // verify the required parameter 'pkiUserID' is set
    if (pkiUserID == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'pkiUserID' when calling userEditPermissionsV1",
        new ApiException(400, "Missing the required parameter 'pkiUserID' when calling userEditPermissionsV1"));
    }
    // verify the required parameter 'userEditPermissionsV1Request' is set
    if (userEditPermissionsV1Request == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'userEditPermissionsV1Request' when calling userEditPermissionsV1",
        new ApiException(400, "Missing the required parameter 'userEditPermissionsV1Request' when calling userEditPermissionsV1"));
    }

    // create path and map variables
    String path = "/1/object/user/{pkiUserID}/editPermissions".replaceAll("\\{" + "pkiUserID" + "\\}", apiInvoker.escapeString(pkiUserID.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "Authorization" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "PUT", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (UserEditPermissionsV1Response) ApiInvoker.deserialize(localVarResponse, "", UserEditPermissionsV1Response.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Edit multiple Permissions
   * Using this endpoint, you can edit multiple Permissions at the same time.
   * @param pkiUserID    * @param userEditPermissionsV1Request 
  */
  public void userEditPermissionsV1 (Integer pkiUserID, UserEditPermissionsV1Request userEditPermissionsV1Request, final Response.Listener<UserEditPermissionsV1Response> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = userEditPermissionsV1Request;

    // verify the required parameter 'pkiUserID' is set
    if (pkiUserID == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'pkiUserID' when calling userEditPermissionsV1",
        new ApiException(400, "Missing the required parameter 'pkiUserID' when calling userEditPermissionsV1"));
    }
    // verify the required parameter 'userEditPermissionsV1Request' is set
    if (userEditPermissionsV1Request == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'userEditPermissionsV1Request' when calling userEditPermissionsV1",
        new ApiException(400, "Missing the required parameter 'userEditPermissionsV1Request' when calling userEditPermissionsV1"));
    }

    // create path and map variables
    String path = "/1/object/user/{pkiUserID}/editPermissions".replaceAll("\\{format\\}","json").replaceAll("\\{" + "pkiUserID" + "\\}", apiInvoker.escapeString(pkiUserID.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "Authorization" };

    try {
      apiInvoker.invokeAPI(basePath, path, "PUT", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((UserEditPermissionsV1Response) ApiInvoker.deserialize(localVarResponse,  "", UserEditPermissionsV1Response.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Retrieve Users and IDs
  * Get the list of User to be used in a dropdown or autocomplete control.
   * @param sSelector The type of Users to return
   * @param eFilterActive Specify which results we want to display.
   * @param sQuery Allow to filter the returned results
   * @param acceptLanguage 
   * @return UserGetAutocompleteV2Response
  */
  public UserGetAutocompleteV2Response userGetAutocompleteV2 (String sSelector, String eFilterActive, String sQuery, HeaderAcceptLanguage acceptLanguage) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'sSelector' is set
    if (sSelector == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'sSelector' when calling userGetAutocompleteV2",
        new ApiException(400, "Missing the required parameter 'sSelector' when calling userGetAutocompleteV2"));
    }

    // create path and map variables
    String path = "/2/object/user/getAutocomplete/{sSelector}".replaceAll("\\{" + "sSelector" + "\\}", apiInvoker.escapeString(sSelector.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    queryParams.addAll(ApiInvoker.parameterToPairs("", "eFilterActive", eFilterActive));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "sQuery", sQuery));
    headerParams.put("Accept-Language", ApiInvoker.parameterToString(acceptLanguage));
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "Authorization" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (UserGetAutocompleteV2Response) ApiInvoker.deserialize(localVarResponse, "", UserGetAutocompleteV2Response.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Retrieve Users and IDs
   * Get the list of User to be used in a dropdown or autocomplete control.
   * @param sSelector The type of Users to return   * @param eFilterActive Specify which results we want to display.   * @param sQuery Allow to filter the returned results   * @param acceptLanguage 
  */
  public void userGetAutocompleteV2 (String sSelector, String eFilterActive, String sQuery, HeaderAcceptLanguage acceptLanguage, final Response.Listener<UserGetAutocompleteV2Response> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'sSelector' is set
    if (sSelector == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'sSelector' when calling userGetAutocompleteV2",
        new ApiException(400, "Missing the required parameter 'sSelector' when calling userGetAutocompleteV2"));
    }

    // create path and map variables
    String path = "/2/object/user/getAutocomplete/{sSelector}".replaceAll("\\{format\\}","json").replaceAll("\\{" + "sSelector" + "\\}", apiInvoker.escapeString(sSelector.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();

    queryParams.addAll(ApiInvoker.parameterToPairs("", "eFilterActive", eFilterActive));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "sQuery", sQuery));

    headerParams.put("Accept-Language", ApiInvoker.parameterToString(acceptLanguage));

    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "Authorization" };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((UserGetAutocompleteV2Response) ApiInvoker.deserialize(localVarResponse,  "", UserGetAutocompleteV2Response.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Retrieve an existing User&#39;s Effective Permissions
  * Effective Permissions refers to the combination of Permissions held by a User and the Permissions associated with the Usergroups they belong to.
   * @param pkiUserID 
   * @return UserGetEffectivePermissionsV1Response
  */
  public UserGetEffectivePermissionsV1Response userGetEffectivePermissionsV1 (Integer pkiUserID) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'pkiUserID' is set
    if (pkiUserID == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'pkiUserID' when calling userGetEffectivePermissionsV1",
        new ApiException(400, "Missing the required parameter 'pkiUserID' when calling userGetEffectivePermissionsV1"));
    }

    // create path and map variables
    String path = "/1/object/user/{pkiUserID}/getEffectivePermissions".replaceAll("\\{" + "pkiUserID" + "\\}", apiInvoker.escapeString(pkiUserID.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "Authorization" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (UserGetEffectivePermissionsV1Response) ApiInvoker.deserialize(localVarResponse, "", UserGetEffectivePermissionsV1Response.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Retrieve an existing User&#39;s Effective Permissions
   * Effective Permissions refers to the combination of Permissions held by a User and the Permissions associated with the Usergroups they belong to.
   * @param pkiUserID 
  */
  public void userGetEffectivePermissionsV1 (Integer pkiUserID, final Response.Listener<UserGetEffectivePermissionsV1Response> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'pkiUserID' is set
    if (pkiUserID == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'pkiUserID' when calling userGetEffectivePermissionsV1",
        new ApiException(400, "Missing the required parameter 'pkiUserID' when calling userGetEffectivePermissionsV1"));
    }

    // create path and map variables
    String path = "/1/object/user/{pkiUserID}/getEffectivePermissions".replaceAll("\\{format\\}","json").replaceAll("\\{" + "pkiUserID" + "\\}", apiInvoker.escapeString(pkiUserID.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "Authorization" };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((UserGetEffectivePermissionsV1Response) ApiInvoker.deserialize(localVarResponse,  "", UserGetEffectivePermissionsV1Response.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Retrieve User list
  * Enum values that can be filtered in query parameter *sFilter*:  | Variable | Valid values | |---|---| | eUserType | AgentBroker&lt;br&gt;Assistant&lt;br&gt;Employee&lt;br&gt;EzsignUser&lt;br&gt;Normal | | eUserOrigin | BuiltIn&lt;br&gt;External | | eUserEzsignaccess | No&lt;br&gt;PaidByOffice&lt;br&gt;PerDocument&lt;br&gt;Prepaid |
   * @param eOrderBy Specify how you want the results to be sorted
   * @param iRowMax 
   * @param iRowOffset 
   * @param acceptLanguage 
   * @param sFilter 
   * @return UserGetListV1Response
  */
  public UserGetListV1Response userGetListV1 (String eOrderBy, Integer iRowMax, Integer iRowOffset, HeaderAcceptLanguage acceptLanguage, String sFilter) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;

    // create path and map variables
    String path = "/1/object/user/getList";

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    queryParams.addAll(ApiInvoker.parameterToPairs("", "eOrderBy", eOrderBy));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "iRowMax", iRowMax));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "iRowOffset", iRowOffset));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "sFilter", sFilter));
    headerParams.put("Accept-Language", ApiInvoker.parameterToString(acceptLanguage));
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "Authorization" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (UserGetListV1Response) ApiInvoker.deserialize(localVarResponse, "", UserGetListV1Response.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Retrieve User list
   * Enum values that can be filtered in query parameter *sFilter*:  | Variable | Valid values | |---|---| | eUserType | AgentBroker&lt;br&gt;Assistant&lt;br&gt;Employee&lt;br&gt;EzsignUser&lt;br&gt;Normal | | eUserOrigin | BuiltIn&lt;br&gt;External | | eUserEzsignaccess | No&lt;br&gt;PaidByOffice&lt;br&gt;PerDocument&lt;br&gt;Prepaid |
   * @param eOrderBy Specify how you want the results to be sorted   * @param iRowMax    * @param iRowOffset    * @param acceptLanguage    * @param sFilter 
  */
  public void userGetListV1 (String eOrderBy, Integer iRowMax, Integer iRowOffset, HeaderAcceptLanguage acceptLanguage, String sFilter, final Response.Listener<UserGetListV1Response> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;


    // create path and map variables
    String path = "/1/object/user/getList".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();

    queryParams.addAll(ApiInvoker.parameterToPairs("", "eOrderBy", eOrderBy));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "iRowMax", iRowMax));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "iRowOffset", iRowOffset));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "sFilter", sFilter));

    headerParams.put("Accept-Language", ApiInvoker.parameterToString(acceptLanguage));

    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "Authorization" };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((UserGetListV1Response) ApiInvoker.deserialize(localVarResponse,  "", UserGetListV1Response.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Retrieve an existing User
  * 
   * @param pkiUserID The unique ID of the User
   * @return UserGetObjectV2Response
  */
  public UserGetObjectV2Response userGetObjectV2 (Integer pkiUserID) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'pkiUserID' is set
    if (pkiUserID == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'pkiUserID' when calling userGetObjectV2",
        new ApiException(400, "Missing the required parameter 'pkiUserID' when calling userGetObjectV2"));
    }

    // create path and map variables
    String path = "/2/object/user/{pkiUserID}".replaceAll("\\{" + "pkiUserID" + "\\}", apiInvoker.escapeString(pkiUserID.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "Authorization" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (UserGetObjectV2Response) ApiInvoker.deserialize(localVarResponse, "", UserGetObjectV2Response.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Retrieve an existing User
   * 
   * @param pkiUserID The unique ID of the User
  */
  public void userGetObjectV2 (Integer pkiUserID, final Response.Listener<UserGetObjectV2Response> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'pkiUserID' is set
    if (pkiUserID == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'pkiUserID' when calling userGetObjectV2",
        new ApiException(400, "Missing the required parameter 'pkiUserID' when calling userGetObjectV2"));
    }

    // create path and map variables
    String path = "/2/object/user/{pkiUserID}".replaceAll("\\{format\\}","json").replaceAll("\\{" + "pkiUserID" + "\\}", apiInvoker.escapeString(pkiUserID.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "Authorization" };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((UserGetObjectV2Response) ApiInvoker.deserialize(localVarResponse,  "", UserGetObjectV2Response.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Retrieve an existing User&#39;s Permissions
  * 
   * @param pkiUserID 
   * @return UserGetPermissionsV1Response
  */
  public UserGetPermissionsV1Response userGetPermissionsV1 (Integer pkiUserID) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'pkiUserID' is set
    if (pkiUserID == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'pkiUserID' when calling userGetPermissionsV1",
        new ApiException(400, "Missing the required parameter 'pkiUserID' when calling userGetPermissionsV1"));
    }

    // create path and map variables
    String path = "/1/object/user/{pkiUserID}/getPermissions".replaceAll("\\{" + "pkiUserID" + "\\}", apiInvoker.escapeString(pkiUserID.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "Authorization" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (UserGetPermissionsV1Response) ApiInvoker.deserialize(localVarResponse, "", UserGetPermissionsV1Response.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Retrieve an existing User&#39;s Permissions
   * 
   * @param pkiUserID 
  */
  public void userGetPermissionsV1 (Integer pkiUserID, final Response.Listener<UserGetPermissionsV1Response> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'pkiUserID' is set
    if (pkiUserID == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'pkiUserID' when calling userGetPermissionsV1",
        new ApiException(400, "Missing the required parameter 'pkiUserID' when calling userGetPermissionsV1"));
    }

    // create path and map variables
    String path = "/1/object/user/{pkiUserID}/getPermissions".replaceAll("\\{format\\}","json").replaceAll("\\{" + "pkiUserID" + "\\}", apiInvoker.escapeString(pkiUserID.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "Authorization" };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((UserGetPermissionsV1Response) ApiInvoker.deserialize(localVarResponse,  "", UserGetPermissionsV1Response.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Retrieve an existing User&#39;s Subnets
  * 
   * @param pkiUserID 
   * @return UserGetSubnetsV1Response
  */
  public UserGetSubnetsV1Response userGetSubnetsV1 (Integer pkiUserID) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'pkiUserID' is set
    if (pkiUserID == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'pkiUserID' when calling userGetSubnetsV1",
        new ApiException(400, "Missing the required parameter 'pkiUserID' when calling userGetSubnetsV1"));
    }

    // create path and map variables
    String path = "/1/object/user/{pkiUserID}/getSubnets".replaceAll("\\{" + "pkiUserID" + "\\}", apiInvoker.escapeString(pkiUserID.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "Authorization" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (UserGetSubnetsV1Response) ApiInvoker.deserialize(localVarResponse, "", UserGetSubnetsV1Response.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Retrieve an existing User&#39;s Subnets
   * 
   * @param pkiUserID 
  */
  public void userGetSubnetsV1 (Integer pkiUserID, final Response.Listener<UserGetSubnetsV1Response> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'pkiUserID' is set
    if (pkiUserID == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'pkiUserID' when calling userGetSubnetsV1",
        new ApiException(400, "Missing the required parameter 'pkiUserID' when calling userGetSubnetsV1"));
    }

    // create path and map variables
    String path = "/1/object/user/{pkiUserID}/getSubnets".replaceAll("\\{format\\}","json").replaceAll("\\{" + "pkiUserID" + "\\}", apiInvoker.escapeString(pkiUserID.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "Authorization" };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((UserGetSubnetsV1Response) ApiInvoker.deserialize(localVarResponse,  "", UserGetSubnetsV1Response.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
}
