/**
 * eZmax API Definition (Full)
 * This API expose all the functionnalities for the eZmax and eZsign applications.
 *
 * The version of the OpenAPI document: 1.2.2
 * Contact: support-api@ezmax.ca
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package org.openapitools.client.api;

import eZmaxAPI.ApiInvoker;
import eZmaxAPI.ApiException;
import eZmaxAPI.Pair;

import org.openapitools.client.model.*;

import java.util.*;

import com.android.volley.Response;
import com.android.volley.VolleyError;

import org.openapitools.client.model.CommonResponseError;
import org.openapitools.client.model.EzdoctemplatedocumentCreateObjectV1Request;
import org.openapitools.client.model.EzdoctemplatedocumentCreateObjectV1Response;
import org.openapitools.client.model.EzdoctemplatedocumentEditObjectV1Request;
import org.openapitools.client.model.EzdoctemplatedocumentEditObjectV1Response;
import org.openapitools.client.model.EzdoctemplatedocumentGetAutocompleteV2Response;
import org.openapitools.client.model.EzdoctemplatedocumentGetListV1Response;
import org.openapitools.client.model.EzdoctemplatedocumentGetObjectV2Response;
import org.openapitools.client.model.EzdoctemplatedocumentPatchObjectV1Request;
import org.openapitools.client.model.EzdoctemplatedocumentPatchObjectV1Response;
import java.io.File;
import org.openapitools.client.model.HeaderAcceptLanguage;

import org.apache.http.HttpEntity;
import org.apache.http.entity.mime.MultipartEntityBuilder;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.concurrent.ExecutionException;
import java.util.concurrent.TimeoutException;

public class ObjectEzdoctemplatedocumentApi {
  String basePath = "https://prod.api.appcluster01.ca-central-1.ezmax.com/rest";
  ApiInvoker apiInvoker = ApiInvoker.getInstance();

  public void addHeader(String key, String value) {
    getInvoker().addDefaultHeader(key, value);
  }

  public ApiInvoker getInvoker() {
    return apiInvoker;
  }

  public void setBasePath(String basePath) {
    this.basePath = basePath;
  }

  public String getBasePath() {
    return basePath;
  }

  /**
  * Create a new Ezdoctemplatedocument
  * The endpoint allows to create one or many elements at once.
   * @param ezdoctemplatedocumentCreateObjectV1Request 
   * @return EzdoctemplatedocumentCreateObjectV1Response
  */
  public EzdoctemplatedocumentCreateObjectV1Response ezdoctemplatedocumentCreateObjectV1 (EzdoctemplatedocumentCreateObjectV1Request ezdoctemplatedocumentCreateObjectV1Request) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = ezdoctemplatedocumentCreateObjectV1Request;
    // verify the required parameter 'ezdoctemplatedocumentCreateObjectV1Request' is set
    if (ezdoctemplatedocumentCreateObjectV1Request == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'ezdoctemplatedocumentCreateObjectV1Request' when calling ezdoctemplatedocumentCreateObjectV1",
        new ApiException(400, "Missing the required parameter 'ezdoctemplatedocumentCreateObjectV1Request' when calling ezdoctemplatedocumentCreateObjectV1"));
    }

    // create path and map variables
    String path = "/1/object/ezdoctemplatedocument";

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "Authorization" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (EzdoctemplatedocumentCreateObjectV1Response) ApiInvoker.deserialize(localVarResponse, "", EzdoctemplatedocumentCreateObjectV1Response.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Create a new Ezdoctemplatedocument
   * The endpoint allows to create one or many elements at once.
   * @param ezdoctemplatedocumentCreateObjectV1Request 
  */
  public void ezdoctemplatedocumentCreateObjectV1 (EzdoctemplatedocumentCreateObjectV1Request ezdoctemplatedocumentCreateObjectV1Request, final Response.Listener<EzdoctemplatedocumentCreateObjectV1Response> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = ezdoctemplatedocumentCreateObjectV1Request;

    // verify the required parameter 'ezdoctemplatedocumentCreateObjectV1Request' is set
    if (ezdoctemplatedocumentCreateObjectV1Request == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'ezdoctemplatedocumentCreateObjectV1Request' when calling ezdoctemplatedocumentCreateObjectV1",
        new ApiException(400, "Missing the required parameter 'ezdoctemplatedocumentCreateObjectV1Request' when calling ezdoctemplatedocumentCreateObjectV1"));
    }

    // create path and map variables
    String path = "/1/object/ezdoctemplatedocument".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "Authorization" };

    try {
      apiInvoker.invokeAPI(basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((EzdoctemplatedocumentCreateObjectV1Response) ApiInvoker.deserialize(localVarResponse,  "", EzdoctemplatedocumentCreateObjectV1Response.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Retrieve the content
  * Using this endpoint, you can retrieve the content of an ezdoctemplatedocument.
   * @param pkiEzdoctemplatedocumentID 
   * @return void
  */
  public void ezdoctemplatedocumentDownloadV1 (Integer pkiEzdoctemplatedocumentID) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'pkiEzdoctemplatedocumentID' is set
    if (pkiEzdoctemplatedocumentID == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'pkiEzdoctemplatedocumentID' when calling ezdoctemplatedocumentDownloadV1",
        new ApiException(400, "Missing the required parameter 'pkiEzdoctemplatedocumentID' when calling ezdoctemplatedocumentDownloadV1"));
    }

    // create path and map variables
    String path = "/1/object/ezdoctemplatedocument/{pkiEzdoctemplatedocumentID}/download".replaceAll("\\{" + "pkiEzdoctemplatedocumentID" + "\\}", apiInvoker.escapeString(pkiEzdoctemplatedocumentID.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "Authorization", "Presigned" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return ;
      } else {
         return ;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Retrieve the content
   * Using this endpoint, you can retrieve the content of an ezdoctemplatedocument.
   * @param pkiEzdoctemplatedocumentID 
  */
  public void ezdoctemplatedocumentDownloadV1 (Integer pkiEzdoctemplatedocumentID, final Response.Listener<String> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'pkiEzdoctemplatedocumentID' is set
    if (pkiEzdoctemplatedocumentID == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'pkiEzdoctemplatedocumentID' when calling ezdoctemplatedocumentDownloadV1",
        new ApiException(400, "Missing the required parameter 'pkiEzdoctemplatedocumentID' when calling ezdoctemplatedocumentDownloadV1"));
    }

    // create path and map variables
    String path = "/1/object/ezdoctemplatedocument/{pkiEzdoctemplatedocumentID}/download".replaceAll("\\{format\\}","json").replaceAll("\\{" + "pkiEzdoctemplatedocumentID" + "\\}", apiInvoker.escapeString(pkiEzdoctemplatedocumentID.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "Authorization", "Presigned" };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
              responseListener.onResponse(localVarResponse);
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Edit an existing Ezdoctemplatedocument
  * 
   * @param pkiEzdoctemplatedocumentID The unique ID of the Ezdoctemplatedocument
   * @param ezdoctemplatedocumentEditObjectV1Request 
   * @return EzdoctemplatedocumentEditObjectV1Response
  */
  public EzdoctemplatedocumentEditObjectV1Response ezdoctemplatedocumentEditObjectV1 (Integer pkiEzdoctemplatedocumentID, EzdoctemplatedocumentEditObjectV1Request ezdoctemplatedocumentEditObjectV1Request) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = ezdoctemplatedocumentEditObjectV1Request;
    // verify the required parameter 'pkiEzdoctemplatedocumentID' is set
    if (pkiEzdoctemplatedocumentID == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'pkiEzdoctemplatedocumentID' when calling ezdoctemplatedocumentEditObjectV1",
        new ApiException(400, "Missing the required parameter 'pkiEzdoctemplatedocumentID' when calling ezdoctemplatedocumentEditObjectV1"));
    }
    // verify the required parameter 'ezdoctemplatedocumentEditObjectV1Request' is set
    if (ezdoctemplatedocumentEditObjectV1Request == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'ezdoctemplatedocumentEditObjectV1Request' when calling ezdoctemplatedocumentEditObjectV1",
        new ApiException(400, "Missing the required parameter 'ezdoctemplatedocumentEditObjectV1Request' when calling ezdoctemplatedocumentEditObjectV1"));
    }

    // create path and map variables
    String path = "/1/object/ezdoctemplatedocument/{pkiEzdoctemplatedocumentID}".replaceAll("\\{" + "pkiEzdoctemplatedocumentID" + "\\}", apiInvoker.escapeString(pkiEzdoctemplatedocumentID.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "Authorization" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "PUT", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (EzdoctemplatedocumentEditObjectV1Response) ApiInvoker.deserialize(localVarResponse, "", EzdoctemplatedocumentEditObjectV1Response.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Edit an existing Ezdoctemplatedocument
   * 
   * @param pkiEzdoctemplatedocumentID The unique ID of the Ezdoctemplatedocument   * @param ezdoctemplatedocumentEditObjectV1Request 
  */
  public void ezdoctemplatedocumentEditObjectV1 (Integer pkiEzdoctemplatedocumentID, EzdoctemplatedocumentEditObjectV1Request ezdoctemplatedocumentEditObjectV1Request, final Response.Listener<EzdoctemplatedocumentEditObjectV1Response> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = ezdoctemplatedocumentEditObjectV1Request;

    // verify the required parameter 'pkiEzdoctemplatedocumentID' is set
    if (pkiEzdoctemplatedocumentID == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'pkiEzdoctemplatedocumentID' when calling ezdoctemplatedocumentEditObjectV1",
        new ApiException(400, "Missing the required parameter 'pkiEzdoctemplatedocumentID' when calling ezdoctemplatedocumentEditObjectV1"));
    }
    // verify the required parameter 'ezdoctemplatedocumentEditObjectV1Request' is set
    if (ezdoctemplatedocumentEditObjectV1Request == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'ezdoctemplatedocumentEditObjectV1Request' when calling ezdoctemplatedocumentEditObjectV1",
        new ApiException(400, "Missing the required parameter 'ezdoctemplatedocumentEditObjectV1Request' when calling ezdoctemplatedocumentEditObjectV1"));
    }

    // create path and map variables
    String path = "/1/object/ezdoctemplatedocument/{pkiEzdoctemplatedocumentID}".replaceAll("\\{format\\}","json").replaceAll("\\{" + "pkiEzdoctemplatedocumentID" + "\\}", apiInvoker.escapeString(pkiEzdoctemplatedocumentID.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "Authorization" };

    try {
      apiInvoker.invokeAPI(basePath, path, "PUT", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((EzdoctemplatedocumentEditObjectV1Response) ApiInvoker.deserialize(localVarResponse,  "", EzdoctemplatedocumentEditObjectV1Response.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Retrieve Ezdoctemplatedocuments and IDs
  * Get the list of Ezdoctemplatedocument to be used in a dropdown or autocomplete control.
   * @param sSelector The type of Ezdoctemplatedocuments to return
   * @param eType The type of Ezdoctemplatedocument
   * @param fkiEzsignfoldertypeID Specify which fkiEzsignfoldertypeID we want to display. only used when eType &#x3D; Ezsignfoldertype
   * @param eFilterActive Specify which results we want to display.
   * @param sQuery Allow to filter the returned results
   * @param acceptLanguage 
   * @return EzdoctemplatedocumentGetAutocompleteV2Response
  */
  public EzdoctemplatedocumentGetAutocompleteV2Response ezdoctemplatedocumentGetAutocompleteV2 (String sSelector, String eType, String fkiEzsignfoldertypeID, String eFilterActive, String sQuery, HeaderAcceptLanguage acceptLanguage) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'sSelector' is set
    if (sSelector == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'sSelector' when calling ezdoctemplatedocumentGetAutocompleteV2",
        new ApiException(400, "Missing the required parameter 'sSelector' when calling ezdoctemplatedocumentGetAutocompleteV2"));
    }
    // verify the required parameter 'eType' is set
    if (eType == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'eType' when calling ezdoctemplatedocumentGetAutocompleteV2",
        new ApiException(400, "Missing the required parameter 'eType' when calling ezdoctemplatedocumentGetAutocompleteV2"));
    }

    // create path and map variables
    String path = "/2/object/ezdoctemplatedocument/getAutocomplete/{sSelector}".replaceAll("\\{" + "sSelector" + "\\}", apiInvoker.escapeString(sSelector.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    queryParams.addAll(ApiInvoker.parameterToPairs("", "fkiEzsignfoldertypeID", fkiEzsignfoldertypeID));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "eType", eType));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "eFilterActive", eFilterActive));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "sQuery", sQuery));
    headerParams.put("Accept-Language", ApiInvoker.parameterToString(acceptLanguage));
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "Authorization" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (EzdoctemplatedocumentGetAutocompleteV2Response) ApiInvoker.deserialize(localVarResponse, "", EzdoctemplatedocumentGetAutocompleteV2Response.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Retrieve Ezdoctemplatedocuments and IDs
   * Get the list of Ezdoctemplatedocument to be used in a dropdown or autocomplete control.
   * @param sSelector The type of Ezdoctemplatedocuments to return   * @param eType The type of Ezdoctemplatedocument   * @param fkiEzsignfoldertypeID Specify which fkiEzsignfoldertypeID we want to display. only used when eType &#x3D; Ezsignfoldertype   * @param eFilterActive Specify which results we want to display.   * @param sQuery Allow to filter the returned results   * @param acceptLanguage 
  */
  public void ezdoctemplatedocumentGetAutocompleteV2 (String sSelector, String eType, String fkiEzsignfoldertypeID, String eFilterActive, String sQuery, HeaderAcceptLanguage acceptLanguage, final Response.Listener<EzdoctemplatedocumentGetAutocompleteV2Response> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'sSelector' is set
    if (sSelector == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'sSelector' when calling ezdoctemplatedocumentGetAutocompleteV2",
        new ApiException(400, "Missing the required parameter 'sSelector' when calling ezdoctemplatedocumentGetAutocompleteV2"));
    }
    // verify the required parameter 'eType' is set
    if (eType == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'eType' when calling ezdoctemplatedocumentGetAutocompleteV2",
        new ApiException(400, "Missing the required parameter 'eType' when calling ezdoctemplatedocumentGetAutocompleteV2"));
    }

    // create path and map variables
    String path = "/2/object/ezdoctemplatedocument/getAutocomplete/{sSelector}".replaceAll("\\{format\\}","json").replaceAll("\\{" + "sSelector" + "\\}", apiInvoker.escapeString(sSelector.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();

    queryParams.addAll(ApiInvoker.parameterToPairs("", "fkiEzsignfoldertypeID", fkiEzsignfoldertypeID));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "eType", eType));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "eFilterActive", eFilterActive));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "sQuery", sQuery));

    headerParams.put("Accept-Language", ApiInvoker.parameterToString(acceptLanguage));

    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "Authorization" };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((EzdoctemplatedocumentGetAutocompleteV2Response) ApiInvoker.deserialize(localVarResponse,  "", EzdoctemplatedocumentGetAutocompleteV2Response.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Retrieve Ezdoctemplatedocument list
  * 
   * @param eOrderBy Specify how you want the results to be sorted
   * @param iRowMax 
   * @param iRowOffset 
   * @param acceptLanguage 
   * @param sFilter 
   * @return EzdoctemplatedocumentGetListV1Response
  */
  public EzdoctemplatedocumentGetListV1Response ezdoctemplatedocumentGetListV1 (String eOrderBy, Integer iRowMax, Integer iRowOffset, HeaderAcceptLanguage acceptLanguage, String sFilter) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;

    // create path and map variables
    String path = "/1/object/ezdoctemplatedocument/getList";

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    queryParams.addAll(ApiInvoker.parameterToPairs("", "eOrderBy", eOrderBy));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "iRowMax", iRowMax));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "iRowOffset", iRowOffset));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "sFilter", sFilter));
    headerParams.put("Accept-Language", ApiInvoker.parameterToString(acceptLanguage));
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "Authorization" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (EzdoctemplatedocumentGetListV1Response) ApiInvoker.deserialize(localVarResponse, "", EzdoctemplatedocumentGetListV1Response.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Retrieve Ezdoctemplatedocument list
   * 
   * @param eOrderBy Specify how you want the results to be sorted   * @param iRowMax    * @param iRowOffset    * @param acceptLanguage    * @param sFilter 
  */
  public void ezdoctemplatedocumentGetListV1 (String eOrderBy, Integer iRowMax, Integer iRowOffset, HeaderAcceptLanguage acceptLanguage, String sFilter, final Response.Listener<EzdoctemplatedocumentGetListV1Response> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;


    // create path and map variables
    String path = "/1/object/ezdoctemplatedocument/getList".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();

    queryParams.addAll(ApiInvoker.parameterToPairs("", "eOrderBy", eOrderBy));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "iRowMax", iRowMax));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "iRowOffset", iRowOffset));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "sFilter", sFilter));

    headerParams.put("Accept-Language", ApiInvoker.parameterToString(acceptLanguage));

    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "Authorization" };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((EzdoctemplatedocumentGetListV1Response) ApiInvoker.deserialize(localVarResponse,  "", EzdoctemplatedocumentGetListV1Response.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Retrieve an existing Ezdoctemplatedocument
  * 
   * @param pkiEzdoctemplatedocumentID The unique ID of the Ezdoctemplatedocument
   * @return EzdoctemplatedocumentGetObjectV2Response
  */
  public EzdoctemplatedocumentGetObjectV2Response ezdoctemplatedocumentGetObjectV2 (Integer pkiEzdoctemplatedocumentID) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'pkiEzdoctemplatedocumentID' is set
    if (pkiEzdoctemplatedocumentID == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'pkiEzdoctemplatedocumentID' when calling ezdoctemplatedocumentGetObjectV2",
        new ApiException(400, "Missing the required parameter 'pkiEzdoctemplatedocumentID' when calling ezdoctemplatedocumentGetObjectV2"));
    }

    // create path and map variables
    String path = "/2/object/ezdoctemplatedocument/{pkiEzdoctemplatedocumentID}".replaceAll("\\{" + "pkiEzdoctemplatedocumentID" + "\\}", apiInvoker.escapeString(pkiEzdoctemplatedocumentID.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "Authorization" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (EzdoctemplatedocumentGetObjectV2Response) ApiInvoker.deserialize(localVarResponse, "", EzdoctemplatedocumentGetObjectV2Response.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Retrieve an existing Ezdoctemplatedocument
   * 
   * @param pkiEzdoctemplatedocumentID The unique ID of the Ezdoctemplatedocument
  */
  public void ezdoctemplatedocumentGetObjectV2 (Integer pkiEzdoctemplatedocumentID, final Response.Listener<EzdoctemplatedocumentGetObjectV2Response> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'pkiEzdoctemplatedocumentID' is set
    if (pkiEzdoctemplatedocumentID == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'pkiEzdoctemplatedocumentID' when calling ezdoctemplatedocumentGetObjectV2",
        new ApiException(400, "Missing the required parameter 'pkiEzdoctemplatedocumentID' when calling ezdoctemplatedocumentGetObjectV2"));
    }

    // create path and map variables
    String path = "/2/object/ezdoctemplatedocument/{pkiEzdoctemplatedocumentID}".replaceAll("\\{format\\}","json").replaceAll("\\{" + "pkiEzdoctemplatedocumentID" + "\\}", apiInvoker.escapeString(pkiEzdoctemplatedocumentID.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "Authorization" };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((EzdoctemplatedocumentGetObjectV2Response) ApiInvoker.deserialize(localVarResponse,  "", EzdoctemplatedocumentGetObjectV2Response.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Patch an existing Ezdoctemplatedocument
  * 
   * @param pkiEzdoctemplatedocumentID The unique ID of the Ezdoctemplatedocument
   * @param ezdoctemplatedocumentPatchObjectV1Request 
   * @return EzdoctemplatedocumentPatchObjectV1Response
  */
  public EzdoctemplatedocumentPatchObjectV1Response ezdoctemplatedocumentPatchObjectV1 (Integer pkiEzdoctemplatedocumentID, EzdoctemplatedocumentPatchObjectV1Request ezdoctemplatedocumentPatchObjectV1Request) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = ezdoctemplatedocumentPatchObjectV1Request;
    // verify the required parameter 'pkiEzdoctemplatedocumentID' is set
    if (pkiEzdoctemplatedocumentID == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'pkiEzdoctemplatedocumentID' when calling ezdoctemplatedocumentPatchObjectV1",
        new ApiException(400, "Missing the required parameter 'pkiEzdoctemplatedocumentID' when calling ezdoctemplatedocumentPatchObjectV1"));
    }
    // verify the required parameter 'ezdoctemplatedocumentPatchObjectV1Request' is set
    if (ezdoctemplatedocumentPatchObjectV1Request == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'ezdoctemplatedocumentPatchObjectV1Request' when calling ezdoctemplatedocumentPatchObjectV1",
        new ApiException(400, "Missing the required parameter 'ezdoctemplatedocumentPatchObjectV1Request' when calling ezdoctemplatedocumentPatchObjectV1"));
    }

    // create path and map variables
    String path = "/1/object/ezdoctemplatedocument/{pkiEzdoctemplatedocumentID}".replaceAll("\\{" + "pkiEzdoctemplatedocumentID" + "\\}", apiInvoker.escapeString(pkiEzdoctemplatedocumentID.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "Authorization" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "PATCH", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (EzdoctemplatedocumentPatchObjectV1Response) ApiInvoker.deserialize(localVarResponse, "", EzdoctemplatedocumentPatchObjectV1Response.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Patch an existing Ezdoctemplatedocument
   * 
   * @param pkiEzdoctemplatedocumentID The unique ID of the Ezdoctemplatedocument   * @param ezdoctemplatedocumentPatchObjectV1Request 
  */
  public void ezdoctemplatedocumentPatchObjectV1 (Integer pkiEzdoctemplatedocumentID, EzdoctemplatedocumentPatchObjectV1Request ezdoctemplatedocumentPatchObjectV1Request, final Response.Listener<EzdoctemplatedocumentPatchObjectV1Response> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = ezdoctemplatedocumentPatchObjectV1Request;

    // verify the required parameter 'pkiEzdoctemplatedocumentID' is set
    if (pkiEzdoctemplatedocumentID == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'pkiEzdoctemplatedocumentID' when calling ezdoctemplatedocumentPatchObjectV1",
        new ApiException(400, "Missing the required parameter 'pkiEzdoctemplatedocumentID' when calling ezdoctemplatedocumentPatchObjectV1"));
    }
    // verify the required parameter 'ezdoctemplatedocumentPatchObjectV1Request' is set
    if (ezdoctemplatedocumentPatchObjectV1Request == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'ezdoctemplatedocumentPatchObjectV1Request' when calling ezdoctemplatedocumentPatchObjectV1",
        new ApiException(400, "Missing the required parameter 'ezdoctemplatedocumentPatchObjectV1Request' when calling ezdoctemplatedocumentPatchObjectV1"));
    }

    // create path and map variables
    String path = "/1/object/ezdoctemplatedocument/{pkiEzdoctemplatedocumentID}".replaceAll("\\{format\\}","json").replaceAll("\\{" + "pkiEzdoctemplatedocumentID" + "\\}", apiInvoker.escapeString(pkiEzdoctemplatedocumentID.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "Authorization" };

    try {
      apiInvoker.invokeAPI(basePath, path, "PATCH", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((EzdoctemplatedocumentPatchObjectV1Response) ApiInvoker.deserialize(localVarResponse,  "", EzdoctemplatedocumentPatchObjectV1Response.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
}
