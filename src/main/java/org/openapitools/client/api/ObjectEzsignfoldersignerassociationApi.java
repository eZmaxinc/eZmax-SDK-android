/**
 * eZmax API Definition (Full)
 * This API expose all the functionnalities for the eZmax and eZsign applications.
 *
 * The version of the OpenAPI document: 1.2.1
 * Contact: support-api@ezmax.ca
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package org.openapitools.client.api;

import eZmaxAPI.ApiInvoker;
import eZmaxAPI.ApiException;
import eZmaxAPI.Pair;

import org.openapitools.client.model.*;

import java.util.*;

import com.android.volley.Response;
import com.android.volley.VolleyError;

import org.openapitools.client.model.CommonResponse;
import org.openapitools.client.model.CommonResponseError;
import org.openapitools.client.model.EzsignfoldersignerassociationCreateEmbeddedUrlV1Request;
import org.openapitools.client.model.EzsignfoldersignerassociationCreateEmbeddedUrlV1Response;
import org.openapitools.client.model.EzsignfoldersignerassociationCreateObjectV1Request;
import org.openapitools.client.model.EzsignfoldersignerassociationCreateObjectV1Response;
import org.openapitools.client.model.EzsignfoldersignerassociationCreateObjectV2Request;
import org.openapitools.client.model.EzsignfoldersignerassociationCreateObjectV2Response;
import org.openapitools.client.model.EzsignfoldersignerassociationEditObjectV1Request;
import org.openapitools.client.model.EzsignfoldersignerassociationGetInPersonLoginUrlV1Response;
import org.openapitools.client.model.EzsignfoldersignerassociationGetObjectV1Response;
import org.openapitools.client.model.EzsignfoldersignerassociationGetObjectV2Response;
import org.openapitools.client.model.EzsignfoldersignerassociationPatchObjectV1Request;
import org.openapitools.client.model.EzsignfoldersignerassociationReassignV1Request;
import java.util.*;

import org.apache.http.HttpEntity;
import org.apache.http.entity.mime.MultipartEntityBuilder;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.concurrent.ExecutionException;
import java.util.concurrent.TimeoutException;

public class ObjectEzsignfoldersignerassociationApi {
  String basePath = "https://prod.api.appcluster01.ca-central-1.ezmax.com/rest";
  ApiInvoker apiInvoker = ApiInvoker.getInstance();

  public void addHeader(String key, String value) {
    getInvoker().addDefaultHeader(key, value);
  }

  public ApiInvoker getInvoker() {
    return apiInvoker;
  }

  public void setBasePath(String basePath) {
    this.basePath = basePath;
  }

  public String getBasePath() {
    return basePath;
  }

  /**
  * Creates an Url to allow embedded signing
  * This endpoint creates an Url that can be used in a browser or embedded in an I-Frame to allow signing.  The signer Login type must be configured as Embedded.
   * @param pkiEzsignfoldersignerassociationID 
   * @param ezsignfoldersignerassociationCreateEmbeddedUrlV1Request 
   * @return EzsignfoldersignerassociationCreateEmbeddedUrlV1Response
  */
  public EzsignfoldersignerassociationCreateEmbeddedUrlV1Response ezsignfoldersignerassociationCreateEmbeddedUrlV1 (Integer pkiEzsignfoldersignerassociationID, EzsignfoldersignerassociationCreateEmbeddedUrlV1Request ezsignfoldersignerassociationCreateEmbeddedUrlV1Request) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = ezsignfoldersignerassociationCreateEmbeddedUrlV1Request;
    // verify the required parameter 'pkiEzsignfoldersignerassociationID' is set
    if (pkiEzsignfoldersignerassociationID == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'pkiEzsignfoldersignerassociationID' when calling ezsignfoldersignerassociationCreateEmbeddedUrlV1",
        new ApiException(400, "Missing the required parameter 'pkiEzsignfoldersignerassociationID' when calling ezsignfoldersignerassociationCreateEmbeddedUrlV1"));
    }
    // verify the required parameter 'ezsignfoldersignerassociationCreateEmbeddedUrlV1Request' is set
    if (ezsignfoldersignerassociationCreateEmbeddedUrlV1Request == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'ezsignfoldersignerassociationCreateEmbeddedUrlV1Request' when calling ezsignfoldersignerassociationCreateEmbeddedUrlV1",
        new ApiException(400, "Missing the required parameter 'ezsignfoldersignerassociationCreateEmbeddedUrlV1Request' when calling ezsignfoldersignerassociationCreateEmbeddedUrlV1"));
    }

    // create path and map variables
    String path = "/1/object/ezsignfoldersignerassociation/{pkiEzsignfoldersignerassociationID}/createEmbeddedUrl".replaceAll("\\{" + "pkiEzsignfoldersignerassociationID" + "\\}", apiInvoker.escapeString(pkiEzsignfoldersignerassociationID.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "Authorization" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (EzsignfoldersignerassociationCreateEmbeddedUrlV1Response) ApiInvoker.deserialize(localVarResponse, "", EzsignfoldersignerassociationCreateEmbeddedUrlV1Response.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Creates an Url to allow embedded signing
   * This endpoint creates an Url that can be used in a browser or embedded in an I-Frame to allow signing.  The signer Login type must be configured as Embedded.
   * @param pkiEzsignfoldersignerassociationID    * @param ezsignfoldersignerassociationCreateEmbeddedUrlV1Request 
  */
  public void ezsignfoldersignerassociationCreateEmbeddedUrlV1 (Integer pkiEzsignfoldersignerassociationID, EzsignfoldersignerassociationCreateEmbeddedUrlV1Request ezsignfoldersignerassociationCreateEmbeddedUrlV1Request, final Response.Listener<EzsignfoldersignerassociationCreateEmbeddedUrlV1Response> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = ezsignfoldersignerassociationCreateEmbeddedUrlV1Request;

    // verify the required parameter 'pkiEzsignfoldersignerassociationID' is set
    if (pkiEzsignfoldersignerassociationID == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'pkiEzsignfoldersignerassociationID' when calling ezsignfoldersignerassociationCreateEmbeddedUrlV1",
        new ApiException(400, "Missing the required parameter 'pkiEzsignfoldersignerassociationID' when calling ezsignfoldersignerassociationCreateEmbeddedUrlV1"));
    }
    // verify the required parameter 'ezsignfoldersignerassociationCreateEmbeddedUrlV1Request' is set
    if (ezsignfoldersignerassociationCreateEmbeddedUrlV1Request == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'ezsignfoldersignerassociationCreateEmbeddedUrlV1Request' when calling ezsignfoldersignerassociationCreateEmbeddedUrlV1",
        new ApiException(400, "Missing the required parameter 'ezsignfoldersignerassociationCreateEmbeddedUrlV1Request' when calling ezsignfoldersignerassociationCreateEmbeddedUrlV1"));
    }

    // create path and map variables
    String path = "/1/object/ezsignfoldersignerassociation/{pkiEzsignfoldersignerassociationID}/createEmbeddedUrl".replaceAll("\\{format\\}","json").replaceAll("\\{" + "pkiEzsignfoldersignerassociationID" + "\\}", apiInvoker.escapeString(pkiEzsignfoldersignerassociationID.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "Authorization" };

    try {
      apiInvoker.invokeAPI(basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((EzsignfoldersignerassociationCreateEmbeddedUrlV1Response) ApiInvoker.deserialize(localVarResponse,  "", EzsignfoldersignerassociationCreateEmbeddedUrlV1Response.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Create a new Ezsignfoldersignerassociation
  * The endpoint allows to create one or many elements at once.  The array can contain simple (Just the object) or compound (The object and its child) objects.  Creating compound elements allows to reduce the multiple requests to create all child objects.
   * @param ezsignfoldersignerassociationCreateObjectV1Request 
   * @return EzsignfoldersignerassociationCreateObjectV1Response
  */
  public EzsignfoldersignerassociationCreateObjectV1Response ezsignfoldersignerassociationCreateObjectV1 (List<EzsignfoldersignerassociationCreateObjectV1Request> ezsignfoldersignerassociationCreateObjectV1Request) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = ezsignfoldersignerassociationCreateObjectV1Request;
    // verify the required parameter 'ezsignfoldersignerassociationCreateObjectV1Request' is set
    if (ezsignfoldersignerassociationCreateObjectV1Request == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'ezsignfoldersignerassociationCreateObjectV1Request' when calling ezsignfoldersignerassociationCreateObjectV1",
        new ApiException(400, "Missing the required parameter 'ezsignfoldersignerassociationCreateObjectV1Request' when calling ezsignfoldersignerassociationCreateObjectV1"));
    }

    // create path and map variables
    String path = "/1/object/ezsignfoldersignerassociation";

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "Authorization" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (EzsignfoldersignerassociationCreateObjectV1Response) ApiInvoker.deserialize(localVarResponse, "", EzsignfoldersignerassociationCreateObjectV1Response.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Create a new Ezsignfoldersignerassociation
   * The endpoint allows to create one or many elements at once.  The array can contain simple (Just the object) or compound (The object and its child) objects.  Creating compound elements allows to reduce the multiple requests to create all child objects.
   * @param ezsignfoldersignerassociationCreateObjectV1Request 
  */
  public void ezsignfoldersignerassociationCreateObjectV1 (List<EzsignfoldersignerassociationCreateObjectV1Request> ezsignfoldersignerassociationCreateObjectV1Request, final Response.Listener<EzsignfoldersignerassociationCreateObjectV1Response> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = ezsignfoldersignerassociationCreateObjectV1Request;

    // verify the required parameter 'ezsignfoldersignerassociationCreateObjectV1Request' is set
    if (ezsignfoldersignerassociationCreateObjectV1Request == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'ezsignfoldersignerassociationCreateObjectV1Request' when calling ezsignfoldersignerassociationCreateObjectV1",
        new ApiException(400, "Missing the required parameter 'ezsignfoldersignerassociationCreateObjectV1Request' when calling ezsignfoldersignerassociationCreateObjectV1"));
    }

    // create path and map variables
    String path = "/1/object/ezsignfoldersignerassociation".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "Authorization" };

    try {
      apiInvoker.invokeAPI(basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((EzsignfoldersignerassociationCreateObjectV1Response) ApiInvoker.deserialize(localVarResponse,  "", EzsignfoldersignerassociationCreateObjectV1Response.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Create a new Ezsignfoldersignerassociation
  * The endpoint allows to create one or many elements at once.
   * @param ezsignfoldersignerassociationCreateObjectV2Request 
   * @return EzsignfoldersignerassociationCreateObjectV2Response
  */
  public EzsignfoldersignerassociationCreateObjectV2Response ezsignfoldersignerassociationCreateObjectV2 (EzsignfoldersignerassociationCreateObjectV2Request ezsignfoldersignerassociationCreateObjectV2Request) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = ezsignfoldersignerassociationCreateObjectV2Request;
    // verify the required parameter 'ezsignfoldersignerassociationCreateObjectV2Request' is set
    if (ezsignfoldersignerassociationCreateObjectV2Request == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'ezsignfoldersignerassociationCreateObjectV2Request' when calling ezsignfoldersignerassociationCreateObjectV2",
        new ApiException(400, "Missing the required parameter 'ezsignfoldersignerassociationCreateObjectV2Request' when calling ezsignfoldersignerassociationCreateObjectV2"));
    }

    // create path and map variables
    String path = "/2/object/ezsignfoldersignerassociation";

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "Authorization" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (EzsignfoldersignerassociationCreateObjectV2Response) ApiInvoker.deserialize(localVarResponse, "", EzsignfoldersignerassociationCreateObjectV2Response.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Create a new Ezsignfoldersignerassociation
   * The endpoint allows to create one or many elements at once.
   * @param ezsignfoldersignerassociationCreateObjectV2Request 
  */
  public void ezsignfoldersignerassociationCreateObjectV2 (EzsignfoldersignerassociationCreateObjectV2Request ezsignfoldersignerassociationCreateObjectV2Request, final Response.Listener<EzsignfoldersignerassociationCreateObjectV2Response> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = ezsignfoldersignerassociationCreateObjectV2Request;

    // verify the required parameter 'ezsignfoldersignerassociationCreateObjectV2Request' is set
    if (ezsignfoldersignerassociationCreateObjectV2Request == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'ezsignfoldersignerassociationCreateObjectV2Request' when calling ezsignfoldersignerassociationCreateObjectV2",
        new ApiException(400, "Missing the required parameter 'ezsignfoldersignerassociationCreateObjectV2Request' when calling ezsignfoldersignerassociationCreateObjectV2"));
    }

    // create path and map variables
    String path = "/2/object/ezsignfoldersignerassociation".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "Authorization" };

    try {
      apiInvoker.invokeAPI(basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((EzsignfoldersignerassociationCreateObjectV2Response) ApiInvoker.deserialize(localVarResponse,  "", EzsignfoldersignerassociationCreateObjectV2Response.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Delete an existing Ezsignfoldersignerassociation
  * 
   * @param pkiEzsignfoldersignerassociationID 
   * @return CommonResponse
  */
  public CommonResponse ezsignfoldersignerassociationDeleteObjectV1 (Integer pkiEzsignfoldersignerassociationID) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'pkiEzsignfoldersignerassociationID' is set
    if (pkiEzsignfoldersignerassociationID == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'pkiEzsignfoldersignerassociationID' when calling ezsignfoldersignerassociationDeleteObjectV1",
        new ApiException(400, "Missing the required parameter 'pkiEzsignfoldersignerassociationID' when calling ezsignfoldersignerassociationDeleteObjectV1"));
    }

    // create path and map variables
    String path = "/1/object/ezsignfoldersignerassociation/{pkiEzsignfoldersignerassociationID}".replaceAll("\\{" + "pkiEzsignfoldersignerassociationID" + "\\}", apiInvoker.escapeString(pkiEzsignfoldersignerassociationID.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "Authorization" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "DELETE", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (CommonResponse) ApiInvoker.deserialize(localVarResponse, "", CommonResponse.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Delete an existing Ezsignfoldersignerassociation
   * 
   * @param pkiEzsignfoldersignerassociationID 
  */
  public void ezsignfoldersignerassociationDeleteObjectV1 (Integer pkiEzsignfoldersignerassociationID, final Response.Listener<CommonResponse> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'pkiEzsignfoldersignerassociationID' is set
    if (pkiEzsignfoldersignerassociationID == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'pkiEzsignfoldersignerassociationID' when calling ezsignfoldersignerassociationDeleteObjectV1",
        new ApiException(400, "Missing the required parameter 'pkiEzsignfoldersignerassociationID' when calling ezsignfoldersignerassociationDeleteObjectV1"));
    }

    // create path and map variables
    String path = "/1/object/ezsignfoldersignerassociation/{pkiEzsignfoldersignerassociationID}".replaceAll("\\{format\\}","json").replaceAll("\\{" + "pkiEzsignfoldersignerassociationID" + "\\}", apiInvoker.escapeString(pkiEzsignfoldersignerassociationID.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "Authorization" };

    try {
      apiInvoker.invokeAPI(basePath, path, "DELETE", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((CommonResponse) ApiInvoker.deserialize(localVarResponse,  "", CommonResponse.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Edit an existing Ezsignfoldersignerassociation
  * 
   * @param pkiEzsignfoldersignerassociationID 
   * @param ezsignfoldersignerassociationEditObjectV1Request 
   * @return CommonResponse
  */
  public CommonResponse ezsignfoldersignerassociationEditObjectV1 (Integer pkiEzsignfoldersignerassociationID, EzsignfoldersignerassociationEditObjectV1Request ezsignfoldersignerassociationEditObjectV1Request) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = ezsignfoldersignerassociationEditObjectV1Request;
    // verify the required parameter 'pkiEzsignfoldersignerassociationID' is set
    if (pkiEzsignfoldersignerassociationID == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'pkiEzsignfoldersignerassociationID' when calling ezsignfoldersignerassociationEditObjectV1",
        new ApiException(400, "Missing the required parameter 'pkiEzsignfoldersignerassociationID' when calling ezsignfoldersignerassociationEditObjectV1"));
    }
    // verify the required parameter 'ezsignfoldersignerassociationEditObjectV1Request' is set
    if (ezsignfoldersignerassociationEditObjectV1Request == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'ezsignfoldersignerassociationEditObjectV1Request' when calling ezsignfoldersignerassociationEditObjectV1",
        new ApiException(400, "Missing the required parameter 'ezsignfoldersignerassociationEditObjectV1Request' when calling ezsignfoldersignerassociationEditObjectV1"));
    }

    // create path and map variables
    String path = "/1/object/ezsignfoldersignerassociation/{pkiEzsignfoldersignerassociationID}".replaceAll("\\{" + "pkiEzsignfoldersignerassociationID" + "\\}", apiInvoker.escapeString(pkiEzsignfoldersignerassociationID.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "Authorization" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "PUT", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (CommonResponse) ApiInvoker.deserialize(localVarResponse, "", CommonResponse.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Edit an existing Ezsignfoldersignerassociation
   * 
   * @param pkiEzsignfoldersignerassociationID    * @param ezsignfoldersignerassociationEditObjectV1Request 
  */
  public void ezsignfoldersignerassociationEditObjectV1 (Integer pkiEzsignfoldersignerassociationID, EzsignfoldersignerassociationEditObjectV1Request ezsignfoldersignerassociationEditObjectV1Request, final Response.Listener<CommonResponse> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = ezsignfoldersignerassociationEditObjectV1Request;

    // verify the required parameter 'pkiEzsignfoldersignerassociationID' is set
    if (pkiEzsignfoldersignerassociationID == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'pkiEzsignfoldersignerassociationID' when calling ezsignfoldersignerassociationEditObjectV1",
        new ApiException(400, "Missing the required parameter 'pkiEzsignfoldersignerassociationID' when calling ezsignfoldersignerassociationEditObjectV1"));
    }
    // verify the required parameter 'ezsignfoldersignerassociationEditObjectV1Request' is set
    if (ezsignfoldersignerassociationEditObjectV1Request == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'ezsignfoldersignerassociationEditObjectV1Request' when calling ezsignfoldersignerassociationEditObjectV1",
        new ApiException(400, "Missing the required parameter 'ezsignfoldersignerassociationEditObjectV1Request' when calling ezsignfoldersignerassociationEditObjectV1"));
    }

    // create path and map variables
    String path = "/1/object/ezsignfoldersignerassociation/{pkiEzsignfoldersignerassociationID}".replaceAll("\\{format\\}","json").replaceAll("\\{" + "pkiEzsignfoldersignerassociationID" + "\\}", apiInvoker.escapeString(pkiEzsignfoldersignerassociationID.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "Authorization" };

    try {
      apiInvoker.invokeAPI(basePath, path, "PUT", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((CommonResponse) ApiInvoker.deserialize(localVarResponse,  "", CommonResponse.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Disconnects the Ezsignfoldersignerassociation
  * 
   * @param pkiEzsignfoldersignerassociationID 
   * @param body 
   * @return CommonResponse
  */
  public CommonResponse ezsignfoldersignerassociationForceDisconnectV1 (Integer pkiEzsignfoldersignerassociationID, Object body) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = body;
    // verify the required parameter 'pkiEzsignfoldersignerassociationID' is set
    if (pkiEzsignfoldersignerassociationID == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'pkiEzsignfoldersignerassociationID' when calling ezsignfoldersignerassociationForceDisconnectV1",
        new ApiException(400, "Missing the required parameter 'pkiEzsignfoldersignerassociationID' when calling ezsignfoldersignerassociationForceDisconnectV1"));
    }
    // verify the required parameter 'body' is set
    if (body == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'body' when calling ezsignfoldersignerassociationForceDisconnectV1",
        new ApiException(400, "Missing the required parameter 'body' when calling ezsignfoldersignerassociationForceDisconnectV1"));
    }

    // create path and map variables
    String path = "/1/object/ezsignfoldersignerassociation/{pkiEzsignfoldersignerassociationID}/forceDisconnect".replaceAll("\\{" + "pkiEzsignfoldersignerassociationID" + "\\}", apiInvoker.escapeString(pkiEzsignfoldersignerassociationID.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "Authorization" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (CommonResponse) ApiInvoker.deserialize(localVarResponse, "", CommonResponse.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Disconnects the Ezsignfoldersignerassociation
   * 
   * @param pkiEzsignfoldersignerassociationID    * @param body 
  */
  public void ezsignfoldersignerassociationForceDisconnectV1 (Integer pkiEzsignfoldersignerassociationID, Object body, final Response.Listener<CommonResponse> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = body;

    // verify the required parameter 'pkiEzsignfoldersignerassociationID' is set
    if (pkiEzsignfoldersignerassociationID == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'pkiEzsignfoldersignerassociationID' when calling ezsignfoldersignerassociationForceDisconnectV1",
        new ApiException(400, "Missing the required parameter 'pkiEzsignfoldersignerassociationID' when calling ezsignfoldersignerassociationForceDisconnectV1"));
    }
    // verify the required parameter 'body' is set
    if (body == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'body' when calling ezsignfoldersignerassociationForceDisconnectV1",
        new ApiException(400, "Missing the required parameter 'body' when calling ezsignfoldersignerassociationForceDisconnectV1"));
    }

    // create path and map variables
    String path = "/1/object/ezsignfoldersignerassociation/{pkiEzsignfoldersignerassociationID}/forceDisconnect".replaceAll("\\{format\\}","json").replaceAll("\\{" + "pkiEzsignfoldersignerassociationID" + "\\}", apiInvoker.escapeString(pkiEzsignfoldersignerassociationID.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "Authorization" };

    try {
      apiInvoker.invokeAPI(basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((CommonResponse) ApiInvoker.deserialize(localVarResponse,  "", CommonResponse.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Retrieve a Login Url to allow In-Person signing
  * This endpoint returns a Login Url that can be used in a browser or embedded in an I-Frame to allow in person signing.  The signer Login type must be configured as In-Person.
   * @param pkiEzsignfoldersignerassociationID 
   * @return EzsignfoldersignerassociationGetInPersonLoginUrlV1Response
  */
  public EzsignfoldersignerassociationGetInPersonLoginUrlV1Response ezsignfoldersignerassociationGetInPersonLoginUrlV1 (Integer pkiEzsignfoldersignerassociationID) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'pkiEzsignfoldersignerassociationID' is set
    if (pkiEzsignfoldersignerassociationID == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'pkiEzsignfoldersignerassociationID' when calling ezsignfoldersignerassociationGetInPersonLoginUrlV1",
        new ApiException(400, "Missing the required parameter 'pkiEzsignfoldersignerassociationID' when calling ezsignfoldersignerassociationGetInPersonLoginUrlV1"));
    }

    // create path and map variables
    String path = "/1/object/ezsignfoldersignerassociation/{pkiEzsignfoldersignerassociationID}/getInPersonLoginUrl".replaceAll("\\{" + "pkiEzsignfoldersignerassociationID" + "\\}", apiInvoker.escapeString(pkiEzsignfoldersignerassociationID.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "Authorization" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (EzsignfoldersignerassociationGetInPersonLoginUrlV1Response) ApiInvoker.deserialize(localVarResponse, "", EzsignfoldersignerassociationGetInPersonLoginUrlV1Response.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Retrieve a Login Url to allow In-Person signing
   * This endpoint returns a Login Url that can be used in a browser or embedded in an I-Frame to allow in person signing.  The signer Login type must be configured as In-Person.
   * @param pkiEzsignfoldersignerassociationID 
  */
  public void ezsignfoldersignerassociationGetInPersonLoginUrlV1 (Integer pkiEzsignfoldersignerassociationID, final Response.Listener<EzsignfoldersignerassociationGetInPersonLoginUrlV1Response> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'pkiEzsignfoldersignerassociationID' is set
    if (pkiEzsignfoldersignerassociationID == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'pkiEzsignfoldersignerassociationID' when calling ezsignfoldersignerassociationGetInPersonLoginUrlV1",
        new ApiException(400, "Missing the required parameter 'pkiEzsignfoldersignerassociationID' when calling ezsignfoldersignerassociationGetInPersonLoginUrlV1"));
    }

    // create path and map variables
    String path = "/1/object/ezsignfoldersignerassociation/{pkiEzsignfoldersignerassociationID}/getInPersonLoginUrl".replaceAll("\\{format\\}","json").replaceAll("\\{" + "pkiEzsignfoldersignerassociationID" + "\\}", apiInvoker.escapeString(pkiEzsignfoldersignerassociationID.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "Authorization" };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((EzsignfoldersignerassociationGetInPersonLoginUrlV1Response) ApiInvoker.deserialize(localVarResponse,  "", EzsignfoldersignerassociationGetInPersonLoginUrlV1Response.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Retrieve an existing Ezsignfoldersignerassociation
  * 
   * @param pkiEzsignfoldersignerassociationID 
   * @return EzsignfoldersignerassociationGetObjectV1Response
  */
  public EzsignfoldersignerassociationGetObjectV1Response ezsignfoldersignerassociationGetObjectV1 (Integer pkiEzsignfoldersignerassociationID) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'pkiEzsignfoldersignerassociationID' is set
    if (pkiEzsignfoldersignerassociationID == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'pkiEzsignfoldersignerassociationID' when calling ezsignfoldersignerassociationGetObjectV1",
        new ApiException(400, "Missing the required parameter 'pkiEzsignfoldersignerassociationID' when calling ezsignfoldersignerassociationGetObjectV1"));
    }

    // create path and map variables
    String path = "/1/object/ezsignfoldersignerassociation/{pkiEzsignfoldersignerassociationID}".replaceAll("\\{" + "pkiEzsignfoldersignerassociationID" + "\\}", apiInvoker.escapeString(pkiEzsignfoldersignerassociationID.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "Authorization" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (EzsignfoldersignerassociationGetObjectV1Response) ApiInvoker.deserialize(localVarResponse, "", EzsignfoldersignerassociationGetObjectV1Response.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Retrieve an existing Ezsignfoldersignerassociation
   * 
   * @param pkiEzsignfoldersignerassociationID 
  */
  public void ezsignfoldersignerassociationGetObjectV1 (Integer pkiEzsignfoldersignerassociationID, final Response.Listener<EzsignfoldersignerassociationGetObjectV1Response> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'pkiEzsignfoldersignerassociationID' is set
    if (pkiEzsignfoldersignerassociationID == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'pkiEzsignfoldersignerassociationID' when calling ezsignfoldersignerassociationGetObjectV1",
        new ApiException(400, "Missing the required parameter 'pkiEzsignfoldersignerassociationID' when calling ezsignfoldersignerassociationGetObjectV1"));
    }

    // create path and map variables
    String path = "/1/object/ezsignfoldersignerassociation/{pkiEzsignfoldersignerassociationID}".replaceAll("\\{format\\}","json").replaceAll("\\{" + "pkiEzsignfoldersignerassociationID" + "\\}", apiInvoker.escapeString(pkiEzsignfoldersignerassociationID.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "Authorization" };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((EzsignfoldersignerassociationGetObjectV1Response) ApiInvoker.deserialize(localVarResponse,  "", EzsignfoldersignerassociationGetObjectV1Response.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Retrieve an existing Ezsignfoldersignerassociation
  * 
   * @param pkiEzsignfoldersignerassociationID 
   * @return EzsignfoldersignerassociationGetObjectV2Response
  */
  public EzsignfoldersignerassociationGetObjectV2Response ezsignfoldersignerassociationGetObjectV2 (Integer pkiEzsignfoldersignerassociationID) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'pkiEzsignfoldersignerassociationID' is set
    if (pkiEzsignfoldersignerassociationID == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'pkiEzsignfoldersignerassociationID' when calling ezsignfoldersignerassociationGetObjectV2",
        new ApiException(400, "Missing the required parameter 'pkiEzsignfoldersignerassociationID' when calling ezsignfoldersignerassociationGetObjectV2"));
    }

    // create path and map variables
    String path = "/2/object/ezsignfoldersignerassociation/{pkiEzsignfoldersignerassociationID}".replaceAll("\\{" + "pkiEzsignfoldersignerassociationID" + "\\}", apiInvoker.escapeString(pkiEzsignfoldersignerassociationID.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "Authorization" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (EzsignfoldersignerassociationGetObjectV2Response) ApiInvoker.deserialize(localVarResponse, "", EzsignfoldersignerassociationGetObjectV2Response.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Retrieve an existing Ezsignfoldersignerassociation
   * 
   * @param pkiEzsignfoldersignerassociationID 
  */
  public void ezsignfoldersignerassociationGetObjectV2 (Integer pkiEzsignfoldersignerassociationID, final Response.Listener<EzsignfoldersignerassociationGetObjectV2Response> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'pkiEzsignfoldersignerassociationID' is set
    if (pkiEzsignfoldersignerassociationID == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'pkiEzsignfoldersignerassociationID' when calling ezsignfoldersignerassociationGetObjectV2",
        new ApiException(400, "Missing the required parameter 'pkiEzsignfoldersignerassociationID' when calling ezsignfoldersignerassociationGetObjectV2"));
    }

    // create path and map variables
    String path = "/2/object/ezsignfoldersignerassociation/{pkiEzsignfoldersignerassociationID}".replaceAll("\\{format\\}","json").replaceAll("\\{" + "pkiEzsignfoldersignerassociationID" + "\\}", apiInvoker.escapeString(pkiEzsignfoldersignerassociationID.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "Authorization" };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((EzsignfoldersignerassociationGetObjectV2Response) ApiInvoker.deserialize(localVarResponse,  "", EzsignfoldersignerassociationGetObjectV2Response.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Patch an existing Ezsignfoldersignerassociation
  * 
   * @param pkiEzsignfoldersignerassociationID 
   * @param ezsignfoldersignerassociationPatchObjectV1Request 
   * @return CommonResponse
  */
  public CommonResponse ezsignfoldersignerassociationPatchObjectV1 (Integer pkiEzsignfoldersignerassociationID, EzsignfoldersignerassociationPatchObjectV1Request ezsignfoldersignerassociationPatchObjectV1Request) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = ezsignfoldersignerassociationPatchObjectV1Request;
    // verify the required parameter 'pkiEzsignfoldersignerassociationID' is set
    if (pkiEzsignfoldersignerassociationID == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'pkiEzsignfoldersignerassociationID' when calling ezsignfoldersignerassociationPatchObjectV1",
        new ApiException(400, "Missing the required parameter 'pkiEzsignfoldersignerassociationID' when calling ezsignfoldersignerassociationPatchObjectV1"));
    }
    // verify the required parameter 'ezsignfoldersignerassociationPatchObjectV1Request' is set
    if (ezsignfoldersignerassociationPatchObjectV1Request == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'ezsignfoldersignerassociationPatchObjectV1Request' when calling ezsignfoldersignerassociationPatchObjectV1",
        new ApiException(400, "Missing the required parameter 'ezsignfoldersignerassociationPatchObjectV1Request' when calling ezsignfoldersignerassociationPatchObjectV1"));
    }

    // create path and map variables
    String path = "/1/object/ezsignfoldersignerassociation/{pkiEzsignfoldersignerassociationID}".replaceAll("\\{" + "pkiEzsignfoldersignerassociationID" + "\\}", apiInvoker.escapeString(pkiEzsignfoldersignerassociationID.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "Authorization" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "PATCH", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (CommonResponse) ApiInvoker.deserialize(localVarResponse, "", CommonResponse.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Patch an existing Ezsignfoldersignerassociation
   * 
   * @param pkiEzsignfoldersignerassociationID    * @param ezsignfoldersignerassociationPatchObjectV1Request 
  */
  public void ezsignfoldersignerassociationPatchObjectV1 (Integer pkiEzsignfoldersignerassociationID, EzsignfoldersignerassociationPatchObjectV1Request ezsignfoldersignerassociationPatchObjectV1Request, final Response.Listener<CommonResponse> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = ezsignfoldersignerassociationPatchObjectV1Request;

    // verify the required parameter 'pkiEzsignfoldersignerassociationID' is set
    if (pkiEzsignfoldersignerassociationID == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'pkiEzsignfoldersignerassociationID' when calling ezsignfoldersignerassociationPatchObjectV1",
        new ApiException(400, "Missing the required parameter 'pkiEzsignfoldersignerassociationID' when calling ezsignfoldersignerassociationPatchObjectV1"));
    }
    // verify the required parameter 'ezsignfoldersignerassociationPatchObjectV1Request' is set
    if (ezsignfoldersignerassociationPatchObjectV1Request == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'ezsignfoldersignerassociationPatchObjectV1Request' when calling ezsignfoldersignerassociationPatchObjectV1",
        new ApiException(400, "Missing the required parameter 'ezsignfoldersignerassociationPatchObjectV1Request' when calling ezsignfoldersignerassociationPatchObjectV1"));
    }

    // create path and map variables
    String path = "/1/object/ezsignfoldersignerassociation/{pkiEzsignfoldersignerassociationID}".replaceAll("\\{format\\}","json").replaceAll("\\{" + "pkiEzsignfoldersignerassociationID" + "\\}", apiInvoker.escapeString(pkiEzsignfoldersignerassociationID.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "Authorization" };

    try {
      apiInvoker.invokeAPI(basePath, path, "PATCH", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((CommonResponse) ApiInvoker.deserialize(localVarResponse,  "", CommonResponse.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Reassign remaining unsigned signatures and forms
  * Reassign remaining unsigned signatures and forms
   * @param pkiEzsignfoldersignerassociationID 
   * @param ezsignfoldersignerassociationReassignV1Request 
   * @return CommonResponse
  */
  public CommonResponse ezsignfoldersignerassociationReassignV1 (Integer pkiEzsignfoldersignerassociationID, EzsignfoldersignerassociationReassignV1Request ezsignfoldersignerassociationReassignV1Request) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = ezsignfoldersignerassociationReassignV1Request;
    // verify the required parameter 'pkiEzsignfoldersignerassociationID' is set
    if (pkiEzsignfoldersignerassociationID == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'pkiEzsignfoldersignerassociationID' when calling ezsignfoldersignerassociationReassignV1",
        new ApiException(400, "Missing the required parameter 'pkiEzsignfoldersignerassociationID' when calling ezsignfoldersignerassociationReassignV1"));
    }
    // verify the required parameter 'ezsignfoldersignerassociationReassignV1Request' is set
    if (ezsignfoldersignerassociationReassignV1Request == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'ezsignfoldersignerassociationReassignV1Request' when calling ezsignfoldersignerassociationReassignV1",
        new ApiException(400, "Missing the required parameter 'ezsignfoldersignerassociationReassignV1Request' when calling ezsignfoldersignerassociationReassignV1"));
    }

    // create path and map variables
    String path = "/1/object/ezsignfoldersignerassociation/{pkiEzsignfoldersignerassociationID}/reassign".replaceAll("\\{" + "pkiEzsignfoldersignerassociationID" + "\\}", apiInvoker.escapeString(pkiEzsignfoldersignerassociationID.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "Authorization" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (CommonResponse) ApiInvoker.deserialize(localVarResponse, "", CommonResponse.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Reassign remaining unsigned signatures and forms
   * Reassign remaining unsigned signatures and forms
   * @param pkiEzsignfoldersignerassociationID    * @param ezsignfoldersignerassociationReassignV1Request 
  */
  public void ezsignfoldersignerassociationReassignV1 (Integer pkiEzsignfoldersignerassociationID, EzsignfoldersignerassociationReassignV1Request ezsignfoldersignerassociationReassignV1Request, final Response.Listener<CommonResponse> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = ezsignfoldersignerassociationReassignV1Request;

    // verify the required parameter 'pkiEzsignfoldersignerassociationID' is set
    if (pkiEzsignfoldersignerassociationID == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'pkiEzsignfoldersignerassociationID' when calling ezsignfoldersignerassociationReassignV1",
        new ApiException(400, "Missing the required parameter 'pkiEzsignfoldersignerassociationID' when calling ezsignfoldersignerassociationReassignV1"));
    }
    // verify the required parameter 'ezsignfoldersignerassociationReassignV1Request' is set
    if (ezsignfoldersignerassociationReassignV1Request == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'ezsignfoldersignerassociationReassignV1Request' when calling ezsignfoldersignerassociationReassignV1",
        new ApiException(400, "Missing the required parameter 'ezsignfoldersignerassociationReassignV1Request' when calling ezsignfoldersignerassociationReassignV1"));
    }

    // create path and map variables
    String path = "/1/object/ezsignfoldersignerassociation/{pkiEzsignfoldersignerassociationID}/reassign".replaceAll("\\{format\\}","json").replaceAll("\\{" + "pkiEzsignfoldersignerassociationID" + "\\}", apiInvoker.escapeString(pkiEzsignfoldersignerassociationID.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "Authorization" };

    try {
      apiInvoker.invokeAPI(basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((CommonResponse) ApiInvoker.deserialize(localVarResponse,  "", CommonResponse.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
}
