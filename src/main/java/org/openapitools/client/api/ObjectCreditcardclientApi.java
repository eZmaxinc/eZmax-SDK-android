/**
 * eZmax API Definition (Full)
 * This API expose all the functionnalities for the eZmax and eZsign applications.
 *
 * The version of the OpenAPI document: 1.2.1
 * Contact: support-api@ezmax.ca
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package org.openapitools.client.api;

import eZmaxAPI.ApiInvoker;
import eZmaxAPI.ApiException;
import eZmaxAPI.Pair;

import org.openapitools.client.model.*;

import java.util.*;

import com.android.volley.Response;
import com.android.volley.VolleyError;

import org.openapitools.client.model.CommonResponseError;
import org.openapitools.client.model.CommonResponseErrorCreditcardValidation;
import org.openapitools.client.model.CreditcardclientCreateObjectV1Request;
import org.openapitools.client.model.CreditcardclientCreateObjectV1Response;
import org.openapitools.client.model.CreditcardclientDeleteObjectV1Response;
import org.openapitools.client.model.CreditcardclientEditObjectV1Request;
import org.openapitools.client.model.CreditcardclientEditObjectV1Response;
import org.openapitools.client.model.CreditcardclientGetAutocompleteV2Response;
import org.openapitools.client.model.CreditcardclientGetListV1Response;
import org.openapitools.client.model.CreditcardclientGetObjectV2Response;
import org.openapitools.client.model.CreditcardclientPatchObjectV1Request;
import org.openapitools.client.model.CreditcardclientPatchObjectV1Response;
import java.io.File;
import org.openapitools.client.model.HeaderAcceptLanguage;

import org.apache.http.HttpEntity;
import org.apache.http.entity.mime.MultipartEntityBuilder;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.concurrent.ExecutionException;
import java.util.concurrent.TimeoutException;

public class ObjectCreditcardclientApi {
  String basePath = "https://prod.api.appcluster01.ca-central-1.ezmax.com/rest";
  ApiInvoker apiInvoker = ApiInvoker.getInstance();

  public void addHeader(String key, String value) {
    getInvoker().addDefaultHeader(key, value);
  }

  public ApiInvoker getInvoker() {
    return apiInvoker;
  }

  public void setBasePath(String basePath) {
    this.basePath = basePath;
  }

  public String getBasePath() {
    return basePath;
  }

  /**
  * Create a new Creditcardclient
  * The endpoint allows to create one or many elements at once.
   * @param creditcardclientCreateObjectV1Request 
   * @return CreditcardclientCreateObjectV1Response
  */
  public CreditcardclientCreateObjectV1Response creditcardclientCreateObjectV1 (CreditcardclientCreateObjectV1Request creditcardclientCreateObjectV1Request) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = creditcardclientCreateObjectV1Request;
    // verify the required parameter 'creditcardclientCreateObjectV1Request' is set
    if (creditcardclientCreateObjectV1Request == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'creditcardclientCreateObjectV1Request' when calling creditcardclientCreateObjectV1",
        new ApiException(400, "Missing the required parameter 'creditcardclientCreateObjectV1Request' when calling creditcardclientCreateObjectV1"));
    }

    // create path and map variables
    String path = "/1/object/creditcardclient";

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "Authorization" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (CreditcardclientCreateObjectV1Response) ApiInvoker.deserialize(localVarResponse, "", CreditcardclientCreateObjectV1Response.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Create a new Creditcardclient
   * The endpoint allows to create one or many elements at once.
   * @param creditcardclientCreateObjectV1Request 
  */
  public void creditcardclientCreateObjectV1 (CreditcardclientCreateObjectV1Request creditcardclientCreateObjectV1Request, final Response.Listener<CreditcardclientCreateObjectV1Response> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = creditcardclientCreateObjectV1Request;

    // verify the required parameter 'creditcardclientCreateObjectV1Request' is set
    if (creditcardclientCreateObjectV1Request == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'creditcardclientCreateObjectV1Request' when calling creditcardclientCreateObjectV1",
        new ApiException(400, "Missing the required parameter 'creditcardclientCreateObjectV1Request' when calling creditcardclientCreateObjectV1"));
    }

    // create path and map variables
    String path = "/1/object/creditcardclient".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "Authorization" };

    try {
      apiInvoker.invokeAPI(basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((CreditcardclientCreateObjectV1Response) ApiInvoker.deserialize(localVarResponse,  "", CreditcardclientCreateObjectV1Response.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Delete an existing Creditcardclient
  * 
   * @param pkiCreditcardclientID The unique ID of the Creditcardclient
   * @return CreditcardclientDeleteObjectV1Response
  */
  public CreditcardclientDeleteObjectV1Response creditcardclientDeleteObjectV1 (Integer pkiCreditcardclientID) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'pkiCreditcardclientID' is set
    if (pkiCreditcardclientID == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'pkiCreditcardclientID' when calling creditcardclientDeleteObjectV1",
        new ApiException(400, "Missing the required parameter 'pkiCreditcardclientID' when calling creditcardclientDeleteObjectV1"));
    }

    // create path and map variables
    String path = "/1/object/creditcardclient/{pkiCreditcardclientID}".replaceAll("\\{" + "pkiCreditcardclientID" + "\\}", apiInvoker.escapeString(pkiCreditcardclientID.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "Authorization" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "DELETE", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (CreditcardclientDeleteObjectV1Response) ApiInvoker.deserialize(localVarResponse, "", CreditcardclientDeleteObjectV1Response.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Delete an existing Creditcardclient
   * 
   * @param pkiCreditcardclientID The unique ID of the Creditcardclient
  */
  public void creditcardclientDeleteObjectV1 (Integer pkiCreditcardclientID, final Response.Listener<CreditcardclientDeleteObjectV1Response> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'pkiCreditcardclientID' is set
    if (pkiCreditcardclientID == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'pkiCreditcardclientID' when calling creditcardclientDeleteObjectV1",
        new ApiException(400, "Missing the required parameter 'pkiCreditcardclientID' when calling creditcardclientDeleteObjectV1"));
    }

    // create path and map variables
    String path = "/1/object/creditcardclient/{pkiCreditcardclientID}".replaceAll("\\{format\\}","json").replaceAll("\\{" + "pkiCreditcardclientID" + "\\}", apiInvoker.escapeString(pkiCreditcardclientID.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "Authorization" };

    try {
      apiInvoker.invokeAPI(basePath, path, "DELETE", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((CreditcardclientDeleteObjectV1Response) ApiInvoker.deserialize(localVarResponse,  "", CreditcardclientDeleteObjectV1Response.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Edit an existing Creditcardclient
  * 
   * @param pkiCreditcardclientID The unique ID of the Creditcardclient
   * @param creditcardclientEditObjectV1Request 
   * @return CreditcardclientEditObjectV1Response
  */
  public CreditcardclientEditObjectV1Response creditcardclientEditObjectV1 (Integer pkiCreditcardclientID, CreditcardclientEditObjectV1Request creditcardclientEditObjectV1Request) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = creditcardclientEditObjectV1Request;
    // verify the required parameter 'pkiCreditcardclientID' is set
    if (pkiCreditcardclientID == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'pkiCreditcardclientID' when calling creditcardclientEditObjectV1",
        new ApiException(400, "Missing the required parameter 'pkiCreditcardclientID' when calling creditcardclientEditObjectV1"));
    }
    // verify the required parameter 'creditcardclientEditObjectV1Request' is set
    if (creditcardclientEditObjectV1Request == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'creditcardclientEditObjectV1Request' when calling creditcardclientEditObjectV1",
        new ApiException(400, "Missing the required parameter 'creditcardclientEditObjectV1Request' when calling creditcardclientEditObjectV1"));
    }

    // create path and map variables
    String path = "/1/object/creditcardclient/{pkiCreditcardclientID}".replaceAll("\\{" + "pkiCreditcardclientID" + "\\}", apiInvoker.escapeString(pkiCreditcardclientID.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "Authorization" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "PUT", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (CreditcardclientEditObjectV1Response) ApiInvoker.deserialize(localVarResponse, "", CreditcardclientEditObjectV1Response.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Edit an existing Creditcardclient
   * 
   * @param pkiCreditcardclientID The unique ID of the Creditcardclient   * @param creditcardclientEditObjectV1Request 
  */
  public void creditcardclientEditObjectV1 (Integer pkiCreditcardclientID, CreditcardclientEditObjectV1Request creditcardclientEditObjectV1Request, final Response.Listener<CreditcardclientEditObjectV1Response> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = creditcardclientEditObjectV1Request;

    // verify the required parameter 'pkiCreditcardclientID' is set
    if (pkiCreditcardclientID == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'pkiCreditcardclientID' when calling creditcardclientEditObjectV1",
        new ApiException(400, "Missing the required parameter 'pkiCreditcardclientID' when calling creditcardclientEditObjectV1"));
    }
    // verify the required parameter 'creditcardclientEditObjectV1Request' is set
    if (creditcardclientEditObjectV1Request == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'creditcardclientEditObjectV1Request' when calling creditcardclientEditObjectV1",
        new ApiException(400, "Missing the required parameter 'creditcardclientEditObjectV1Request' when calling creditcardclientEditObjectV1"));
    }

    // create path and map variables
    String path = "/1/object/creditcardclient/{pkiCreditcardclientID}".replaceAll("\\{format\\}","json").replaceAll("\\{" + "pkiCreditcardclientID" + "\\}", apiInvoker.escapeString(pkiCreditcardclientID.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "Authorization" };

    try {
      apiInvoker.invokeAPI(basePath, path, "PUT", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((CreditcardclientEditObjectV1Response) ApiInvoker.deserialize(localVarResponse,  "", CreditcardclientEditObjectV1Response.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Retrieve Creditcardclients and IDs
  * Get the list of Creditcardclient to be used in a dropdown or autocomplete control.
   * @param sSelector The type of Creditcardclients to return
   * @param eFilterActive Specify which results we want to display.
   * @param sQuery Allow to filter the returned results
   * @param acceptLanguage 
   * @return CreditcardclientGetAutocompleteV2Response
  */
  public CreditcardclientGetAutocompleteV2Response creditcardclientGetAutocompleteV2 (String sSelector, String eFilterActive, String sQuery, HeaderAcceptLanguage acceptLanguage) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'sSelector' is set
    if (sSelector == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'sSelector' when calling creditcardclientGetAutocompleteV2",
        new ApiException(400, "Missing the required parameter 'sSelector' when calling creditcardclientGetAutocompleteV2"));
    }

    // create path and map variables
    String path = "/2/object/creditcardclient/getAutocomplete/{sSelector}".replaceAll("\\{" + "sSelector" + "\\}", apiInvoker.escapeString(sSelector.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    queryParams.addAll(ApiInvoker.parameterToPairs("", "eFilterActive", eFilterActive));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "sQuery", sQuery));
    headerParams.put("Accept-Language", ApiInvoker.parameterToString(acceptLanguage));
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "Authorization" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (CreditcardclientGetAutocompleteV2Response) ApiInvoker.deserialize(localVarResponse, "", CreditcardclientGetAutocompleteV2Response.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Retrieve Creditcardclients and IDs
   * Get the list of Creditcardclient to be used in a dropdown or autocomplete control.
   * @param sSelector The type of Creditcardclients to return   * @param eFilterActive Specify which results we want to display.   * @param sQuery Allow to filter the returned results   * @param acceptLanguage 
  */
  public void creditcardclientGetAutocompleteV2 (String sSelector, String eFilterActive, String sQuery, HeaderAcceptLanguage acceptLanguage, final Response.Listener<CreditcardclientGetAutocompleteV2Response> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'sSelector' is set
    if (sSelector == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'sSelector' when calling creditcardclientGetAutocompleteV2",
        new ApiException(400, "Missing the required parameter 'sSelector' when calling creditcardclientGetAutocompleteV2"));
    }

    // create path and map variables
    String path = "/2/object/creditcardclient/getAutocomplete/{sSelector}".replaceAll("\\{format\\}","json").replaceAll("\\{" + "sSelector" + "\\}", apiInvoker.escapeString(sSelector.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();

    queryParams.addAll(ApiInvoker.parameterToPairs("", "eFilterActive", eFilterActive));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "sQuery", sQuery));

    headerParams.put("Accept-Language", ApiInvoker.parameterToString(acceptLanguage));

    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "Authorization" };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((CreditcardclientGetAutocompleteV2Response) ApiInvoker.deserialize(localVarResponse,  "", CreditcardclientGetAutocompleteV2Response.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Retrieve Creditcardclient list
  * 
   * @param eOrderBy Specify how you want the results to be sorted
   * @param iRowMax 
   * @param iRowOffset 
   * @param acceptLanguage 
   * @param sFilter 
   * @return CreditcardclientGetListV1Response
  */
  public CreditcardclientGetListV1Response creditcardclientGetListV1 (String eOrderBy, Integer iRowMax, Integer iRowOffset, HeaderAcceptLanguage acceptLanguage, String sFilter) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;

    // create path and map variables
    String path = "/1/object/creditcardclient/getList";

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    queryParams.addAll(ApiInvoker.parameterToPairs("", "eOrderBy", eOrderBy));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "iRowMax", iRowMax));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "iRowOffset", iRowOffset));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "sFilter", sFilter));
    headerParams.put("Accept-Language", ApiInvoker.parameterToString(acceptLanguage));
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "Authorization" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (CreditcardclientGetListV1Response) ApiInvoker.deserialize(localVarResponse, "", CreditcardclientGetListV1Response.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Retrieve Creditcardclient list
   * 
   * @param eOrderBy Specify how you want the results to be sorted   * @param iRowMax    * @param iRowOffset    * @param acceptLanguage    * @param sFilter 
  */
  public void creditcardclientGetListV1 (String eOrderBy, Integer iRowMax, Integer iRowOffset, HeaderAcceptLanguage acceptLanguage, String sFilter, final Response.Listener<CreditcardclientGetListV1Response> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;


    // create path and map variables
    String path = "/1/object/creditcardclient/getList".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();

    queryParams.addAll(ApiInvoker.parameterToPairs("", "eOrderBy", eOrderBy));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "iRowMax", iRowMax));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "iRowOffset", iRowOffset));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "sFilter", sFilter));

    headerParams.put("Accept-Language", ApiInvoker.parameterToString(acceptLanguage));

    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "Authorization" };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((CreditcardclientGetListV1Response) ApiInvoker.deserialize(localVarResponse,  "", CreditcardclientGetListV1Response.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Retrieve an existing Creditcardclient
  * 
   * @param pkiCreditcardclientID The unique ID of the Creditcardclient
   * @return CreditcardclientGetObjectV2Response
  */
  public CreditcardclientGetObjectV2Response creditcardclientGetObjectV2 (Integer pkiCreditcardclientID) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'pkiCreditcardclientID' is set
    if (pkiCreditcardclientID == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'pkiCreditcardclientID' when calling creditcardclientGetObjectV2",
        new ApiException(400, "Missing the required parameter 'pkiCreditcardclientID' when calling creditcardclientGetObjectV2"));
    }

    // create path and map variables
    String path = "/2/object/creditcardclient/{pkiCreditcardclientID}".replaceAll("\\{" + "pkiCreditcardclientID" + "\\}", apiInvoker.escapeString(pkiCreditcardclientID.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "Authorization" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (CreditcardclientGetObjectV2Response) ApiInvoker.deserialize(localVarResponse, "", CreditcardclientGetObjectV2Response.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Retrieve an existing Creditcardclient
   * 
   * @param pkiCreditcardclientID The unique ID of the Creditcardclient
  */
  public void creditcardclientGetObjectV2 (Integer pkiCreditcardclientID, final Response.Listener<CreditcardclientGetObjectV2Response> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'pkiCreditcardclientID' is set
    if (pkiCreditcardclientID == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'pkiCreditcardclientID' when calling creditcardclientGetObjectV2",
        new ApiException(400, "Missing the required parameter 'pkiCreditcardclientID' when calling creditcardclientGetObjectV2"));
    }

    // create path and map variables
    String path = "/2/object/creditcardclient/{pkiCreditcardclientID}".replaceAll("\\{format\\}","json").replaceAll("\\{" + "pkiCreditcardclientID" + "\\}", apiInvoker.escapeString(pkiCreditcardclientID.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "Authorization" };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((CreditcardclientGetObjectV2Response) ApiInvoker.deserialize(localVarResponse,  "", CreditcardclientGetObjectV2Response.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Patch an existing Creditcardclient
  * 
   * @param pkiCreditcardclientID The unique ID of the Creditcardclient
   * @param creditcardclientPatchObjectV1Request 
   * @return CreditcardclientPatchObjectV1Response
  */
  public CreditcardclientPatchObjectV1Response creditcardclientPatchObjectV1 (Integer pkiCreditcardclientID, CreditcardclientPatchObjectV1Request creditcardclientPatchObjectV1Request) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = creditcardclientPatchObjectV1Request;
    // verify the required parameter 'pkiCreditcardclientID' is set
    if (pkiCreditcardclientID == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'pkiCreditcardclientID' when calling creditcardclientPatchObjectV1",
        new ApiException(400, "Missing the required parameter 'pkiCreditcardclientID' when calling creditcardclientPatchObjectV1"));
    }
    // verify the required parameter 'creditcardclientPatchObjectV1Request' is set
    if (creditcardclientPatchObjectV1Request == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'creditcardclientPatchObjectV1Request' when calling creditcardclientPatchObjectV1",
        new ApiException(400, "Missing the required parameter 'creditcardclientPatchObjectV1Request' when calling creditcardclientPatchObjectV1"));
    }

    // create path and map variables
    String path = "/1/object/creditcardclient/{pkiCreditcardclientID}".replaceAll("\\{" + "pkiCreditcardclientID" + "\\}", apiInvoker.escapeString(pkiCreditcardclientID.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "Authorization" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "PATCH", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (CreditcardclientPatchObjectV1Response) ApiInvoker.deserialize(localVarResponse, "", CreditcardclientPatchObjectV1Response.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Patch an existing Creditcardclient
   * 
   * @param pkiCreditcardclientID The unique ID of the Creditcardclient   * @param creditcardclientPatchObjectV1Request 
  */
  public void creditcardclientPatchObjectV1 (Integer pkiCreditcardclientID, CreditcardclientPatchObjectV1Request creditcardclientPatchObjectV1Request, final Response.Listener<CreditcardclientPatchObjectV1Response> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = creditcardclientPatchObjectV1Request;

    // verify the required parameter 'pkiCreditcardclientID' is set
    if (pkiCreditcardclientID == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'pkiCreditcardclientID' when calling creditcardclientPatchObjectV1",
        new ApiException(400, "Missing the required parameter 'pkiCreditcardclientID' when calling creditcardclientPatchObjectV1"));
    }
    // verify the required parameter 'creditcardclientPatchObjectV1Request' is set
    if (creditcardclientPatchObjectV1Request == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'creditcardclientPatchObjectV1Request' when calling creditcardclientPatchObjectV1",
        new ApiException(400, "Missing the required parameter 'creditcardclientPatchObjectV1Request' when calling creditcardclientPatchObjectV1"));
    }

    // create path and map variables
    String path = "/1/object/creditcardclient/{pkiCreditcardclientID}".replaceAll("\\{format\\}","json").replaceAll("\\{" + "pkiCreditcardclientID" + "\\}", apiInvoker.escapeString(pkiCreditcardclientID.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "Authorization" };

    try {
      apiInvoker.invokeAPI(basePath, path, "PATCH", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((CreditcardclientPatchObjectV1Response) ApiInvoker.deserialize(localVarResponse,  "", CreditcardclientPatchObjectV1Response.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
}
