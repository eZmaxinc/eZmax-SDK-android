/**
 * eZmax API Definition (Full)
 * This API expose all the functionnalities for the eZmax and eZsign applications.
 *
 * The version of the OpenAPI document: 1.2.1
 * Contact: support-api@ezmax.ca
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package org.openapitools.client.api;

import eZmaxAPI.ApiInvoker;
import eZmaxAPI.ApiException;
import eZmaxAPI.Pair;

import org.openapitools.client.model.*;

import java.util.*;

import com.android.volley.Response;
import com.android.volley.VolleyError;

import org.openapitools.client.model.CommonResponseError;
import org.openapitools.client.model.EzsigntemplatepublicCreateEzsignfolderV1Request;
import org.openapitools.client.model.EzsigntemplatepublicCreateEzsignfolderV1Response;
import org.openapitools.client.model.EzsigntemplatepublicCreateObjectV1Request;
import org.openapitools.client.model.EzsigntemplatepublicCreateObjectV1Response;
import org.openapitools.client.model.EzsigntemplatepublicEditObjectV1Request;
import org.openapitools.client.model.EzsigntemplatepublicEditObjectV1Response;
import org.openapitools.client.model.EzsigntemplatepublicGetEzsigntemplatepublicDetailsV1Request;
import org.openapitools.client.model.EzsigntemplatepublicGetEzsigntemplatepublicDetailsV1Response;
import org.openapitools.client.model.EzsigntemplatepublicGetFormsDataV1Response;
import org.openapitools.client.model.EzsigntemplatepublicGetListV1Response;
import org.openapitools.client.model.EzsigntemplatepublicGetObjectV2Response;
import org.openapitools.client.model.EzsigntemplatepublicResetLimitExceededCounterV1Response;
import org.openapitools.client.model.EzsigntemplatepublicResetUrlV1Response;
import java.io.File;
import org.openapitools.client.model.HeaderAcceptLanguage;

import org.apache.http.HttpEntity;
import org.apache.http.entity.mime.MultipartEntityBuilder;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.concurrent.ExecutionException;
import java.util.concurrent.TimeoutException;

public class ObjectEzsigntemplatepublicApi {
  String basePath = "https://prod.api.appcluster01.ca-central-1.ezmax.com/rest";
  ApiInvoker apiInvoker = ApiInvoker.getInstance();

  public void addHeader(String key, String value) {
    getInvoker().addDefaultHeader(key, value);
  }

  public ApiInvoker getInvoker() {
    return apiInvoker;
  }

  public void setBasePath(String basePath) {
    this.basePath = basePath;
  }

  public String getBasePath() {
    return basePath;
  }

  /**
  * Create an Ezsignfolder
  * Create an Ezsignfolder
   * @param ezsigntemplatepublicCreateEzsignfolderV1Request 
   * @return EzsigntemplatepublicCreateEzsignfolderV1Response
  */
  public EzsigntemplatepublicCreateEzsignfolderV1Response ezsigntemplatepublicCreateEzsignfolderV1 (EzsigntemplatepublicCreateEzsignfolderV1Request ezsigntemplatepublicCreateEzsignfolderV1Request) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = ezsigntemplatepublicCreateEzsignfolderV1Request;
    // verify the required parameter 'ezsigntemplatepublicCreateEzsignfolderV1Request' is set
    if (ezsigntemplatepublicCreateEzsignfolderV1Request == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'ezsigntemplatepublicCreateEzsignfolderV1Request' when calling ezsigntemplatepublicCreateEzsignfolderV1",
        new ApiException(400, "Missing the required parameter 'ezsigntemplatepublicCreateEzsignfolderV1Request' when calling ezsigntemplatepublicCreateEzsignfolderV1"));
    }

    // create path and map variables
    String path = "/1/object/ezsigntemplatepublic/createEzsignfolder";

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "Authorization" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (EzsigntemplatepublicCreateEzsignfolderV1Response) ApiInvoker.deserialize(localVarResponse, "", EzsigntemplatepublicCreateEzsignfolderV1Response.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Create an Ezsignfolder
   * Create an Ezsignfolder
   * @param ezsigntemplatepublicCreateEzsignfolderV1Request 
  */
  public void ezsigntemplatepublicCreateEzsignfolderV1 (EzsigntemplatepublicCreateEzsignfolderV1Request ezsigntemplatepublicCreateEzsignfolderV1Request, final Response.Listener<EzsigntemplatepublicCreateEzsignfolderV1Response> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = ezsigntemplatepublicCreateEzsignfolderV1Request;

    // verify the required parameter 'ezsigntemplatepublicCreateEzsignfolderV1Request' is set
    if (ezsigntemplatepublicCreateEzsignfolderV1Request == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'ezsigntemplatepublicCreateEzsignfolderV1Request' when calling ezsigntemplatepublicCreateEzsignfolderV1",
        new ApiException(400, "Missing the required parameter 'ezsigntemplatepublicCreateEzsignfolderV1Request' when calling ezsigntemplatepublicCreateEzsignfolderV1"));
    }

    // create path and map variables
    String path = "/1/object/ezsigntemplatepublic/createEzsignfolder".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "Authorization" };

    try {
      apiInvoker.invokeAPI(basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((EzsigntemplatepublicCreateEzsignfolderV1Response) ApiInvoker.deserialize(localVarResponse,  "", EzsigntemplatepublicCreateEzsignfolderV1Response.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Create a new Ezsigntemplatepublic
  * The endpoint allows to create one or many elements at once.
   * @param ezsigntemplatepublicCreateObjectV1Request 
   * @return EzsigntemplatepublicCreateObjectV1Response
  */
  public EzsigntemplatepublicCreateObjectV1Response ezsigntemplatepublicCreateObjectV1 (EzsigntemplatepublicCreateObjectV1Request ezsigntemplatepublicCreateObjectV1Request) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = ezsigntemplatepublicCreateObjectV1Request;
    // verify the required parameter 'ezsigntemplatepublicCreateObjectV1Request' is set
    if (ezsigntemplatepublicCreateObjectV1Request == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'ezsigntemplatepublicCreateObjectV1Request' when calling ezsigntemplatepublicCreateObjectV1",
        new ApiException(400, "Missing the required parameter 'ezsigntemplatepublicCreateObjectV1Request' when calling ezsigntemplatepublicCreateObjectV1"));
    }

    // create path and map variables
    String path = "/1/object/ezsigntemplatepublic";

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "Authorization" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (EzsigntemplatepublicCreateObjectV1Response) ApiInvoker.deserialize(localVarResponse, "", EzsigntemplatepublicCreateObjectV1Response.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Create a new Ezsigntemplatepublic
   * The endpoint allows to create one or many elements at once.
   * @param ezsigntemplatepublicCreateObjectV1Request 
  */
  public void ezsigntemplatepublicCreateObjectV1 (EzsigntemplatepublicCreateObjectV1Request ezsigntemplatepublicCreateObjectV1Request, final Response.Listener<EzsigntemplatepublicCreateObjectV1Response> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = ezsigntemplatepublicCreateObjectV1Request;

    // verify the required parameter 'ezsigntemplatepublicCreateObjectV1Request' is set
    if (ezsigntemplatepublicCreateObjectV1Request == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'ezsigntemplatepublicCreateObjectV1Request' when calling ezsigntemplatepublicCreateObjectV1",
        new ApiException(400, "Missing the required parameter 'ezsigntemplatepublicCreateObjectV1Request' when calling ezsigntemplatepublicCreateObjectV1"));
    }

    // create path and map variables
    String path = "/1/object/ezsigntemplatepublic".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "Authorization" };

    try {
      apiInvoker.invokeAPI(basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((EzsigntemplatepublicCreateObjectV1Response) ApiInvoker.deserialize(localVarResponse,  "", EzsigntemplatepublicCreateObjectV1Response.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Edit an existing Ezsigntemplatepublic
  * 
   * @param pkiEzsigntemplatepublicID The unique ID of the Ezsigntemplatepublic
   * @param ezsigntemplatepublicEditObjectV1Request 
   * @return EzsigntemplatepublicEditObjectV1Response
  */
  public EzsigntemplatepublicEditObjectV1Response ezsigntemplatepublicEditObjectV1 (Integer pkiEzsigntemplatepublicID, EzsigntemplatepublicEditObjectV1Request ezsigntemplatepublicEditObjectV1Request) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = ezsigntemplatepublicEditObjectV1Request;
    // verify the required parameter 'pkiEzsigntemplatepublicID' is set
    if (pkiEzsigntemplatepublicID == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'pkiEzsigntemplatepublicID' when calling ezsigntemplatepublicEditObjectV1",
        new ApiException(400, "Missing the required parameter 'pkiEzsigntemplatepublicID' when calling ezsigntemplatepublicEditObjectV1"));
    }
    // verify the required parameter 'ezsigntemplatepublicEditObjectV1Request' is set
    if (ezsigntemplatepublicEditObjectV1Request == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'ezsigntemplatepublicEditObjectV1Request' when calling ezsigntemplatepublicEditObjectV1",
        new ApiException(400, "Missing the required parameter 'ezsigntemplatepublicEditObjectV1Request' when calling ezsigntemplatepublicEditObjectV1"));
    }

    // create path and map variables
    String path = "/1/object/ezsigntemplatepublic/{pkiEzsigntemplatepublicID}".replaceAll("\\{" + "pkiEzsigntemplatepublicID" + "\\}", apiInvoker.escapeString(pkiEzsigntemplatepublicID.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "Authorization" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "PUT", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (EzsigntemplatepublicEditObjectV1Response) ApiInvoker.deserialize(localVarResponse, "", EzsigntemplatepublicEditObjectV1Response.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Edit an existing Ezsigntemplatepublic
   * 
   * @param pkiEzsigntemplatepublicID The unique ID of the Ezsigntemplatepublic   * @param ezsigntemplatepublicEditObjectV1Request 
  */
  public void ezsigntemplatepublicEditObjectV1 (Integer pkiEzsigntemplatepublicID, EzsigntemplatepublicEditObjectV1Request ezsigntemplatepublicEditObjectV1Request, final Response.Listener<EzsigntemplatepublicEditObjectV1Response> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = ezsigntemplatepublicEditObjectV1Request;

    // verify the required parameter 'pkiEzsigntemplatepublicID' is set
    if (pkiEzsigntemplatepublicID == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'pkiEzsigntemplatepublicID' when calling ezsigntemplatepublicEditObjectV1",
        new ApiException(400, "Missing the required parameter 'pkiEzsigntemplatepublicID' when calling ezsigntemplatepublicEditObjectV1"));
    }
    // verify the required parameter 'ezsigntemplatepublicEditObjectV1Request' is set
    if (ezsigntemplatepublicEditObjectV1Request == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'ezsigntemplatepublicEditObjectV1Request' when calling ezsigntemplatepublicEditObjectV1",
        new ApiException(400, "Missing the required parameter 'ezsigntemplatepublicEditObjectV1Request' when calling ezsigntemplatepublicEditObjectV1"));
    }

    // create path and map variables
    String path = "/1/object/ezsigntemplatepublic/{pkiEzsigntemplatepublicID}".replaceAll("\\{format\\}","json").replaceAll("\\{" + "pkiEzsigntemplatepublicID" + "\\}", apiInvoker.escapeString(pkiEzsigntemplatepublicID.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "Authorization" };

    try {
      apiInvoker.invokeAPI(basePath, path, "PUT", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((EzsigntemplatepublicEditObjectV1Response) ApiInvoker.deserialize(localVarResponse,  "", EzsigntemplatepublicEditObjectV1Response.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Retrieve the Ezsigntemplatepublic details
  * Retrieve the Ezsigntemplatepublic details
   * @param ezsigntemplatepublicGetEzsigntemplatepublicDetailsV1Request 
   * @return EzsigntemplatepublicGetEzsigntemplatepublicDetailsV1Response
  */
  public EzsigntemplatepublicGetEzsigntemplatepublicDetailsV1Response ezsigntemplatepublicGetEzsigntemplatepublicDetailsV1 (EzsigntemplatepublicGetEzsigntemplatepublicDetailsV1Request ezsigntemplatepublicGetEzsigntemplatepublicDetailsV1Request) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = ezsigntemplatepublicGetEzsigntemplatepublicDetailsV1Request;
    // verify the required parameter 'ezsigntemplatepublicGetEzsigntemplatepublicDetailsV1Request' is set
    if (ezsigntemplatepublicGetEzsigntemplatepublicDetailsV1Request == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'ezsigntemplatepublicGetEzsigntemplatepublicDetailsV1Request' when calling ezsigntemplatepublicGetEzsigntemplatepublicDetailsV1",
        new ApiException(400, "Missing the required parameter 'ezsigntemplatepublicGetEzsigntemplatepublicDetailsV1Request' when calling ezsigntemplatepublicGetEzsigntemplatepublicDetailsV1"));
    }

    // create path and map variables
    String path = "/1/object/ezsigntemplatepublic/getEzsigntemplatepublicDetails";

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "Authorization" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (EzsigntemplatepublicGetEzsigntemplatepublicDetailsV1Response) ApiInvoker.deserialize(localVarResponse, "", EzsigntemplatepublicGetEzsigntemplatepublicDetailsV1Response.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Retrieve the Ezsigntemplatepublic details
   * Retrieve the Ezsigntemplatepublic details
   * @param ezsigntemplatepublicGetEzsigntemplatepublicDetailsV1Request 
  */
  public void ezsigntemplatepublicGetEzsigntemplatepublicDetailsV1 (EzsigntemplatepublicGetEzsigntemplatepublicDetailsV1Request ezsigntemplatepublicGetEzsigntemplatepublicDetailsV1Request, final Response.Listener<EzsigntemplatepublicGetEzsigntemplatepublicDetailsV1Response> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = ezsigntemplatepublicGetEzsigntemplatepublicDetailsV1Request;

    // verify the required parameter 'ezsigntemplatepublicGetEzsigntemplatepublicDetailsV1Request' is set
    if (ezsigntemplatepublicGetEzsigntemplatepublicDetailsV1Request == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'ezsigntemplatepublicGetEzsigntemplatepublicDetailsV1Request' when calling ezsigntemplatepublicGetEzsigntemplatepublicDetailsV1",
        new ApiException(400, "Missing the required parameter 'ezsigntemplatepublicGetEzsigntemplatepublicDetailsV1Request' when calling ezsigntemplatepublicGetEzsigntemplatepublicDetailsV1"));
    }

    // create path and map variables
    String path = "/1/object/ezsigntemplatepublic/getEzsigntemplatepublicDetails".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "Authorization" };

    try {
      apiInvoker.invokeAPI(basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((EzsigntemplatepublicGetEzsigntemplatepublicDetailsV1Response) ApiInvoker.deserialize(localVarResponse,  "", EzsigntemplatepublicGetEzsigntemplatepublicDetailsV1Response.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Retrieve an existing Ezsigntemplatepublic&#39;s forms data
  * 
   * @param pkiEzsigntemplatepublicID 
   * @return EzsigntemplatepublicGetFormsDataV1Response
  */
  public EzsigntemplatepublicGetFormsDataV1Response ezsigntemplatepublicGetFormsDataV1 (Integer pkiEzsigntemplatepublicID) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'pkiEzsigntemplatepublicID' is set
    if (pkiEzsigntemplatepublicID == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'pkiEzsigntemplatepublicID' when calling ezsigntemplatepublicGetFormsDataV1",
        new ApiException(400, "Missing the required parameter 'pkiEzsigntemplatepublicID' when calling ezsigntemplatepublicGetFormsDataV1"));
    }

    // create path and map variables
    String path = "/1/object/ezsigntemplatepublic/{pkiEzsigntemplatepublicID}/getFormsData".replaceAll("\\{" + "pkiEzsigntemplatepublicID" + "\\}", apiInvoker.escapeString(pkiEzsigntemplatepublicID.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "Authorization" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (EzsigntemplatepublicGetFormsDataV1Response) ApiInvoker.deserialize(localVarResponse, "", EzsigntemplatepublicGetFormsDataV1Response.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Retrieve an existing Ezsigntemplatepublic&#39;s forms data
   * 
   * @param pkiEzsigntemplatepublicID 
  */
  public void ezsigntemplatepublicGetFormsDataV1 (Integer pkiEzsigntemplatepublicID, final Response.Listener<EzsigntemplatepublicGetFormsDataV1Response> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'pkiEzsigntemplatepublicID' is set
    if (pkiEzsigntemplatepublicID == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'pkiEzsigntemplatepublicID' when calling ezsigntemplatepublicGetFormsDataV1",
        new ApiException(400, "Missing the required parameter 'pkiEzsigntemplatepublicID' when calling ezsigntemplatepublicGetFormsDataV1"));
    }

    // create path and map variables
    String path = "/1/object/ezsigntemplatepublic/{pkiEzsigntemplatepublicID}/getFormsData".replaceAll("\\{format\\}","json").replaceAll("\\{" + "pkiEzsigntemplatepublicID" + "\\}", apiInvoker.escapeString(pkiEzsigntemplatepublicID.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "Authorization" };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((EzsigntemplatepublicGetFormsDataV1Response) ApiInvoker.deserialize(localVarResponse,  "", EzsigntemplatepublicGetFormsDataV1Response.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Retrieve Ezsigntemplatepublic list
  * Enum values that can be filtered in query parameter *sFilter*:  | Variable | Valid values | |---|---| | eEzsigntemplatepublicLimittype | Hour&lt;br&gt;Day&lt;br&gt;Month&lt;br&gt;Total |
   * @param eOrderBy Specify how you want the results to be sorted
   * @param iRowMax 
   * @param iRowOffset 
   * @param acceptLanguage 
   * @param sFilter 
   * @return EzsigntemplatepublicGetListV1Response
  */
  public EzsigntemplatepublicGetListV1Response ezsigntemplatepublicGetListV1 (String eOrderBy, Integer iRowMax, Integer iRowOffset, HeaderAcceptLanguage acceptLanguage, String sFilter) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;

    // create path and map variables
    String path = "/1/object/ezsigntemplatepublic/getList";

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    queryParams.addAll(ApiInvoker.parameterToPairs("", "eOrderBy", eOrderBy));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "iRowMax", iRowMax));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "iRowOffset", iRowOffset));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "sFilter", sFilter));
    headerParams.put("Accept-Language", ApiInvoker.parameterToString(acceptLanguage));
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "Authorization" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (EzsigntemplatepublicGetListV1Response) ApiInvoker.deserialize(localVarResponse, "", EzsigntemplatepublicGetListV1Response.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Retrieve Ezsigntemplatepublic list
   * Enum values that can be filtered in query parameter *sFilter*:  | Variable | Valid values | |---|---| | eEzsigntemplatepublicLimittype | Hour&lt;br&gt;Day&lt;br&gt;Month&lt;br&gt;Total |
   * @param eOrderBy Specify how you want the results to be sorted   * @param iRowMax    * @param iRowOffset    * @param acceptLanguage    * @param sFilter 
  */
  public void ezsigntemplatepublicGetListV1 (String eOrderBy, Integer iRowMax, Integer iRowOffset, HeaderAcceptLanguage acceptLanguage, String sFilter, final Response.Listener<EzsigntemplatepublicGetListV1Response> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;


    // create path and map variables
    String path = "/1/object/ezsigntemplatepublic/getList".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();

    queryParams.addAll(ApiInvoker.parameterToPairs("", "eOrderBy", eOrderBy));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "iRowMax", iRowMax));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "iRowOffset", iRowOffset));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "sFilter", sFilter));

    headerParams.put("Accept-Language", ApiInvoker.parameterToString(acceptLanguage));

    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "Authorization" };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((EzsigntemplatepublicGetListV1Response) ApiInvoker.deserialize(localVarResponse,  "", EzsigntemplatepublicGetListV1Response.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Retrieve an existing Ezsigntemplatepublic
  * 
   * @param pkiEzsigntemplatepublicID The unique ID of the Ezsigntemplatepublic
   * @return EzsigntemplatepublicGetObjectV2Response
  */
  public EzsigntemplatepublicGetObjectV2Response ezsigntemplatepublicGetObjectV2 (Integer pkiEzsigntemplatepublicID) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'pkiEzsigntemplatepublicID' is set
    if (pkiEzsigntemplatepublicID == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'pkiEzsigntemplatepublicID' when calling ezsigntemplatepublicGetObjectV2",
        new ApiException(400, "Missing the required parameter 'pkiEzsigntemplatepublicID' when calling ezsigntemplatepublicGetObjectV2"));
    }

    // create path and map variables
    String path = "/2/object/ezsigntemplatepublic/{pkiEzsigntemplatepublicID}".replaceAll("\\{" + "pkiEzsigntemplatepublicID" + "\\}", apiInvoker.escapeString(pkiEzsigntemplatepublicID.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "Authorization" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (EzsigntemplatepublicGetObjectV2Response) ApiInvoker.deserialize(localVarResponse, "", EzsigntemplatepublicGetObjectV2Response.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Retrieve an existing Ezsigntemplatepublic
   * 
   * @param pkiEzsigntemplatepublicID The unique ID of the Ezsigntemplatepublic
  */
  public void ezsigntemplatepublicGetObjectV2 (Integer pkiEzsigntemplatepublicID, final Response.Listener<EzsigntemplatepublicGetObjectV2Response> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'pkiEzsigntemplatepublicID' is set
    if (pkiEzsigntemplatepublicID == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'pkiEzsigntemplatepublicID' when calling ezsigntemplatepublicGetObjectV2",
        new ApiException(400, "Missing the required parameter 'pkiEzsigntemplatepublicID' when calling ezsigntemplatepublicGetObjectV2"));
    }

    // create path and map variables
    String path = "/2/object/ezsigntemplatepublic/{pkiEzsigntemplatepublicID}".replaceAll("\\{format\\}","json").replaceAll("\\{" + "pkiEzsigntemplatepublicID" + "\\}", apiInvoker.escapeString(pkiEzsigntemplatepublicID.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "Authorization" };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((EzsigntemplatepublicGetObjectV2Response) ApiInvoker.deserialize(localVarResponse,  "", EzsigntemplatepublicGetObjectV2Response.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Reset the limit exceeded counter
  * 
   * @param pkiEzsigntemplatepublicID 
   * @param body 
   * @return EzsigntemplatepublicResetLimitExceededCounterV1Response
  */
  public EzsigntemplatepublicResetLimitExceededCounterV1Response ezsigntemplatepublicResetLimitExceededCounterV1 (Integer pkiEzsigntemplatepublicID, Object body) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = body;
    // verify the required parameter 'pkiEzsigntemplatepublicID' is set
    if (pkiEzsigntemplatepublicID == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'pkiEzsigntemplatepublicID' when calling ezsigntemplatepublicResetLimitExceededCounterV1",
        new ApiException(400, "Missing the required parameter 'pkiEzsigntemplatepublicID' when calling ezsigntemplatepublicResetLimitExceededCounterV1"));
    }
    // verify the required parameter 'body' is set
    if (body == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'body' when calling ezsigntemplatepublicResetLimitExceededCounterV1",
        new ApiException(400, "Missing the required parameter 'body' when calling ezsigntemplatepublicResetLimitExceededCounterV1"));
    }

    // create path and map variables
    String path = "/1/object/ezsigntemplatepublic/{pkiEzsigntemplatepublicID}/resetLimitExceededCounter".replaceAll("\\{" + "pkiEzsigntemplatepublicID" + "\\}", apiInvoker.escapeString(pkiEzsigntemplatepublicID.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "Authorization" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (EzsigntemplatepublicResetLimitExceededCounterV1Response) ApiInvoker.deserialize(localVarResponse, "", EzsigntemplatepublicResetLimitExceededCounterV1Response.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Reset the limit exceeded counter
   * 
   * @param pkiEzsigntemplatepublicID    * @param body 
  */
  public void ezsigntemplatepublicResetLimitExceededCounterV1 (Integer pkiEzsigntemplatepublicID, Object body, final Response.Listener<EzsigntemplatepublicResetLimitExceededCounterV1Response> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = body;

    // verify the required parameter 'pkiEzsigntemplatepublicID' is set
    if (pkiEzsigntemplatepublicID == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'pkiEzsigntemplatepublicID' when calling ezsigntemplatepublicResetLimitExceededCounterV1",
        new ApiException(400, "Missing the required parameter 'pkiEzsigntemplatepublicID' when calling ezsigntemplatepublicResetLimitExceededCounterV1"));
    }
    // verify the required parameter 'body' is set
    if (body == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'body' when calling ezsigntemplatepublicResetLimitExceededCounterV1",
        new ApiException(400, "Missing the required parameter 'body' when calling ezsigntemplatepublicResetLimitExceededCounterV1"));
    }

    // create path and map variables
    String path = "/1/object/ezsigntemplatepublic/{pkiEzsigntemplatepublicID}/resetLimitExceededCounter".replaceAll("\\{format\\}","json").replaceAll("\\{" + "pkiEzsigntemplatepublicID" + "\\}", apiInvoker.escapeString(pkiEzsigntemplatepublicID.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "Authorization" };

    try {
      apiInvoker.invokeAPI(basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((EzsigntemplatepublicResetLimitExceededCounterV1Response) ApiInvoker.deserialize(localVarResponse,  "", EzsigntemplatepublicResetLimitExceededCounterV1Response.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Reset the Ezsigntemplatepublic url
  * 
   * @param pkiEzsigntemplatepublicID 
   * @param body 
   * @return EzsigntemplatepublicResetUrlV1Response
  */
  public EzsigntemplatepublicResetUrlV1Response ezsigntemplatepublicResetUrlV1 (Integer pkiEzsigntemplatepublicID, Object body) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = body;
    // verify the required parameter 'pkiEzsigntemplatepublicID' is set
    if (pkiEzsigntemplatepublicID == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'pkiEzsigntemplatepublicID' when calling ezsigntemplatepublicResetUrlV1",
        new ApiException(400, "Missing the required parameter 'pkiEzsigntemplatepublicID' when calling ezsigntemplatepublicResetUrlV1"));
    }
    // verify the required parameter 'body' is set
    if (body == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'body' when calling ezsigntemplatepublicResetUrlV1",
        new ApiException(400, "Missing the required parameter 'body' when calling ezsigntemplatepublicResetUrlV1"));
    }

    // create path and map variables
    String path = "/1/object/ezsigntemplatepublic/{pkiEzsigntemplatepublicID}/resetUrl".replaceAll("\\{" + "pkiEzsigntemplatepublicID" + "\\}", apiInvoker.escapeString(pkiEzsigntemplatepublicID.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "Authorization" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (EzsigntemplatepublicResetUrlV1Response) ApiInvoker.deserialize(localVarResponse, "", EzsigntemplatepublicResetUrlV1Response.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Reset the Ezsigntemplatepublic url
   * 
   * @param pkiEzsigntemplatepublicID    * @param body 
  */
  public void ezsigntemplatepublicResetUrlV1 (Integer pkiEzsigntemplatepublicID, Object body, final Response.Listener<EzsigntemplatepublicResetUrlV1Response> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = body;

    // verify the required parameter 'pkiEzsigntemplatepublicID' is set
    if (pkiEzsigntemplatepublicID == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'pkiEzsigntemplatepublicID' when calling ezsigntemplatepublicResetUrlV1",
        new ApiException(400, "Missing the required parameter 'pkiEzsigntemplatepublicID' when calling ezsigntemplatepublicResetUrlV1"));
    }
    // verify the required parameter 'body' is set
    if (body == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'body' when calling ezsigntemplatepublicResetUrlV1",
        new ApiException(400, "Missing the required parameter 'body' when calling ezsigntemplatepublicResetUrlV1"));
    }

    // create path and map variables
    String path = "/1/object/ezsigntemplatepublic/{pkiEzsigntemplatepublicID}/resetUrl".replaceAll("\\{format\\}","json").replaceAll("\\{" + "pkiEzsigntemplatepublicID" + "\\}", apiInvoker.escapeString(pkiEzsigntemplatepublicID.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "Authorization" };

    try {
      apiInvoker.invokeAPI(basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((EzsigntemplatepublicResetUrlV1Response) ApiInvoker.deserialize(localVarResponse,  "", EzsigntemplatepublicResetUrlV1Response.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
}
