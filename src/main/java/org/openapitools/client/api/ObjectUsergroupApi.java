/**
 * eZmax API Definition (Full)
 * This API expose all the functionnalities for the eZmax and eZsign applications.
 *
 * The version of the OpenAPI document: 1.1.18
 * Contact: support-api@ezmax.ca
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package org.openapitools.client.api;

import eZmaxAPI.ApiInvoker;
import eZmaxAPI.ApiException;
import eZmaxAPI.Pair;

import org.openapitools.client.model.*;

import java.util.*;

import com.android.volley.Response;
import com.android.volley.VolleyError;

import org.openapitools.client.model.CommonResponseError;
import java.io.File;
import org.openapitools.client.model.HeaderAcceptLanguage;
import org.openapitools.client.model.UsergroupCreateObjectV1Request;
import org.openapitools.client.model.UsergroupCreateObjectV1Response;
import org.openapitools.client.model.UsergroupEditObjectV1Request;
import org.openapitools.client.model.UsergroupEditObjectV1Response;
import org.openapitools.client.model.UsergroupEditPermissionsV1Request;
import org.openapitools.client.model.UsergroupEditPermissionsV1Response;
import org.openapitools.client.model.UsergroupEditUsergroupdelegationsV1Request;
import org.openapitools.client.model.UsergroupEditUsergroupdelegationsV1Response;
import org.openapitools.client.model.UsergroupEditUsergroupmembershipsV1Request;
import org.openapitools.client.model.UsergroupEditUsergroupmembershipsV1Response;
import org.openapitools.client.model.UsergroupGetAutocompleteV2Response;
import org.openapitools.client.model.UsergroupGetListV1Response;
import org.openapitools.client.model.UsergroupGetObjectV2Response;
import org.openapitools.client.model.UsergroupGetPermissionsV1Response;
import org.openapitools.client.model.UsergroupGetUsergroupdelegationsV1Response;
import org.openapitools.client.model.UsergroupGetUsergroupmembershipsV1Response;

import org.apache.http.HttpEntity;
import org.apache.http.entity.mime.MultipartEntityBuilder;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.concurrent.ExecutionException;
import java.util.concurrent.TimeoutException;

public class ObjectUsergroupApi {
  String basePath = "https://prod.api.appcluster01.ca-central-1.ezmax.com/rest";
  ApiInvoker apiInvoker = ApiInvoker.getInstance();

  public void addHeader(String key, String value) {
    getInvoker().addDefaultHeader(key, value);
  }

  public ApiInvoker getInvoker() {
    return apiInvoker;
  }

  public void setBasePath(String basePath) {
    this.basePath = basePath;
  }

  public String getBasePath() {
    return basePath;
  }

  /**
  * Create a new Usergroup
  * The endpoint allows to create one or many elements at once.
   * @param usergroupCreateObjectV1Request 
   * @return UsergroupCreateObjectV1Response
  */
  public UsergroupCreateObjectV1Response usergroupCreateObjectV1 (UsergroupCreateObjectV1Request usergroupCreateObjectV1Request) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = usergroupCreateObjectV1Request;
    // verify the required parameter 'usergroupCreateObjectV1Request' is set
    if (usergroupCreateObjectV1Request == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'usergroupCreateObjectV1Request' when calling usergroupCreateObjectV1",
        new ApiException(400, "Missing the required parameter 'usergroupCreateObjectV1Request' when calling usergroupCreateObjectV1"));
    }

    // create path and map variables
    String path = "/1/object/usergroup";

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "Authorization" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (UsergroupCreateObjectV1Response) ApiInvoker.deserialize(localVarResponse, "", UsergroupCreateObjectV1Response.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Create a new Usergroup
   * The endpoint allows to create one or many elements at once.
   * @param usergroupCreateObjectV1Request 
  */
  public void usergroupCreateObjectV1 (UsergroupCreateObjectV1Request usergroupCreateObjectV1Request, final Response.Listener<UsergroupCreateObjectV1Response> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = usergroupCreateObjectV1Request;

    // verify the required parameter 'usergroupCreateObjectV1Request' is set
    if (usergroupCreateObjectV1Request == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'usergroupCreateObjectV1Request' when calling usergroupCreateObjectV1",
        new ApiException(400, "Missing the required parameter 'usergroupCreateObjectV1Request' when calling usergroupCreateObjectV1"));
    }

    // create path and map variables
    String path = "/1/object/usergroup".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "Authorization" };

    try {
      apiInvoker.invokeAPI(basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((UsergroupCreateObjectV1Response) ApiInvoker.deserialize(localVarResponse,  "", UsergroupCreateObjectV1Response.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Edit an existing Usergroup
  * 
   * @param pkiUsergroupID 
   * @param usergroupEditObjectV1Request 
   * @return UsergroupEditObjectV1Response
  */
  public UsergroupEditObjectV1Response usergroupEditObjectV1 (Integer pkiUsergroupID, UsergroupEditObjectV1Request usergroupEditObjectV1Request) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = usergroupEditObjectV1Request;
    // verify the required parameter 'pkiUsergroupID' is set
    if (pkiUsergroupID == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'pkiUsergroupID' when calling usergroupEditObjectV1",
        new ApiException(400, "Missing the required parameter 'pkiUsergroupID' when calling usergroupEditObjectV1"));
    }
    // verify the required parameter 'usergroupEditObjectV1Request' is set
    if (usergroupEditObjectV1Request == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'usergroupEditObjectV1Request' when calling usergroupEditObjectV1",
        new ApiException(400, "Missing the required parameter 'usergroupEditObjectV1Request' when calling usergroupEditObjectV1"));
    }

    // create path and map variables
    String path = "/1/object/usergroup/{pkiUsergroupID}".replaceAll("\\{" + "pkiUsergroupID" + "\\}", apiInvoker.escapeString(pkiUsergroupID.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "Authorization" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "PUT", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (UsergroupEditObjectV1Response) ApiInvoker.deserialize(localVarResponse, "", UsergroupEditObjectV1Response.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Edit an existing Usergroup
   * 
   * @param pkiUsergroupID    * @param usergroupEditObjectV1Request 
  */
  public void usergroupEditObjectV1 (Integer pkiUsergroupID, UsergroupEditObjectV1Request usergroupEditObjectV1Request, final Response.Listener<UsergroupEditObjectV1Response> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = usergroupEditObjectV1Request;

    // verify the required parameter 'pkiUsergroupID' is set
    if (pkiUsergroupID == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'pkiUsergroupID' when calling usergroupEditObjectV1",
        new ApiException(400, "Missing the required parameter 'pkiUsergroupID' when calling usergroupEditObjectV1"));
    }
    // verify the required parameter 'usergroupEditObjectV1Request' is set
    if (usergroupEditObjectV1Request == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'usergroupEditObjectV1Request' when calling usergroupEditObjectV1",
        new ApiException(400, "Missing the required parameter 'usergroupEditObjectV1Request' when calling usergroupEditObjectV1"));
    }

    // create path and map variables
    String path = "/1/object/usergroup/{pkiUsergroupID}".replaceAll("\\{format\\}","json").replaceAll("\\{" + "pkiUsergroupID" + "\\}", apiInvoker.escapeString(pkiUsergroupID.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "Authorization" };

    try {
      apiInvoker.invokeAPI(basePath, path, "PUT", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((UsergroupEditObjectV1Response) ApiInvoker.deserialize(localVarResponse,  "", UsergroupEditObjectV1Response.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Edit multiple Permissions
  * Using this endpoint, you can edit multiple Permissions at the same time.
   * @param pkiUsergroupID 
   * @param usergroupEditPermissionsV1Request 
   * @return UsergroupEditPermissionsV1Response
  */
  public UsergroupEditPermissionsV1Response usergroupEditPermissionsV1 (Integer pkiUsergroupID, UsergroupEditPermissionsV1Request usergroupEditPermissionsV1Request) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = usergroupEditPermissionsV1Request;
    // verify the required parameter 'pkiUsergroupID' is set
    if (pkiUsergroupID == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'pkiUsergroupID' when calling usergroupEditPermissionsV1",
        new ApiException(400, "Missing the required parameter 'pkiUsergroupID' when calling usergroupEditPermissionsV1"));
    }
    // verify the required parameter 'usergroupEditPermissionsV1Request' is set
    if (usergroupEditPermissionsV1Request == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'usergroupEditPermissionsV1Request' when calling usergroupEditPermissionsV1",
        new ApiException(400, "Missing the required parameter 'usergroupEditPermissionsV1Request' when calling usergroupEditPermissionsV1"));
    }

    // create path and map variables
    String path = "/1/object/usergroup/{pkiUsergroupID}/editPermissions".replaceAll("\\{" + "pkiUsergroupID" + "\\}", apiInvoker.escapeString(pkiUsergroupID.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "Authorization" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "PUT", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (UsergroupEditPermissionsV1Response) ApiInvoker.deserialize(localVarResponse, "", UsergroupEditPermissionsV1Response.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Edit multiple Permissions
   * Using this endpoint, you can edit multiple Permissions at the same time.
   * @param pkiUsergroupID    * @param usergroupEditPermissionsV1Request 
  */
  public void usergroupEditPermissionsV1 (Integer pkiUsergroupID, UsergroupEditPermissionsV1Request usergroupEditPermissionsV1Request, final Response.Listener<UsergroupEditPermissionsV1Response> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = usergroupEditPermissionsV1Request;

    // verify the required parameter 'pkiUsergroupID' is set
    if (pkiUsergroupID == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'pkiUsergroupID' when calling usergroupEditPermissionsV1",
        new ApiException(400, "Missing the required parameter 'pkiUsergroupID' when calling usergroupEditPermissionsV1"));
    }
    // verify the required parameter 'usergroupEditPermissionsV1Request' is set
    if (usergroupEditPermissionsV1Request == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'usergroupEditPermissionsV1Request' when calling usergroupEditPermissionsV1",
        new ApiException(400, "Missing the required parameter 'usergroupEditPermissionsV1Request' when calling usergroupEditPermissionsV1"));
    }

    // create path and map variables
    String path = "/1/object/usergroup/{pkiUsergroupID}/editPermissions".replaceAll("\\{format\\}","json").replaceAll("\\{" + "pkiUsergroupID" + "\\}", apiInvoker.escapeString(pkiUsergroupID.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "Authorization" };

    try {
      apiInvoker.invokeAPI(basePath, path, "PUT", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((UsergroupEditPermissionsV1Response) ApiInvoker.deserialize(localVarResponse,  "", UsergroupEditPermissionsV1Response.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Edit multiple Usergroupdelegations
  * Edit multiple Usergroupdelegations
   * @param pkiUsergroupID 
   * @param usergroupEditUsergroupdelegationsV1Request 
   * @return UsergroupEditUsergroupdelegationsV1Response
  */
  public UsergroupEditUsergroupdelegationsV1Response usergroupEditUsergroupdelegationsV1 (Integer pkiUsergroupID, UsergroupEditUsergroupdelegationsV1Request usergroupEditUsergroupdelegationsV1Request) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = usergroupEditUsergroupdelegationsV1Request;
    // verify the required parameter 'pkiUsergroupID' is set
    if (pkiUsergroupID == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'pkiUsergroupID' when calling usergroupEditUsergroupdelegationsV1",
        new ApiException(400, "Missing the required parameter 'pkiUsergroupID' when calling usergroupEditUsergroupdelegationsV1"));
    }
    // verify the required parameter 'usergroupEditUsergroupdelegationsV1Request' is set
    if (usergroupEditUsergroupdelegationsV1Request == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'usergroupEditUsergroupdelegationsV1Request' when calling usergroupEditUsergroupdelegationsV1",
        new ApiException(400, "Missing the required parameter 'usergroupEditUsergroupdelegationsV1Request' when calling usergroupEditUsergroupdelegationsV1"));
    }

    // create path and map variables
    String path = "/1/object/usergroup/{pkiUsergroupID}/editUsergroupdelegations".replaceAll("\\{" + "pkiUsergroupID" + "\\}", apiInvoker.escapeString(pkiUsergroupID.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "Authorization" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "PUT", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (UsergroupEditUsergroupdelegationsV1Response) ApiInvoker.deserialize(localVarResponse, "", UsergroupEditUsergroupdelegationsV1Response.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Edit multiple Usergroupdelegations
   * Edit multiple Usergroupdelegations
   * @param pkiUsergroupID    * @param usergroupEditUsergroupdelegationsV1Request 
  */
  public void usergroupEditUsergroupdelegationsV1 (Integer pkiUsergroupID, UsergroupEditUsergroupdelegationsV1Request usergroupEditUsergroupdelegationsV1Request, final Response.Listener<UsergroupEditUsergroupdelegationsV1Response> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = usergroupEditUsergroupdelegationsV1Request;

    // verify the required parameter 'pkiUsergroupID' is set
    if (pkiUsergroupID == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'pkiUsergroupID' when calling usergroupEditUsergroupdelegationsV1",
        new ApiException(400, "Missing the required parameter 'pkiUsergroupID' when calling usergroupEditUsergroupdelegationsV1"));
    }
    // verify the required parameter 'usergroupEditUsergroupdelegationsV1Request' is set
    if (usergroupEditUsergroupdelegationsV1Request == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'usergroupEditUsergroupdelegationsV1Request' when calling usergroupEditUsergroupdelegationsV1",
        new ApiException(400, "Missing the required parameter 'usergroupEditUsergroupdelegationsV1Request' when calling usergroupEditUsergroupdelegationsV1"));
    }

    // create path and map variables
    String path = "/1/object/usergroup/{pkiUsergroupID}/editUsergroupdelegations".replaceAll("\\{format\\}","json").replaceAll("\\{" + "pkiUsergroupID" + "\\}", apiInvoker.escapeString(pkiUsergroupID.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "Authorization" };

    try {
      apiInvoker.invokeAPI(basePath, path, "PUT", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((UsergroupEditUsergroupdelegationsV1Response) ApiInvoker.deserialize(localVarResponse,  "", UsergroupEditUsergroupdelegationsV1Response.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Edit multiple Usergroupmemberships
  * Using this endpoint, you can edit multiple Usergroupmemberships at the same time.
   * @param pkiUsergroupID 
   * @param usergroupEditUsergroupmembershipsV1Request 
   * @return UsergroupEditUsergroupmembershipsV1Response
  */
  public UsergroupEditUsergroupmembershipsV1Response usergroupEditUsergroupmembershipsV1 (Integer pkiUsergroupID, UsergroupEditUsergroupmembershipsV1Request usergroupEditUsergroupmembershipsV1Request) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = usergroupEditUsergroupmembershipsV1Request;
    // verify the required parameter 'pkiUsergroupID' is set
    if (pkiUsergroupID == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'pkiUsergroupID' when calling usergroupEditUsergroupmembershipsV1",
        new ApiException(400, "Missing the required parameter 'pkiUsergroupID' when calling usergroupEditUsergroupmembershipsV1"));
    }
    // verify the required parameter 'usergroupEditUsergroupmembershipsV1Request' is set
    if (usergroupEditUsergroupmembershipsV1Request == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'usergroupEditUsergroupmembershipsV1Request' when calling usergroupEditUsergroupmembershipsV1",
        new ApiException(400, "Missing the required parameter 'usergroupEditUsergroupmembershipsV1Request' when calling usergroupEditUsergroupmembershipsV1"));
    }

    // create path and map variables
    String path = "/1/object/usergroup/{pkiUsergroupID}/editUsergroupmemberships".replaceAll("\\{" + "pkiUsergroupID" + "\\}", apiInvoker.escapeString(pkiUsergroupID.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "Authorization" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "PUT", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (UsergroupEditUsergroupmembershipsV1Response) ApiInvoker.deserialize(localVarResponse, "", UsergroupEditUsergroupmembershipsV1Response.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Edit multiple Usergroupmemberships
   * Using this endpoint, you can edit multiple Usergroupmemberships at the same time.
   * @param pkiUsergroupID    * @param usergroupEditUsergroupmembershipsV1Request 
  */
  public void usergroupEditUsergroupmembershipsV1 (Integer pkiUsergroupID, UsergroupEditUsergroupmembershipsV1Request usergroupEditUsergroupmembershipsV1Request, final Response.Listener<UsergroupEditUsergroupmembershipsV1Response> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = usergroupEditUsergroupmembershipsV1Request;

    // verify the required parameter 'pkiUsergroupID' is set
    if (pkiUsergroupID == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'pkiUsergroupID' when calling usergroupEditUsergroupmembershipsV1",
        new ApiException(400, "Missing the required parameter 'pkiUsergroupID' when calling usergroupEditUsergroupmembershipsV1"));
    }
    // verify the required parameter 'usergroupEditUsergroupmembershipsV1Request' is set
    if (usergroupEditUsergroupmembershipsV1Request == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'usergroupEditUsergroupmembershipsV1Request' when calling usergroupEditUsergroupmembershipsV1",
        new ApiException(400, "Missing the required parameter 'usergroupEditUsergroupmembershipsV1Request' when calling usergroupEditUsergroupmembershipsV1"));
    }

    // create path and map variables
    String path = "/1/object/usergroup/{pkiUsergroupID}/editUsergroupmemberships".replaceAll("\\{format\\}","json").replaceAll("\\{" + "pkiUsergroupID" + "\\}", apiInvoker.escapeString(pkiUsergroupID.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "Authorization" };

    try {
      apiInvoker.invokeAPI(basePath, path, "PUT", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((UsergroupEditUsergroupmembershipsV1Response) ApiInvoker.deserialize(localVarResponse,  "", UsergroupEditUsergroupmembershipsV1Response.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Retrieve Usergroups and IDs
  * Get the list of Usergroup to be used in a dropdown or autocomplete control.
   * @param sSelector The type of Usergroups to return
   * @param eFilterActive Specify which results we want to display.
   * @param sQuery Allow to filter the returned results
   * @param acceptLanguage 
   * @return UsergroupGetAutocompleteV2Response
  */
  public UsergroupGetAutocompleteV2Response usergroupGetAutocompleteV2 (String sSelector, String eFilterActive, String sQuery, HeaderAcceptLanguage acceptLanguage) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'sSelector' is set
    if (sSelector == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'sSelector' when calling usergroupGetAutocompleteV2",
        new ApiException(400, "Missing the required parameter 'sSelector' when calling usergroupGetAutocompleteV2"));
    }

    // create path and map variables
    String path = "/2/object/usergroup/getAutocomplete/{sSelector}".replaceAll("\\{" + "sSelector" + "\\}", apiInvoker.escapeString(sSelector.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    queryParams.addAll(ApiInvoker.parameterToPairs("", "eFilterActive", eFilterActive));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "sQuery", sQuery));
    headerParams.put("Accept-Language", ApiInvoker.parameterToString(acceptLanguage));
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "Authorization" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (UsergroupGetAutocompleteV2Response) ApiInvoker.deserialize(localVarResponse, "", UsergroupGetAutocompleteV2Response.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Retrieve Usergroups and IDs
   * Get the list of Usergroup to be used in a dropdown or autocomplete control.
   * @param sSelector The type of Usergroups to return   * @param eFilterActive Specify which results we want to display.   * @param sQuery Allow to filter the returned results   * @param acceptLanguage 
  */
  public void usergroupGetAutocompleteV2 (String sSelector, String eFilterActive, String sQuery, HeaderAcceptLanguage acceptLanguage, final Response.Listener<UsergroupGetAutocompleteV2Response> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'sSelector' is set
    if (sSelector == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'sSelector' when calling usergroupGetAutocompleteV2",
        new ApiException(400, "Missing the required parameter 'sSelector' when calling usergroupGetAutocompleteV2"));
    }

    // create path and map variables
    String path = "/2/object/usergroup/getAutocomplete/{sSelector}".replaceAll("\\{format\\}","json").replaceAll("\\{" + "sSelector" + "\\}", apiInvoker.escapeString(sSelector.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();

    queryParams.addAll(ApiInvoker.parameterToPairs("", "eFilterActive", eFilterActive));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "sQuery", sQuery));

    headerParams.put("Accept-Language", ApiInvoker.parameterToString(acceptLanguage));

    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "Authorization" };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((UsergroupGetAutocompleteV2Response) ApiInvoker.deserialize(localVarResponse,  "", UsergroupGetAutocompleteV2Response.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Retrieve Usergroup list
  * 
   * @param eOrderBy Specify how you want the results to be sorted
   * @param iRowMax 
   * @param iRowOffset 
   * @param acceptLanguage 
   * @param sFilter 
   * @return UsergroupGetListV1Response
  */
  public UsergroupGetListV1Response usergroupGetListV1 (String eOrderBy, Integer iRowMax, Integer iRowOffset, HeaderAcceptLanguage acceptLanguage, String sFilter) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;

    // create path and map variables
    String path = "/1/object/usergroup/getList";

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    queryParams.addAll(ApiInvoker.parameterToPairs("", "eOrderBy", eOrderBy));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "iRowMax", iRowMax));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "iRowOffset", iRowOffset));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "sFilter", sFilter));
    headerParams.put("Accept-Language", ApiInvoker.parameterToString(acceptLanguage));
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "Authorization" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (UsergroupGetListV1Response) ApiInvoker.deserialize(localVarResponse, "", UsergroupGetListV1Response.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Retrieve Usergroup list
   * 
   * @param eOrderBy Specify how you want the results to be sorted   * @param iRowMax    * @param iRowOffset    * @param acceptLanguage    * @param sFilter 
  */
  public void usergroupGetListV1 (String eOrderBy, Integer iRowMax, Integer iRowOffset, HeaderAcceptLanguage acceptLanguage, String sFilter, final Response.Listener<UsergroupGetListV1Response> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;


    // create path and map variables
    String path = "/1/object/usergroup/getList".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();

    queryParams.addAll(ApiInvoker.parameterToPairs("", "eOrderBy", eOrderBy));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "iRowMax", iRowMax));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "iRowOffset", iRowOffset));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "sFilter", sFilter));

    headerParams.put("Accept-Language", ApiInvoker.parameterToString(acceptLanguage));

    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "Authorization" };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((UsergroupGetListV1Response) ApiInvoker.deserialize(localVarResponse,  "", UsergroupGetListV1Response.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Retrieve an existing Usergroup
  * 
   * @param pkiUsergroupID 
   * @return UsergroupGetObjectV2Response
  */
  public UsergroupGetObjectV2Response usergroupGetObjectV2 (Integer pkiUsergroupID) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'pkiUsergroupID' is set
    if (pkiUsergroupID == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'pkiUsergroupID' when calling usergroupGetObjectV2",
        new ApiException(400, "Missing the required parameter 'pkiUsergroupID' when calling usergroupGetObjectV2"));
    }

    // create path and map variables
    String path = "/2/object/usergroup/{pkiUsergroupID}".replaceAll("\\{" + "pkiUsergroupID" + "\\}", apiInvoker.escapeString(pkiUsergroupID.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "Authorization" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (UsergroupGetObjectV2Response) ApiInvoker.deserialize(localVarResponse, "", UsergroupGetObjectV2Response.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Retrieve an existing Usergroup
   * 
   * @param pkiUsergroupID 
  */
  public void usergroupGetObjectV2 (Integer pkiUsergroupID, final Response.Listener<UsergroupGetObjectV2Response> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'pkiUsergroupID' is set
    if (pkiUsergroupID == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'pkiUsergroupID' when calling usergroupGetObjectV2",
        new ApiException(400, "Missing the required parameter 'pkiUsergroupID' when calling usergroupGetObjectV2"));
    }

    // create path and map variables
    String path = "/2/object/usergroup/{pkiUsergroupID}".replaceAll("\\{format\\}","json").replaceAll("\\{" + "pkiUsergroupID" + "\\}", apiInvoker.escapeString(pkiUsergroupID.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "Authorization" };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((UsergroupGetObjectV2Response) ApiInvoker.deserialize(localVarResponse,  "", UsergroupGetObjectV2Response.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Retrieve an existing Usergroup&#39;s Permissions
  * 
   * @param pkiUsergroupID 
   * @return UsergroupGetPermissionsV1Response
  */
  public UsergroupGetPermissionsV1Response usergroupGetPermissionsV1 (Integer pkiUsergroupID) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'pkiUsergroupID' is set
    if (pkiUsergroupID == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'pkiUsergroupID' when calling usergroupGetPermissionsV1",
        new ApiException(400, "Missing the required parameter 'pkiUsergroupID' when calling usergroupGetPermissionsV1"));
    }

    // create path and map variables
    String path = "/1/object/usergroup/{pkiUsergroupID}/getPermissions".replaceAll("\\{" + "pkiUsergroupID" + "\\}", apiInvoker.escapeString(pkiUsergroupID.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "Authorization" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (UsergroupGetPermissionsV1Response) ApiInvoker.deserialize(localVarResponse, "", UsergroupGetPermissionsV1Response.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Retrieve an existing Usergroup&#39;s Permissions
   * 
   * @param pkiUsergroupID 
  */
  public void usergroupGetPermissionsV1 (Integer pkiUsergroupID, final Response.Listener<UsergroupGetPermissionsV1Response> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'pkiUsergroupID' is set
    if (pkiUsergroupID == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'pkiUsergroupID' when calling usergroupGetPermissionsV1",
        new ApiException(400, "Missing the required parameter 'pkiUsergroupID' when calling usergroupGetPermissionsV1"));
    }

    // create path and map variables
    String path = "/1/object/usergroup/{pkiUsergroupID}/getPermissions".replaceAll("\\{format\\}","json").replaceAll("\\{" + "pkiUsergroupID" + "\\}", apiInvoker.escapeString(pkiUsergroupID.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "Authorization" };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((UsergroupGetPermissionsV1Response) ApiInvoker.deserialize(localVarResponse,  "", UsergroupGetPermissionsV1Response.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Retrieve an existing Usergroup&#39;s Usergroupdelegations
  * 
   * @param pkiUsergroupID 
   * @return UsergroupGetUsergroupdelegationsV1Response
  */
  public UsergroupGetUsergroupdelegationsV1Response usergroupGetUsergroupdelegationsV1 (Integer pkiUsergroupID) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'pkiUsergroupID' is set
    if (pkiUsergroupID == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'pkiUsergroupID' when calling usergroupGetUsergroupdelegationsV1",
        new ApiException(400, "Missing the required parameter 'pkiUsergroupID' when calling usergroupGetUsergroupdelegationsV1"));
    }

    // create path and map variables
    String path = "/1/object/usergroup/{pkiUsergroupID}/getUsergroupdelegations".replaceAll("\\{" + "pkiUsergroupID" + "\\}", apiInvoker.escapeString(pkiUsergroupID.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "Authorization" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (UsergroupGetUsergroupdelegationsV1Response) ApiInvoker.deserialize(localVarResponse, "", UsergroupGetUsergroupdelegationsV1Response.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Retrieve an existing Usergroup&#39;s Usergroupdelegations
   * 
   * @param pkiUsergroupID 
  */
  public void usergroupGetUsergroupdelegationsV1 (Integer pkiUsergroupID, final Response.Listener<UsergroupGetUsergroupdelegationsV1Response> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'pkiUsergroupID' is set
    if (pkiUsergroupID == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'pkiUsergroupID' when calling usergroupGetUsergroupdelegationsV1",
        new ApiException(400, "Missing the required parameter 'pkiUsergroupID' when calling usergroupGetUsergroupdelegationsV1"));
    }

    // create path and map variables
    String path = "/1/object/usergroup/{pkiUsergroupID}/getUsergroupdelegations".replaceAll("\\{format\\}","json").replaceAll("\\{" + "pkiUsergroupID" + "\\}", apiInvoker.escapeString(pkiUsergroupID.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "Authorization" };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((UsergroupGetUsergroupdelegationsV1Response) ApiInvoker.deserialize(localVarResponse,  "", UsergroupGetUsergroupdelegationsV1Response.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Retrieve an existing Usergroup&#39;s Usergroupmemberships
  * 
   * @param pkiUsergroupID 
   * @return UsergroupGetUsergroupmembershipsV1Response
  */
  public UsergroupGetUsergroupmembershipsV1Response usergroupGetUsergroupmembershipsV1 (Integer pkiUsergroupID) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'pkiUsergroupID' is set
    if (pkiUsergroupID == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'pkiUsergroupID' when calling usergroupGetUsergroupmembershipsV1",
        new ApiException(400, "Missing the required parameter 'pkiUsergroupID' when calling usergroupGetUsergroupmembershipsV1"));
    }

    // create path and map variables
    String path = "/1/object/usergroup/{pkiUsergroupID}/getUsergroupmemberships".replaceAll("\\{" + "pkiUsergroupID" + "\\}", apiInvoker.escapeString(pkiUsergroupID.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "Authorization" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (UsergroupGetUsergroupmembershipsV1Response) ApiInvoker.deserialize(localVarResponse, "", UsergroupGetUsergroupmembershipsV1Response.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Retrieve an existing Usergroup&#39;s Usergroupmemberships
   * 
   * @param pkiUsergroupID 
  */
  public void usergroupGetUsergroupmembershipsV1 (Integer pkiUsergroupID, final Response.Listener<UsergroupGetUsergroupmembershipsV1Response> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'pkiUsergroupID' is set
    if (pkiUsergroupID == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'pkiUsergroupID' when calling usergroupGetUsergroupmembershipsV1",
        new ApiException(400, "Missing the required parameter 'pkiUsergroupID' when calling usergroupGetUsergroupmembershipsV1"));
    }

    // create path and map variables
    String path = "/1/object/usergroup/{pkiUsergroupID}/getUsergroupmemberships".replaceAll("\\{format\\}","json").replaceAll("\\{" + "pkiUsergroupID" + "\\}", apiInvoker.escapeString(pkiUsergroupID.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "Authorization" };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((UsergroupGetUsergroupmembershipsV1Response) ApiInvoker.deserialize(localVarResponse,  "", UsergroupGetUsergroupmembershipsV1Response.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
}
