/**
 * eZmax API Definition
 * This API expose all the functionnalities for the eZmax and eZsign applications.
 *
 * The version of the OpenAPI document: 1.1.4
 * Contact: support-api@ezmax.ca
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package org.openapitools.client.api;

import eZmaxAPI.ApiInvoker;
import eZmaxAPI.ApiException;
import eZmaxAPI.Pair;

import org.openapitools.client.model.*;

import java.util.*;

import com.android.volley.Response;
import com.android.volley.VolleyError;

import org.openapitools.client.model.CommonResponseError;
import org.openapitools.client.model.CommonResponseErrorSTemporaryFileUrl;
import org.openapitools.client.model.EzsigndocumentApplyEzsigntemplateV1Request;
import org.openapitools.client.model.EzsigndocumentApplyEzsigntemplateV1Response;
import org.openapitools.client.model.EzsigndocumentApplyEzsigntemplateV2Request;
import org.openapitools.client.model.EzsigndocumentApplyEzsigntemplateV2Response;
import org.openapitools.client.model.EzsigndocumentCreateObjectV1Request;
import org.openapitools.client.model.EzsigndocumentCreateObjectV1Response;
import org.openapitools.client.model.EzsigndocumentDeleteObjectV1Response;
import org.openapitools.client.model.EzsigndocumentEditEzsignsignaturesV1Response;
import org.openapitools.client.model.EzsigndocumentGetDownloadUrlV1Response;
import org.openapitools.client.model.EzsigndocumentGetEzsignpagesV1Response;
import org.openapitools.client.model.EzsigndocumentGetFormDataV1Response;
import org.openapitools.client.model.EzsigndocumentGetObjectV1Response;
import org.openapitools.client.model.EzsigndocumentGetWordsPositionsV1Request;
import org.openapitools.client.model.EzsigndocumentGetWordsPositionsV1Response;
import org.openapitools.client.model.EzsigndocumentPatchObjectV1Request;
import org.openapitools.client.model.EzsigndocumentPatchObjectV1Response;
import org.openapitools.client.model.EzsignsignatureRequestCompound;
import java.io.File;
import java.util.*;

import org.apache.http.HttpEntity;
import org.apache.http.entity.mime.MultipartEntityBuilder;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.concurrent.ExecutionException;
import java.util.concurrent.TimeoutException;

public class ObjectEzsigndocumentApi {
  String basePath = "https://prod.api.appcluster01.ca-central-1.ezmax.com/rest";
  ApiInvoker apiInvoker = ApiInvoker.getInstance();

  public void addHeader(String key, String value) {
    getInvoker().addDefaultHeader(key, value);
  }

  public ApiInvoker getInvoker() {
    return apiInvoker;
  }

  public void setBasePath(String basePath) {
    this.basePath = basePath;
  }

  public String getBasePath() {
    return basePath;
  }

  /**
  * Apply an Ezsign Template to the Ezsigndocument.
  * This function is deprecated. Please use *applyEzsigntemplate* instead which is doing the same thing but with a capital \&quot;E\&quot; to normalize the nomenclature.  This endpoint applies a predefined template to the ezsign document. This allows to automatically apply all the form and signature fields on a document in a single step.  The document must not already have fields otherwise an error will be returned.
   * @param pkiEzsigndocumentID 
   * @param ezsigndocumentApplyEzsigntemplateV1Request 
   * @return EzsigndocumentApplyEzsigntemplateV1Response
  */
  public EzsigndocumentApplyEzsigntemplateV1Response ezsigndocumentApplyEzsigntemplateV1 (Integer pkiEzsigndocumentID, EzsigndocumentApplyEzsigntemplateV1Request ezsigndocumentApplyEzsigntemplateV1Request) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = ezsigndocumentApplyEzsigntemplateV1Request;
    // verify the required parameter 'pkiEzsigndocumentID' is set
    if (pkiEzsigndocumentID == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'pkiEzsigndocumentID' when calling ezsigndocumentApplyEzsigntemplateV1",
        new ApiException(400, "Missing the required parameter 'pkiEzsigndocumentID' when calling ezsigndocumentApplyEzsigntemplateV1"));
    }
    // verify the required parameter 'ezsigndocumentApplyEzsigntemplateV1Request' is set
    if (ezsigndocumentApplyEzsigntemplateV1Request == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'ezsigndocumentApplyEzsigntemplateV1Request' when calling ezsigndocumentApplyEzsigntemplateV1",
        new ApiException(400, "Missing the required parameter 'ezsigndocumentApplyEzsigntemplateV1Request' when calling ezsigndocumentApplyEzsigntemplateV1"));
    }

    // create path and map variables
    String path = "/1/object/ezsigndocument/{pkiEzsigndocumentID}/applyezsigntemplate".replaceAll("\\{" + "pkiEzsigndocumentID" + "\\}", apiInvoker.escapeString(pkiEzsigndocumentID.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "Authorization" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (EzsigndocumentApplyEzsigntemplateV1Response) ApiInvoker.deserialize(localVarResponse, "", EzsigndocumentApplyEzsigntemplateV1Response.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Apply an Ezsign Template to the Ezsigndocument.
   * This function is deprecated. Please use *applyEzsigntemplate* instead which is doing the same thing but with a capital \&quot;E\&quot; to normalize the nomenclature.  This endpoint applies a predefined template to the ezsign document. This allows to automatically apply all the form and signature fields on a document in a single step.  The document must not already have fields otherwise an error will be returned.
   * @param pkiEzsigndocumentID    * @param ezsigndocumentApplyEzsigntemplateV1Request 
  */
  public void ezsigndocumentApplyEzsigntemplateV1 (Integer pkiEzsigndocumentID, EzsigndocumentApplyEzsigntemplateV1Request ezsigndocumentApplyEzsigntemplateV1Request, final Response.Listener<EzsigndocumentApplyEzsigntemplateV1Response> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = ezsigndocumentApplyEzsigntemplateV1Request;

    // verify the required parameter 'pkiEzsigndocumentID' is set
    if (pkiEzsigndocumentID == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'pkiEzsigndocumentID' when calling ezsigndocumentApplyEzsigntemplateV1",
        new ApiException(400, "Missing the required parameter 'pkiEzsigndocumentID' when calling ezsigndocumentApplyEzsigntemplateV1"));
    }
    // verify the required parameter 'ezsigndocumentApplyEzsigntemplateV1Request' is set
    if (ezsigndocumentApplyEzsigntemplateV1Request == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'ezsigndocumentApplyEzsigntemplateV1Request' when calling ezsigndocumentApplyEzsigntemplateV1",
        new ApiException(400, "Missing the required parameter 'ezsigndocumentApplyEzsigntemplateV1Request' when calling ezsigndocumentApplyEzsigntemplateV1"));
    }

    // create path and map variables
    String path = "/1/object/ezsigndocument/{pkiEzsigndocumentID}/applyezsigntemplate".replaceAll("\\{format\\}","json").replaceAll("\\{" + "pkiEzsigndocumentID" + "\\}", apiInvoker.escapeString(pkiEzsigndocumentID.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "Authorization" };

    try {
      apiInvoker.invokeAPI(basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((EzsigndocumentApplyEzsigntemplateV1Response) ApiInvoker.deserialize(localVarResponse,  "", EzsigndocumentApplyEzsigntemplateV1Response.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Apply an Ezsign Template to the Ezsigndocument.
  * This endpoint applies a predefined template to the ezsign document. This allows to automatically apply all the form and signature fields on a document in a single step.  The document must not already have fields otherwise an error will be returned.
   * @param pkiEzsigndocumentID 
   * @param ezsigndocumentApplyEzsigntemplateV2Request 
   * @return EzsigndocumentApplyEzsigntemplateV2Response
  */
  public EzsigndocumentApplyEzsigntemplateV2Response ezsigndocumentApplyEzsigntemplateV2 (Integer pkiEzsigndocumentID, EzsigndocumentApplyEzsigntemplateV2Request ezsigndocumentApplyEzsigntemplateV2Request) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = ezsigndocumentApplyEzsigntemplateV2Request;
    // verify the required parameter 'pkiEzsigndocumentID' is set
    if (pkiEzsigndocumentID == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'pkiEzsigndocumentID' when calling ezsigndocumentApplyEzsigntemplateV2",
        new ApiException(400, "Missing the required parameter 'pkiEzsigndocumentID' when calling ezsigndocumentApplyEzsigntemplateV2"));
    }
    // verify the required parameter 'ezsigndocumentApplyEzsigntemplateV2Request' is set
    if (ezsigndocumentApplyEzsigntemplateV2Request == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'ezsigndocumentApplyEzsigntemplateV2Request' when calling ezsigndocumentApplyEzsigntemplateV2",
        new ApiException(400, "Missing the required parameter 'ezsigndocumentApplyEzsigntemplateV2Request' when calling ezsigndocumentApplyEzsigntemplateV2"));
    }

    // create path and map variables
    String path = "/2/object/ezsigndocument/{pkiEzsigndocumentID}/applyEzsigntemplate".replaceAll("\\{" + "pkiEzsigndocumentID" + "\\}", apiInvoker.escapeString(pkiEzsigndocumentID.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "Authorization" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (EzsigndocumentApplyEzsigntemplateV2Response) ApiInvoker.deserialize(localVarResponse, "", EzsigndocumentApplyEzsigntemplateV2Response.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Apply an Ezsign Template to the Ezsigndocument.
   * This endpoint applies a predefined template to the ezsign document. This allows to automatically apply all the form and signature fields on a document in a single step.  The document must not already have fields otherwise an error will be returned.
   * @param pkiEzsigndocumentID    * @param ezsigndocumentApplyEzsigntemplateV2Request 
  */
  public void ezsigndocumentApplyEzsigntemplateV2 (Integer pkiEzsigndocumentID, EzsigndocumentApplyEzsigntemplateV2Request ezsigndocumentApplyEzsigntemplateV2Request, final Response.Listener<EzsigndocumentApplyEzsigntemplateV2Response> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = ezsigndocumentApplyEzsigntemplateV2Request;

    // verify the required parameter 'pkiEzsigndocumentID' is set
    if (pkiEzsigndocumentID == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'pkiEzsigndocumentID' when calling ezsigndocumentApplyEzsigntemplateV2",
        new ApiException(400, "Missing the required parameter 'pkiEzsigndocumentID' when calling ezsigndocumentApplyEzsigntemplateV2"));
    }
    // verify the required parameter 'ezsigndocumentApplyEzsigntemplateV2Request' is set
    if (ezsigndocumentApplyEzsigntemplateV2Request == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'ezsigndocumentApplyEzsigntemplateV2Request' when calling ezsigndocumentApplyEzsigntemplateV2",
        new ApiException(400, "Missing the required parameter 'ezsigndocumentApplyEzsigntemplateV2Request' when calling ezsigndocumentApplyEzsigntemplateV2"));
    }

    // create path and map variables
    String path = "/2/object/ezsigndocument/{pkiEzsigndocumentID}/applyEzsigntemplate".replaceAll("\\{format\\}","json").replaceAll("\\{" + "pkiEzsigndocumentID" + "\\}", apiInvoker.escapeString(pkiEzsigndocumentID.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "Authorization" };

    try {
      apiInvoker.invokeAPI(basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((EzsigndocumentApplyEzsigntemplateV2Response) ApiInvoker.deserialize(localVarResponse,  "", EzsigndocumentApplyEzsigntemplateV2Response.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Create a new Ezsigndocument
  * The endpoint allows to create one or many elements at once.  The array can contain simple (Just the object) or compound (The object and its child) objects.  Creating compound elements allows to reduce the multiple requests to create all child objects.
   * @param ezsigndocumentCreateObjectV1Request 
   * @return EzsigndocumentCreateObjectV1Response
  */
  public EzsigndocumentCreateObjectV1Response ezsigndocumentCreateObjectV1 (List<EzsigndocumentCreateObjectV1Request> ezsigndocumentCreateObjectV1Request) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = ezsigndocumentCreateObjectV1Request;
    // verify the required parameter 'ezsigndocumentCreateObjectV1Request' is set
    if (ezsigndocumentCreateObjectV1Request == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'ezsigndocumentCreateObjectV1Request' when calling ezsigndocumentCreateObjectV1",
        new ApiException(400, "Missing the required parameter 'ezsigndocumentCreateObjectV1Request' when calling ezsigndocumentCreateObjectV1"));
    }

    // create path and map variables
    String path = "/1/object/ezsigndocument";

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "Authorization" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (EzsigndocumentCreateObjectV1Response) ApiInvoker.deserialize(localVarResponse, "", EzsigndocumentCreateObjectV1Response.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Create a new Ezsigndocument
   * The endpoint allows to create one or many elements at once.  The array can contain simple (Just the object) or compound (The object and its child) objects.  Creating compound elements allows to reduce the multiple requests to create all child objects.
   * @param ezsigndocumentCreateObjectV1Request 
  */
  public void ezsigndocumentCreateObjectV1 (List<EzsigndocumentCreateObjectV1Request> ezsigndocumentCreateObjectV1Request, final Response.Listener<EzsigndocumentCreateObjectV1Response> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = ezsigndocumentCreateObjectV1Request;

    // verify the required parameter 'ezsigndocumentCreateObjectV1Request' is set
    if (ezsigndocumentCreateObjectV1Request == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'ezsigndocumentCreateObjectV1Request' when calling ezsigndocumentCreateObjectV1",
        new ApiException(400, "Missing the required parameter 'ezsigndocumentCreateObjectV1Request' when calling ezsigndocumentCreateObjectV1"));
    }

    // create path and map variables
    String path = "/1/object/ezsigndocument".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "Authorization" };

    try {
      apiInvoker.invokeAPI(basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((EzsigndocumentCreateObjectV1Response) ApiInvoker.deserialize(localVarResponse,  "", EzsigndocumentCreateObjectV1Response.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Delete an existing Ezsigndocument
  * 
   * @param pkiEzsigndocumentID 
   * @return EzsigndocumentDeleteObjectV1Response
  */
  public EzsigndocumentDeleteObjectV1Response ezsigndocumentDeleteObjectV1 (Integer pkiEzsigndocumentID) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'pkiEzsigndocumentID' is set
    if (pkiEzsigndocumentID == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'pkiEzsigndocumentID' when calling ezsigndocumentDeleteObjectV1",
        new ApiException(400, "Missing the required parameter 'pkiEzsigndocumentID' when calling ezsigndocumentDeleteObjectV1"));
    }

    // create path and map variables
    String path = "/1/object/ezsigndocument/{pkiEzsigndocumentID}".replaceAll("\\{" + "pkiEzsigndocumentID" + "\\}", apiInvoker.escapeString(pkiEzsigndocumentID.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "Authorization" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "DELETE", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (EzsigndocumentDeleteObjectV1Response) ApiInvoker.deserialize(localVarResponse, "", EzsigndocumentDeleteObjectV1Response.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Delete an existing Ezsigndocument
   * 
   * @param pkiEzsigndocumentID 
  */
  public void ezsigndocumentDeleteObjectV1 (Integer pkiEzsigndocumentID, final Response.Listener<EzsigndocumentDeleteObjectV1Response> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'pkiEzsigndocumentID' is set
    if (pkiEzsigndocumentID == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'pkiEzsigndocumentID' when calling ezsigndocumentDeleteObjectV1",
        new ApiException(400, "Missing the required parameter 'pkiEzsigndocumentID' when calling ezsigndocumentDeleteObjectV1"));
    }

    // create path and map variables
    String path = "/1/object/ezsigndocument/{pkiEzsigndocumentID}".replaceAll("\\{format\\}","json").replaceAll("\\{" + "pkiEzsigndocumentID" + "\\}", apiInvoker.escapeString(pkiEzsigndocumentID.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "Authorization" };

    try {
      apiInvoker.invokeAPI(basePath, path, "DELETE", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((EzsigndocumentDeleteObjectV1Response) ApiInvoker.deserialize(localVarResponse,  "", EzsigndocumentDeleteObjectV1Response.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Edit multiple ezsignsignatures
  * Using this endpoint, you can edit multiple ezsignsignatures at the same time.
   * @param pkiEzsigndocumentID 
   * @param ezsignsignatureRequestCompound 
   * @return EzsigndocumentEditEzsignsignaturesV1Response
  */
  public EzsigndocumentEditEzsignsignaturesV1Response ezsigndocumentEditEzsignsignaturesV1 (Integer pkiEzsigndocumentID, List<EzsignsignatureRequestCompound> ezsignsignatureRequestCompound) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = ezsignsignatureRequestCompound;
    // verify the required parameter 'pkiEzsigndocumentID' is set
    if (pkiEzsigndocumentID == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'pkiEzsigndocumentID' when calling ezsigndocumentEditEzsignsignaturesV1",
        new ApiException(400, "Missing the required parameter 'pkiEzsigndocumentID' when calling ezsigndocumentEditEzsignsignaturesV1"));
    }
    // verify the required parameter 'ezsignsignatureRequestCompound' is set
    if (ezsignsignatureRequestCompound == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'ezsignsignatureRequestCompound' when calling ezsigndocumentEditEzsignsignaturesV1",
        new ApiException(400, "Missing the required parameter 'ezsignsignatureRequestCompound' when calling ezsigndocumentEditEzsignsignaturesV1"));
    }

    // create path and map variables
    String path = "/1/object/ezsigndocument/{pkiEzsigndocumentID}/editEzsignsignatures".replaceAll("\\{" + "pkiEzsigndocumentID" + "\\}", apiInvoker.escapeString(pkiEzsigndocumentID.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "Authorization" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "PUT", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (EzsigndocumentEditEzsignsignaturesV1Response) ApiInvoker.deserialize(localVarResponse, "", EzsigndocumentEditEzsignsignaturesV1Response.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Edit multiple ezsignsignatures
   * Using this endpoint, you can edit multiple ezsignsignatures at the same time.
   * @param pkiEzsigndocumentID    * @param ezsignsignatureRequestCompound 
  */
  public void ezsigndocumentEditEzsignsignaturesV1 (Integer pkiEzsigndocumentID, List<EzsignsignatureRequestCompound> ezsignsignatureRequestCompound, final Response.Listener<EzsigndocumentEditEzsignsignaturesV1Response> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = ezsignsignatureRequestCompound;

    // verify the required parameter 'pkiEzsigndocumentID' is set
    if (pkiEzsigndocumentID == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'pkiEzsigndocumentID' when calling ezsigndocumentEditEzsignsignaturesV1",
        new ApiException(400, "Missing the required parameter 'pkiEzsigndocumentID' when calling ezsigndocumentEditEzsignsignaturesV1"));
    }
    // verify the required parameter 'ezsignsignatureRequestCompound' is set
    if (ezsignsignatureRequestCompound == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'ezsignsignatureRequestCompound' when calling ezsigndocumentEditEzsignsignaturesV1",
        new ApiException(400, "Missing the required parameter 'ezsignsignatureRequestCompound' when calling ezsigndocumentEditEzsignsignaturesV1"));
    }

    // create path and map variables
    String path = "/1/object/ezsigndocument/{pkiEzsigndocumentID}/editEzsignsignatures".replaceAll("\\{format\\}","json").replaceAll("\\{" + "pkiEzsigndocumentID" + "\\}", apiInvoker.escapeString(pkiEzsigndocumentID.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "Authorization" };

    try {
      apiInvoker.invokeAPI(basePath, path, "PUT", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((EzsigndocumentEditEzsignsignaturesV1Response) ApiInvoker.deserialize(localVarResponse,  "", EzsigndocumentEditEzsignsignaturesV1Response.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Retrieve a URL to download documents.
  * This endpoint returns URLs to different files that can be downloaded during the signing process.  These links will expire after 5 minutes so the download of the file should be made soon after retrieving the link.
   * @param pkiEzsigndocumentID 
   * @param eDocumentType The type of document to retrieve.  1. **Initial** Is the initial document before any signature were applied. 2. **Signed** Is the final document once all signatures were applied. 3. **Proofdocument** Is the evidence report. 4. **Proof** Is the complete evidence archive including all of the above and more. 
   * @return EzsigndocumentGetDownloadUrlV1Response
  */
  public EzsigndocumentGetDownloadUrlV1Response ezsigndocumentGetDownloadUrlV1 (Integer pkiEzsigndocumentID, String eDocumentType) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'pkiEzsigndocumentID' is set
    if (pkiEzsigndocumentID == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'pkiEzsigndocumentID' when calling ezsigndocumentGetDownloadUrlV1",
        new ApiException(400, "Missing the required parameter 'pkiEzsigndocumentID' when calling ezsigndocumentGetDownloadUrlV1"));
    }
    // verify the required parameter 'eDocumentType' is set
    if (eDocumentType == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'eDocumentType' when calling ezsigndocumentGetDownloadUrlV1",
        new ApiException(400, "Missing the required parameter 'eDocumentType' when calling ezsigndocumentGetDownloadUrlV1"));
    }

    // create path and map variables
    String path = "/1/object/ezsigndocument/{pkiEzsigndocumentID}/getDownloadUrl/{eDocumentType}".replaceAll("\\{" + "pkiEzsigndocumentID" + "\\}", apiInvoker.escapeString(pkiEzsigndocumentID.toString())).replaceAll("\\{" + "eDocumentType" + "\\}", apiInvoker.escapeString(eDocumentType.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "Authorization" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (EzsigndocumentGetDownloadUrlV1Response) ApiInvoker.deserialize(localVarResponse, "", EzsigndocumentGetDownloadUrlV1Response.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Retrieve a URL to download documents.
   * This endpoint returns URLs to different files that can be downloaded during the signing process.  These links will expire after 5 minutes so the download of the file should be made soon after retrieving the link.
   * @param pkiEzsigndocumentID    * @param eDocumentType The type of document to retrieve.  1. **Initial** Is the initial document before any signature were applied. 2. **Signed** Is the final document once all signatures were applied. 3. **Proofdocument** Is the evidence report. 4. **Proof** Is the complete evidence archive including all of the above and more. 
  */
  public void ezsigndocumentGetDownloadUrlV1 (Integer pkiEzsigndocumentID, String eDocumentType, final Response.Listener<EzsigndocumentGetDownloadUrlV1Response> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'pkiEzsigndocumentID' is set
    if (pkiEzsigndocumentID == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'pkiEzsigndocumentID' when calling ezsigndocumentGetDownloadUrlV1",
        new ApiException(400, "Missing the required parameter 'pkiEzsigndocumentID' when calling ezsigndocumentGetDownloadUrlV1"));
    }
    // verify the required parameter 'eDocumentType' is set
    if (eDocumentType == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'eDocumentType' when calling ezsigndocumentGetDownloadUrlV1",
        new ApiException(400, "Missing the required parameter 'eDocumentType' when calling ezsigndocumentGetDownloadUrlV1"));
    }

    // create path and map variables
    String path = "/1/object/ezsigndocument/{pkiEzsigndocumentID}/getDownloadUrl/{eDocumentType}".replaceAll("\\{format\\}","json").replaceAll("\\{" + "pkiEzsigndocumentID" + "\\}", apiInvoker.escapeString(pkiEzsigndocumentID.toString())).replaceAll("\\{" + "eDocumentType" + "\\}", apiInvoker.escapeString(eDocumentType.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "Authorization" };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((EzsigndocumentGetDownloadUrlV1Response) ApiInvoker.deserialize(localVarResponse,  "", EzsigndocumentGetDownloadUrlV1Response.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Retrieve an existing Ezsigndocument&#39;s Ezsignpages
  * 
   * @param pkiEzsigndocumentID 
   * @return EzsigndocumentGetEzsignpagesV1Response
  */
  public EzsigndocumentGetEzsignpagesV1Response ezsigndocumentGetEzsignpagesV1 (Integer pkiEzsigndocumentID) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'pkiEzsigndocumentID' is set
    if (pkiEzsigndocumentID == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'pkiEzsigndocumentID' when calling ezsigndocumentGetEzsignpagesV1",
        new ApiException(400, "Missing the required parameter 'pkiEzsigndocumentID' when calling ezsigndocumentGetEzsignpagesV1"));
    }

    // create path and map variables
    String path = "/1/object/ezsigndocument/{pkiEzsigndocumentID}/getEzsignpages".replaceAll("\\{" + "pkiEzsigndocumentID" + "\\}", apiInvoker.escapeString(pkiEzsigndocumentID.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "Authorization" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (EzsigndocumentGetEzsignpagesV1Response) ApiInvoker.deserialize(localVarResponse, "", EzsigndocumentGetEzsignpagesV1Response.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Retrieve an existing Ezsigndocument&#39;s Ezsignpages
   * 
   * @param pkiEzsigndocumentID 
  */
  public void ezsigndocumentGetEzsignpagesV1 (Integer pkiEzsigndocumentID, final Response.Listener<EzsigndocumentGetEzsignpagesV1Response> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'pkiEzsigndocumentID' is set
    if (pkiEzsigndocumentID == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'pkiEzsigndocumentID' when calling ezsigndocumentGetEzsignpagesV1",
        new ApiException(400, "Missing the required parameter 'pkiEzsigndocumentID' when calling ezsigndocumentGetEzsignpagesV1"));
    }

    // create path and map variables
    String path = "/1/object/ezsigndocument/{pkiEzsigndocumentID}/getEzsignpages".replaceAll("\\{format\\}","json").replaceAll("\\{" + "pkiEzsigndocumentID" + "\\}", apiInvoker.escapeString(pkiEzsigndocumentID.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "Authorization" };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((EzsigndocumentGetEzsignpagesV1Response) ApiInvoker.deserialize(localVarResponse,  "", EzsigndocumentGetEzsignpagesV1Response.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Retrieve an existing Ezsigndocument&#39;s Form Data
  * 
   * @param pkiEzsigndocumentID 
   * @return EzsigndocumentGetFormDataV1Response
  */
  public EzsigndocumentGetFormDataV1Response ezsigndocumentGetFormDataV1 (Integer pkiEzsigndocumentID) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'pkiEzsigndocumentID' is set
    if (pkiEzsigndocumentID == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'pkiEzsigndocumentID' when calling ezsigndocumentGetFormDataV1",
        new ApiException(400, "Missing the required parameter 'pkiEzsigndocumentID' when calling ezsigndocumentGetFormDataV1"));
    }

    // create path and map variables
    String path = "/1/object/ezsigndocument/{pkiEzsigndocumentID}/getFormData".replaceAll("\\{" + "pkiEzsigndocumentID" + "\\}", apiInvoker.escapeString(pkiEzsigndocumentID.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "Authorization" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (EzsigndocumentGetFormDataV1Response) ApiInvoker.deserialize(localVarResponse, "", EzsigndocumentGetFormDataV1Response.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Retrieve an existing Ezsigndocument&#39;s Form Data
   * 
   * @param pkiEzsigndocumentID 
  */
  public void ezsigndocumentGetFormDataV1 (Integer pkiEzsigndocumentID, final Response.Listener<EzsigndocumentGetFormDataV1Response> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'pkiEzsigndocumentID' is set
    if (pkiEzsigndocumentID == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'pkiEzsigndocumentID' when calling ezsigndocumentGetFormDataV1",
        new ApiException(400, "Missing the required parameter 'pkiEzsigndocumentID' when calling ezsigndocumentGetFormDataV1"));
    }

    // create path and map variables
    String path = "/1/object/ezsigndocument/{pkiEzsigndocumentID}/getFormData".replaceAll("\\{format\\}","json").replaceAll("\\{" + "pkiEzsigndocumentID" + "\\}", apiInvoker.escapeString(pkiEzsigndocumentID.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "Authorization" };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((EzsigndocumentGetFormDataV1Response) ApiInvoker.deserialize(localVarResponse,  "", EzsigndocumentGetFormDataV1Response.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Retrieve an existing Ezsigndocument
  * ## ⚠️EARLY ADOPTERS WARNING  ### This endpoint is not officially released. Its definition might still change and it might not be available in every environment and region.
   * @param pkiEzsigndocumentID 
   * @return EzsigndocumentGetObjectV1Response
  */
  public EzsigndocumentGetObjectV1Response ezsigndocumentGetObjectV1 (Integer pkiEzsigndocumentID) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'pkiEzsigndocumentID' is set
    if (pkiEzsigndocumentID == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'pkiEzsigndocumentID' when calling ezsigndocumentGetObjectV1",
        new ApiException(400, "Missing the required parameter 'pkiEzsigndocumentID' when calling ezsigndocumentGetObjectV1"));
    }

    // create path and map variables
    String path = "/1/object/ezsigndocument/{pkiEzsigndocumentID}".replaceAll("\\{" + "pkiEzsigndocumentID" + "\\}", apiInvoker.escapeString(pkiEzsigndocumentID.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "Authorization" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (EzsigndocumentGetObjectV1Response) ApiInvoker.deserialize(localVarResponse, "", EzsigndocumentGetObjectV1Response.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Retrieve an existing Ezsigndocument
   * ## ⚠️EARLY ADOPTERS WARNING  ### This endpoint is not officially released. Its definition might still change and it might not be available in every environment and region.
   * @param pkiEzsigndocumentID 
  */
  public void ezsigndocumentGetObjectV1 (Integer pkiEzsigndocumentID, final Response.Listener<EzsigndocumentGetObjectV1Response> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'pkiEzsigndocumentID' is set
    if (pkiEzsigndocumentID == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'pkiEzsigndocumentID' when calling ezsigndocumentGetObjectV1",
        new ApiException(400, "Missing the required parameter 'pkiEzsigndocumentID' when calling ezsigndocumentGetObjectV1"));
    }

    // create path and map variables
    String path = "/1/object/ezsigndocument/{pkiEzsigndocumentID}".replaceAll("\\{format\\}","json").replaceAll("\\{" + "pkiEzsigndocumentID" + "\\}", apiInvoker.escapeString(pkiEzsigndocumentID.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "Authorization" };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((EzsigndocumentGetObjectV1Response) ApiInvoker.deserialize(localVarResponse,  "", EzsigndocumentGetObjectV1Response.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Retrieve positions X,Y of given words from a Ezsigndocument
  * 
   * @param pkiEzsigndocumentID 
   * @param ezsigndocumentGetWordsPositionsV1Request 
   * @return EzsigndocumentGetWordsPositionsV1Response
  */
  public EzsigndocumentGetWordsPositionsV1Response ezsigndocumentGetWordsPositionsV1 (Integer pkiEzsigndocumentID, EzsigndocumentGetWordsPositionsV1Request ezsigndocumentGetWordsPositionsV1Request) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = ezsigndocumentGetWordsPositionsV1Request;
    // verify the required parameter 'pkiEzsigndocumentID' is set
    if (pkiEzsigndocumentID == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'pkiEzsigndocumentID' when calling ezsigndocumentGetWordsPositionsV1",
        new ApiException(400, "Missing the required parameter 'pkiEzsigndocumentID' when calling ezsigndocumentGetWordsPositionsV1"));
    }
    // verify the required parameter 'ezsigndocumentGetWordsPositionsV1Request' is set
    if (ezsigndocumentGetWordsPositionsV1Request == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'ezsigndocumentGetWordsPositionsV1Request' when calling ezsigndocumentGetWordsPositionsV1",
        new ApiException(400, "Missing the required parameter 'ezsigndocumentGetWordsPositionsV1Request' when calling ezsigndocumentGetWordsPositionsV1"));
    }

    // create path and map variables
    String path = "/1/object/ezsigndocument/{pkiEzsigndocumentID}/getWordsPositions".replaceAll("\\{" + "pkiEzsigndocumentID" + "\\}", apiInvoker.escapeString(pkiEzsigndocumentID.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "Authorization" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (EzsigndocumentGetWordsPositionsV1Response) ApiInvoker.deserialize(localVarResponse, "", EzsigndocumentGetWordsPositionsV1Response.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Retrieve positions X,Y of given words from a Ezsigndocument
   * 
   * @param pkiEzsigndocumentID    * @param ezsigndocumentGetWordsPositionsV1Request 
  */
  public void ezsigndocumentGetWordsPositionsV1 (Integer pkiEzsigndocumentID, EzsigndocumentGetWordsPositionsV1Request ezsigndocumentGetWordsPositionsV1Request, final Response.Listener<EzsigndocumentGetWordsPositionsV1Response> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = ezsigndocumentGetWordsPositionsV1Request;

    // verify the required parameter 'pkiEzsigndocumentID' is set
    if (pkiEzsigndocumentID == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'pkiEzsigndocumentID' when calling ezsigndocumentGetWordsPositionsV1",
        new ApiException(400, "Missing the required parameter 'pkiEzsigndocumentID' when calling ezsigndocumentGetWordsPositionsV1"));
    }
    // verify the required parameter 'ezsigndocumentGetWordsPositionsV1Request' is set
    if (ezsigndocumentGetWordsPositionsV1Request == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'ezsigndocumentGetWordsPositionsV1Request' when calling ezsigndocumentGetWordsPositionsV1",
        new ApiException(400, "Missing the required parameter 'ezsigndocumentGetWordsPositionsV1Request' when calling ezsigndocumentGetWordsPositionsV1"));
    }

    // create path and map variables
    String path = "/1/object/ezsigndocument/{pkiEzsigndocumentID}/getWordsPositions".replaceAll("\\{format\\}","json").replaceAll("\\{" + "pkiEzsigndocumentID" + "\\}", apiInvoker.escapeString(pkiEzsigndocumentID.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "Authorization" };

    try {
      apiInvoker.invokeAPI(basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((EzsigndocumentGetWordsPositionsV1Response) ApiInvoker.deserialize(localVarResponse,  "", EzsigndocumentGetWordsPositionsV1Response.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Patch an existing Ezsigndocument
  * 
   * @param pkiEzsigndocumentID 
   * @param ezsigndocumentPatchObjectV1Request 
   * @return EzsigndocumentPatchObjectV1Response
  */
  public EzsigndocumentPatchObjectV1Response ezsigndocumentPatchObjectV1 (Integer pkiEzsigndocumentID, EzsigndocumentPatchObjectV1Request ezsigndocumentPatchObjectV1Request) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = ezsigndocumentPatchObjectV1Request;
    // verify the required parameter 'pkiEzsigndocumentID' is set
    if (pkiEzsigndocumentID == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'pkiEzsigndocumentID' when calling ezsigndocumentPatchObjectV1",
        new ApiException(400, "Missing the required parameter 'pkiEzsigndocumentID' when calling ezsigndocumentPatchObjectV1"));
    }
    // verify the required parameter 'ezsigndocumentPatchObjectV1Request' is set
    if (ezsigndocumentPatchObjectV1Request == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'ezsigndocumentPatchObjectV1Request' when calling ezsigndocumentPatchObjectV1",
        new ApiException(400, "Missing the required parameter 'ezsigndocumentPatchObjectV1Request' when calling ezsigndocumentPatchObjectV1"));
    }

    // create path and map variables
    String path = "/1/object/ezsigndocument/{pkiEzsigndocumentID}".replaceAll("\\{" + "pkiEzsigndocumentID" + "\\}", apiInvoker.escapeString(pkiEzsigndocumentID.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "Authorization" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "PATCH", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (EzsigndocumentPatchObjectV1Response) ApiInvoker.deserialize(localVarResponse, "", EzsigndocumentPatchObjectV1Response.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Patch an existing Ezsigndocument
   * 
   * @param pkiEzsigndocumentID    * @param ezsigndocumentPatchObjectV1Request 
  */
  public void ezsigndocumentPatchObjectV1 (Integer pkiEzsigndocumentID, EzsigndocumentPatchObjectV1Request ezsigndocumentPatchObjectV1Request, final Response.Listener<EzsigndocumentPatchObjectV1Response> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = ezsigndocumentPatchObjectV1Request;

    // verify the required parameter 'pkiEzsigndocumentID' is set
    if (pkiEzsigndocumentID == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'pkiEzsigndocumentID' when calling ezsigndocumentPatchObjectV1",
        new ApiException(400, "Missing the required parameter 'pkiEzsigndocumentID' when calling ezsigndocumentPatchObjectV1"));
    }
    // verify the required parameter 'ezsigndocumentPatchObjectV1Request' is set
    if (ezsigndocumentPatchObjectV1Request == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'ezsigndocumentPatchObjectV1Request' when calling ezsigndocumentPatchObjectV1",
        new ApiException(400, "Missing the required parameter 'ezsigndocumentPatchObjectV1Request' when calling ezsigndocumentPatchObjectV1"));
    }

    // create path and map variables
    String path = "/1/object/ezsigndocument/{pkiEzsigndocumentID}".replaceAll("\\{format\\}","json").replaceAll("\\{" + "pkiEzsigndocumentID" + "\\}", apiInvoker.escapeString(pkiEzsigndocumentID.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "Authorization" };

    try {
      apiInvoker.invokeAPI(basePath, path, "PATCH", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((EzsigndocumentPatchObjectV1Response) ApiInvoker.deserialize(localVarResponse,  "", EzsigndocumentPatchObjectV1Response.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
}
