/**
 * eZmax API Definition (Full)
 * This API expose all the functionnalities for the eZmax and eZsign applications.
 *
 * The version of the OpenAPI document: 1.2.1
 * Contact: support-api@ezmax.ca
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package org.openapitools.client.model;

import io.swagger.annotations.*;
import com.google.gson.annotations.SerializedName;

/**
 * Request for POST /1/object/ezsignfoldersignerassociation/createEmbeddedUrl
 **/
@ApiModel(description = "Request for POST /1/object/ezsignfoldersignerassociation/createEmbeddedUrl")
public class EzsignfoldersignerassociationCreateEmbeddedUrlV1Request {
  
  @SerializedName("sReturnUrl")
  private String sReturnUrl = null;
  @SerializedName("sIframedomain")
  private String sIframedomain = null;
  @SerializedName("bIsIframe")
  private Boolean bIsIframe = null;

  /**
   * The return Url to redirect after the signing is completed  **Warning** Due to the potential for Ezsignsigners to cancel redirection, close their browser post-signing, or spoof the landing URL, it's advisable not to solely depend on the sReturnUrl for accurate status within your integration.  Once the Ezsignsigner finishes, they are directed back to your application. Your application can retain transaction state details by either storing data in a cookie or incorporating query parameters in the sReturnUrl. For example: https://www.example.com/sReturnUrl?sSessionID=ABC123  The actual url that will be called will have an extra url parameter appended to give details about the process. The possible values are listed in the table below. For example: https://www.example.com/sReturnUrl?sSessionID=ABC123&eEzsignEvent=CompletedEzsignfolder   |**Query parameters appended**| |---| |eEzsignEvent|   |**eEzsignEvent**|**Description**| |---|---| |SessionTimeout|The session timed out| |SessionLogout|The Ezsignsigner signed out| |DeclinedTermOfUse|The Ezsignsigner refused the terms| |DeclinedSign|The Ezsignsigner refused to sign| |Reassigned|The Ezsignsigner reassigned his signatures to someone else| |CompletedStep|The Ezsignsigner completed his step. There is other signatures to complete the Ezsigndocument| |CompletedEzsignfolder|The Ezsignfolder is completed. Everyone signed their signatures|
   **/
  @ApiModelProperty(value = "The return Url to redirect after the signing is completed  **Warning** Due to the potential for Ezsignsigners to cancel redirection, close their browser post-signing, or spoof the landing URL, it's advisable not to solely depend on the sReturnUrl for accurate status within your integration.  Once the Ezsignsigner finishes, they are directed back to your application. Your application can retain transaction state details by either storing data in a cookie or incorporating query parameters in the sReturnUrl. For example: https://www.example.com/sReturnUrl?sSessionID=ABC123  The actual url that will be called will have an extra url parameter appended to give details about the process. The possible values are listed in the table below. For example: https://www.example.com/sReturnUrl?sSessionID=ABC123&eEzsignEvent=CompletedEzsignfolder   |**Query parameters appended**| |---| |eEzsignEvent|   |**eEzsignEvent**|**Description**| |---|---| |SessionTimeout|The session timed out| |SessionLogout|The Ezsignsigner signed out| |DeclinedTermOfUse|The Ezsignsigner refused the terms| |DeclinedSign|The Ezsignsigner refused to sign| |Reassigned|The Ezsignsigner reassigned his signatures to someone else| |CompletedStep|The Ezsignsigner completed his step. There is other signatures to complete the Ezsigndocument| |CompletedEzsignfolder|The Ezsignfolder is completed. Everyone signed their signatures|")
  public String getSReturnUrl() {
    return sReturnUrl;
  }
  public void setSReturnUrl(String sReturnUrl) {
    this.sReturnUrl = sReturnUrl;
  }

  /**
   * Domain protection for the iFrame
   **/
  @ApiModelProperty(value = "Domain protection for the iFrame")
  public String getSIframedomain() {
    return sIframedomain;
  }
  public void setSIframedomain(String sIframedomain) {
    this.sIframedomain = sIframedomain;
  }

  /**
   * Whether the url would be in an iFrame or not
   **/
  @ApiModelProperty(value = "Whether the url would be in an iFrame or not")
  public Boolean getBIsIframe() {
    return bIsIframe;
  }
  public void setBIsIframe(Boolean bIsIframe) {
    this.bIsIframe = bIsIframe;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    EzsignfoldersignerassociationCreateEmbeddedUrlV1Request ezsignfoldersignerassociationCreateEmbeddedUrlV1Request = (EzsignfoldersignerassociationCreateEmbeddedUrlV1Request) o;
    return (this.sReturnUrl == null ? ezsignfoldersignerassociationCreateEmbeddedUrlV1Request.sReturnUrl == null : this.sReturnUrl.equals(ezsignfoldersignerassociationCreateEmbeddedUrlV1Request.sReturnUrl)) &&
        (this.sIframedomain == null ? ezsignfoldersignerassociationCreateEmbeddedUrlV1Request.sIframedomain == null : this.sIframedomain.equals(ezsignfoldersignerassociationCreateEmbeddedUrlV1Request.sIframedomain)) &&
        (this.bIsIframe == null ? ezsignfoldersignerassociationCreateEmbeddedUrlV1Request.bIsIframe == null : this.bIsIframe.equals(ezsignfoldersignerassociationCreateEmbeddedUrlV1Request.bIsIframe));
  }

  @Override
  public int hashCode() {
    int result = 17;
    result = 31 * result + (this.sReturnUrl == null ? 0: this.sReturnUrl.hashCode());
    result = 31 * result + (this.sIframedomain == null ? 0: this.sIframedomain.hashCode());
    result = 31 * result + (this.bIsIframe == null ? 0: this.bIsIframe.hashCode());
    return result;
  }

  @Override
  public String toString()  {
    StringBuilder sb = new StringBuilder();
    sb.append("class EzsignfoldersignerassociationCreateEmbeddedUrlV1Request {\n");
    
    sb.append("  sReturnUrl: ").append(sReturnUrl).append("\n");
    sb.append("  sIframedomain: ").append(sIframedomain).append("\n");
    sb.append("  bIsIframe: ").append(bIsIframe).append("\n");
    sb.append("}\n");
    return sb.toString();
  }
}
